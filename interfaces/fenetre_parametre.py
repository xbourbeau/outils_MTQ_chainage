# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OutilsMTQDockWidget
                                 A QGIS plugin
 Regroupe les outils pratiques
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-09-23
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Xavier Bourbeau
        email                : xavier.bourbeau@transports.gouv.qc.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.core import QgsMapLayerProxyModel, QgsFieldProxyModel, Qgis
from qgis.PyQt.QtWidgets import QDockWidget, QFileDialog
from qgis.PyQt.QtGui import QPixmap, QIcon, QKeySequence, QColor
from qgis.PyQt import uic
from qgis.PyQt.QtCore import pyqtSignal

# Class pour la gestion des paramètre du plugin
from ..gestion_parametres import sourceParametre
from ..mtq.fnt import choisirFichier
from ..functions.checkIfKeySequenceExists import checkIfKeySequenceExists

FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'fenetre_parametre.ui'))
    
class fenetreParametre(QDockWidget, FORM_CLASS):

    closing_window = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(fenetreParametre, self).__init__(parent)
        self.setupUi(self)
        
        # Class de gestion des paramètres
        self.gestion_parametre = sourceParametre()
        self.plugin_dir = os.path.dirname(os.path.dirname(__file__))
        self.cbx_layer_rtss.setFilters(QgsMapLayerProxyModel.LineLayer)
        self.cbx_field_rtss.setFilters(QgsFieldProxyModel.String)
        self.cbx_field_chainage_d.setFilters(QgsFieldProxyModel.String|QgsFieldProxyModel.Numeric)
        self.cbx_field_chainage.setFilters(QgsFieldProxyModel.String|QgsFieldProxyModel.Numeric)
        self.cbx_field_class.setFilters(QgsFieldProxyModel.String)
        
        self.widgets_action = {
            "Suivre le chainage": self.chx_follow_chainage,
            "Mesurer un chainage": self.chx_distance,
            "Calculer un interval de chainage": self.chx_interval_chainage,
            "Calculer des transects": self.chx_transects,
            "Calculer des atlas": self.chx_atlas,
            "Placer des écussons": self.chx_ecussons,
            "Creation de geometrie": self.chx_create_geometrie,
            "Open SIGO": self.chx_open_sigo,
            "Open SVN": self.chx_open_svn}
        
        self.checkbox_tooltip = {
            "show_rtss_on_map": self.chx_tooltip_rtss,
            "show_chainage_on_map": self.chx_tooltip_chainage,
            "show_distance_on_map": self.chx_tooltip_offset}
        
        # Connections
        self.btn_enregistrer.clicked.connect(self.saveSettings)
        self.btn_annuler.clicked.connect(self.initialisePresentValues)
        #self.btn_aide.clicked.connect(lambda: os.startfile("file://sstao00-adm005/TridentAnalyst/Plugin_chainage_mtq/Documentation/Index.html#section2"))
        self.btn_symblologie_ecusson.clicked.connect(lambda: self.choisirQML(self.txt_sybologie_ecusson))
        self.btn_symblologie_chainage.clicked.connect(lambda: self.choisirQML(self.txt_sybologie_chainage))
        self.cbx_layer_rtss.layerChanged.connect(self.setLayerCombobox)
        self.key_shortcut.keySequenceChanged.connect(self.checkKeyShortcut)
        self.key_shortcut_ecusson.keySequenceChanged.connect(self.checkKeyShortcut2)
        
        self.first_init = True
        self.valide_key_chainage = False
        self.valide_key_ecusson = False
        
        # Initialiser les couches dans les comboBox
        self.initialisePresentValues()
        
        # Définir l'image du logo de l'outil
        self.lbl_logo.setPixmap(QPixmap(os.path.realpath(os.path.join(self.plugin_dir, 'icons/parametres.png'))))
        self.lbl_logo.setScaledContents(True)
        
        # Définir l'icon des boutons pour choisir le fichier de sybologie
        self.btn_symblologie_chainage.setIcon(QIcon(os.path.realpath(os.path.join(self.plugin_dir, 'icons/qml.png'))))
        self.btn_symblologie_ecusson.setIcon(QIcon(os.path.realpath(os.path.join(self.plugin_dir, 'icons/qml.png'))))


    def closeEvent(self, event):
        self.btn_enregistrer.clicked.disconnect(self.saveSettings)
        self.btn_annuler.clicked.disconnect(self.initialisePresentValues)
        #self.btn_aide.clicked.disconnect()
        self.btn_symblologie_ecusson.clicked.disconnect()
        self.btn_symblologie_chainage.clicked.disconnect()
        self.cbx_layer_rtss.layerChanged.disconnect(self.setLayerCombobox)
        self.key_shortcut.keySequenceChanged.disconnect(self.checkKeyShortcut)
        self.key_shortcut_ecusson.keySequenceChanged.disconnect(self.checkKeyShortcut2)
    
        self.closing_window.emit()
        event.accept()
    
    def setLayerCombobox(self, layer):
        for cbx, param in ((self.cbx_field_rtss, "field_num_rtss"),
                            (self.cbx_field_chainage, "field_chainage_fin"),
                            (self.cbx_field_class, "field_classification"),
                            (self.cbx_field_chainage_d, "field_chainage_debut")):
            cbx.setLayer(layer)
            idx = cbx.findText(self.gestion_parametre.getParam(param).getValue())
            if idx != -1: cbx.setCurrentIndex(idx)
    
    def initialisePresentValues(self):
        # Initialisé les valeurs selon les paramètres du plugin
        
        # Set Layer comboBox 
        idx = self.cbx_layer_rtss.findText(self.gestion_parametre.getParam("layer_rtss").getValue())
        if idx != -1:
            self.cbx_layer_rtss.setCurrentIndex(idx)
            self.setLayerCombobox(self.cbx_layer_rtss.currentLayer())
        
        self.chx_follow_update.setChecked(self.gestion_parametre.getParam("suivi_plugin_update").getValue())
        self.chx_format_rtss.setChecked(self.gestion_parametre.getParam("formater_rtss").getValue())
        self.chx_format_chainage.setChecked(self.gestion_parametre.getParam("formater_chainage").getValue())
        self.chx_use_visible.setChecked(self.gestion_parametre.getParam("use_only_on_visible").getValue())
        self.spx_precision.setValue(self.gestion_parametre.getParam("precision_chainage").getValue())
        self.txt_layer_ecusson.setText(self.gestion_parametre.getParam("layer_ecusson_name").getValue())
        self.txt_champ_route.setText(self.gestion_parametre.getParam("layer_ecusson_field_route").getValue())
        self.txt_champ_classe.setText(self.gestion_parametre.getParam("layer_ecusson_field_classe").getValue())
        self.txt_sybologie_ecusson.setText(self.gestion_parametre.getParam("layer_ecusson_style").getValue())
        self.txt_sybologie_chainage.setText(self.gestion_parametre.getParam("layer_chainage_style").getValue())
        self.chk_shorcut_chainage.setChecked(self.gestion_parametre.getParam("use_raccourcis_chainage").getValue())
        self.key_shortcut.setKeySequence(QKeySequence(self.gestion_parametre.getParam("raccourcis_clavier").getValue()))
        self.chk_shorcut_ecusson.setChecked(self.gestion_parametre.getParam("use_raccourcis_ecusson").getValue())
        self.key_shortcut_ecusson.setKeySequence(QKeySequence(self.gestion_parametre.getParam("raccourcis_clavier_ecusson").getValue()))
        self.mFontButton.setCurrentFont(self.gestion_parametre.getParam("font_on_map").getValue())
        self.mColorButton.setColor(QColor(self.gestion_parametre.getParam("color_font_on_map").getValue()))
        
        # Définir les case à cocher du groupe pour afficher un tooltip
        group_box_check = False
        for param_name, widget in self.checkbox_tooltip.items():
            state = self.gestion_parametre.getParam(param_name).getValue()
            widget.setChecked(state)
            if state: group_box_check = True
        self.gbx_show_tooltip.setChecked(group_box_check)
        
        # Parcourir les widget de case a cocher et définir son état et l'icon de l'action associé
        for action_name, widget in self.widgets_action.items():
            # Action associé au widjet
            action = self.gestion_parametre.getAction(action_name)
            if action: 
                # Définir son icon
                if self.first_init: widget.setIcon(QIcon(action.getIcon()))
                # Définir son état (coché/décoché)
                widget.setChecked(action.getValue())
        
        self.first_init = False
    
    # Enregistrer les paramètre dans un fichier text
    def saveSettings(self):
        
        self.gestion_parametre.getParam("layer_rtss").setValue(self.cbx_layer_rtss.currentText())
        self.gestion_parametre.getParam("field_num_rtss").setValue(self.cbx_field_rtss.currentField())
        self.gestion_parametre.getParam("field_chainage_fin").setValue(self.cbx_field_chainage.currentField())
        self.gestion_parametre.getParam("field_classification").setValue(self.cbx_field_class.currentField())
        self.gestion_parametre.getParam("field_chainage_debut").setValue(self.cbx_field_chainage_d.currentField())
        
        self.gestion_parametre.getParam("suivi_plugin_update").setValue(self.chx_follow_update.isChecked())
        self.gestion_parametre.getParam("formater_rtss").setValue(self.chx_format_rtss.isChecked())
        self.gestion_parametre.getParam("formater_chainage").setValue(self.chx_format_chainage.isChecked())
        self.gestion_parametre.getParam("use_only_on_visible").setValue(self.chx_use_visible.isChecked())
        self.gestion_parametre.getParam("precision_chainage").setValue(self.spx_precision.value())
        self.gestion_parametre.getParam("layer_ecusson_name").setValue(self.txt_layer_ecusson.text())
        self.gestion_parametre.getParam("layer_ecusson_field_route").setValue(self.txt_champ_route.text())
        self.gestion_parametre.getParam("layer_ecusson_field_classe").setValue(self.txt_champ_classe.text())
        self.gestion_parametre.getParam("layer_ecusson_style").setValue(self.txt_sybologie_ecusson.text())
        self.gestion_parametre.getParam("layer_chainage_style").setValue(self.txt_sybologie_chainage.text())
        
        # Set raccourci pour le suivi du chainage
        set_raccourci = self.chk_shorcut_chainage.isChecked()
        self.gestion_parametre.getParam("use_raccourcis_chainage").setValue(set_raccourci)
        if set_raccourci: self.gestion_parametre.getParam("raccourcis_clavier").setValue(self.key_shortcut.keySequence().toString())
        # Set raccourci pour le placement d'éccussons
        set_raccourci = self.chk_shorcut_ecusson.isChecked()
        self.gestion_parametre.getParam("use_raccourcis_ecusson").setValue(set_raccourci)
        if set_raccourci: self.gestion_parametre.getParam("raccourcis_clavier_ecusson").setValue(self.key_shortcut_ecusson.keySequence().toString())
        
        self.gestion_parametre.getParam("font_on_map").setValue(self.mFontButton.currentFont())
        self.gestion_parametre.getParam("color_font_on_map").setValue(self.mColorButton.color().name())
        
        group_box_check = self.gbx_show_tooltip.isChecked()
        for param_name, widget in self.checkbox_tooltip.items():
            if group_box_check: self.gestion_parametre.getParam(param_name).setValue(widget.isChecked())
            else: self.gestion_parametre.getParam(param_name).setValue(False)
        
        for action_name, widget in self.widgets_action.items():
            action = self.gestion_parametre.getAction(action_name)
            if action.getValue() != widget.isChecked(): action.setValue(widget.isChecked())
        self.close()
        
    def choisirQML(self, line_edit):
        line_edit.setText(choisirFichier("Ouvrir un fichier de style", "QGIS Layer Settings (*.qml)", line_edit.text()))
        
    
    def checkKeyShortcut(self, key_sequence):
        self.valide_key_chainage = False
        if key_sequence.toString() != self.gestion_parametre.getParam("raccourcis_clavier").getValue():
            if checkIfKeySequenceExists(key_sequence): 
                self.lbl_key_sequence.setText(
                    f"Attention! Le raccourci {key_sequence.toString()} est déjà associé à une action")
                self.valide_key_chainage = True
        if not self.valide_key_ecusson and not self.valide_key_chainage: self.lbl_key_sequence.setText("")
    
    def checkKeyShortcut2(self, key_sequence):
        self.valide_key_ecusson = False
        if key_sequence.toString() != self.gestion_parametre.getParam("raccourcis_clavier_ecusson").getValue():
            if checkIfKeySequenceExists(key_sequence):
                self.lbl_key_sequence.setText(
                    f"Attention! Le raccourci {key_sequence.toString()} est déjà associé à une action")
                self.valide_key_ecusson = True
        if not self.valide_key_ecusson and not self.valide_key_chainage: self.lbl_key_sequence.setText("")
        
        
pass
