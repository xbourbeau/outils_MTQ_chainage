# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OutilsMTQDockWidget
                                 A QGIS plugin
 Regroupe les outils pratiques
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-09-23
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Xavier Bourbeau
        email                : xavier.bourbeau@transports.gouv.qc.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os

from qgis.core import QgsMapLayerProxyModel, QgsFieldProxyModel, Qgis
from qgis.gui import QgisInterface
from qgis.PyQt.QtWidgets import QDockWidget
from qgis.PyQt.QtGui import QIcon, QKeySequence, QColor
from qgis.PyQt import uic
from qgis.PyQt.QtCore import pyqtSignal, Qt

# Class pour la gestion des paramètre du plugin
from ..modules.PluginParametres import PluginParametres
from ..mtq.fnt.imports import choisirFichier
from ..functions.checkIfKeySequenceExists import checkIfKeySequenceExists
from ..functions.getIcon import getIcon, getPixmap

FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'fenetre_parametre.ui'))
    
class fenetreParametre(QDockWidget, FORM_CLASS):

    closing_window = pyqtSignal()
    plugin_inactif = pyqtSignal()
    plugin_actif = pyqtSignal()

    def __init__(self, iface:QgisInterface, parent=None):
        """Constructor."""
        self.iface = iface
        super(fenetreParametre, self).__init__(parent)
        self.setupUi(self)
        
        # Class de gestion des paramètres
        self.params = PluginParametres()
        self.cbx_layer_rtss.setFilters(QgsMapLayerProxyModel.LineLayer)
        self.cbx_field_rtss.setFilters(QgsFieldProxyModel.String)
        self.cbx_field_chainage_d.setFilters(QgsFieldProxyModel.String|QgsFieldProxyModel.Numeric)
        self.cbx_field_chainage.setFilters(QgsFieldProxyModel.String|QgsFieldProxyModel.Numeric)
        self.cbx_field_class.setFilters(QgsFieldProxyModel.String)
        
        self.widgets_action = {
            "Suivre le chainage": self.chx_follow_chainage,
            "Mesurer un chainage": self.chx_distance,
            "Calculer un interval de chainage": self.chx_interval_chainage,
            "Calculer des transects": self.chx_transects,
            "Calculer des atlas": self.chx_atlas,
            "Placer des écussons": self.chx_ecussons,
            "Creation de geometrie": self.chx_create_geometrie,
            "Open SIGO": self.chx_open_sigo,
            "Open SVN": self.chx_open_svn}
        
        self.checkbox_tooltip = {
            "show_rtss_on_map": self.chx_tooltip_rtss,
            "show_chainage_on_map": self.chx_tooltip_chainage,
            "show_distance_on_map": self.chx_tooltip_offset}
        
        # Connections
        self.btn_enregistrer.clicked.connect(self.saveSettings)
        self.btn_annuler.clicked.connect(self.initialisePresentValues)
        self.btn_symblologie_ecusson.clicked.connect(lambda: self.choisirQML(self.txt_sybologie_ecusson))
        self.btn_symblologie_chainage.clicked.connect(lambda: self.choisirQML(self.txt_sybologie_chainage))
        self.cbx_layer_rtss.layerChanged.connect(self.setLayerCombobox)
        self.key_shortcut.keySequenceChanged.connect(self.checkKeyShortcut)
        self.key_shortcut_ecusson.keySequenceChanged.connect(self.checkKeyShortcut2)
        self.dockLocationChanged.connect(lambda area: self.params.setValue("dlg_param_last_pos", area))
        
        self.valide_key_chainage = False
        self.valide_key_ecusson = False
        
        # Définir l'image du logo de l'outil
        self.lbl_logo.setPixmap(getPixmap("parametres"))
        self.lbl_logo.setScaledContents(True)
        
        # Définir l'icon des boutons pour choisir le fichier de sybologie
        self.btn_symblologie_chainage.setIcon(getIcon("qml"))
        self.btn_symblologie_ecusson.setIcon(getIcon("qml"))

        # Parcourir les widget de case a cocher et définir son état et l'icon de l'action associé
        for action_name, widget in self.widgets_action.items():
            # Action associé au widjet
            action = self.params.getAction(action_name)
            # Définir son icon
            if action: widget.setIcon(QIcon(action.getIcon()))

    def setInterfaceActive(self):
        if self.isVisible(): self.raise_()
        else: 
            self.initialisePresentValues()
            self.plugin_inactif.emit()
            # Show the dockwidget
            self.iface.addTabifiedDockWidget(self.params.getValue("dlg_param_last_pos"), self, raiseTab=True)
            self.show()

    def closeEvent(self, event):
        if self.isVisible():
            self.closing_window.emit()
            self.plugin_actif.emit()
            event.accept()
    
    def setLayerCombobox(self, layer):
        for cbx, param in ((self.cbx_field_rtss, "field_num_rtss"),
                            (self.cbx_field_chainage, "field_chainage_fin"),
                            (self.cbx_field_class, "field_classification"),
                            (self.cbx_field_chainage_d, "field_chainage_debut")):
            cbx.setLayer(layer)
            idx = cbx.findText(self.params.getValue(param))
            if idx != -1: cbx.setCurrentIndex(idx)
    
    def initialisePresentValues(self):
        # Initialisé les valeurs selon les paramètres du plugin
        # Set Layer comboBox 
        idx = self.cbx_layer_rtss.findText(self.params.getValue("layer_rtss"))
        if idx != -1:
            self.cbx_layer_rtss.setCurrentIndex(idx)
            self.setLayerCombobox(self.cbx_layer_rtss.currentLayer())
        
        self.chx_follow_update.setChecked(self.params.getValue("suivi_plugin_update"))
        self.chx_format_rtss.setChecked(self.params.getValue("formater_rtss"))
        self.chx_format_chainage.setChecked(self.params.getValue("formater_chainage"))
        self.chx_use_visible.setChecked(self.params.getValue("use_only_on_visible"))
        self.spx_precision.setValue(self.params.getValue("precision_chainage"))
        self.txt_layer_ecusson.setText(self.params.getValue("layer_ecusson_name"))
        self.txt_champ_route.setText(self.params.getValue("layer_ecusson_field_route"))
        self.txt_champ_classe.setText(self.params.getValue("layer_ecusson_field_classe"))
        self.txt_sybologie_ecusson.setText(self.params.getValue("layer_ecusson_style"))
        self.txt_sybologie_chainage.setText(self.params.getValue("layer_chainage_style"))
        self.chk_shorcut_chainage.setChecked(self.params.getValue("use_raccourcis_chainage"))
        self.key_shortcut.setKeySequence(QKeySequence(self.params.getValue("raccourcis_clavier")))
        self.chk_shorcut_ecusson.setChecked(self.params.getValue("use_raccourcis_ecusson"))
        self.key_shortcut_ecusson.setKeySequence(QKeySequence(self.params.getValue("raccourcis_clavier_ecusson")))
        self.mFontButton.setCurrentFont(self.params.getValue("font_on_map"))
        self.mColorButton.setColor(QColor(self.params.getValue("color_font_on_map")))
        
        # Définir les case à cocher du groupe pour afficher un tooltip
        group_box_check = False
        for param_name, widget in self.checkbox_tooltip.items():
            state = self.params.getValue(param_name)
            widget.setChecked(state)
            if state: group_box_check = True
        self.gbx_show_tooltip.setChecked(group_box_check)
        
        # Parcourir les widget de case a cocher et définir son état et l'icon de l'action associé
        for action_name, widget in self.widgets_action.items():
            # Action associé au widjet
            action = self.params.getAction(action_name)
            # Définir son état (coché/décoché)
            if action: widget.setChecked(action.get())
    
    # Enregistrer les paramètre dans un fichier text
    def saveSettings(self):
        self.params.setValue("layer_rtss", self.cbx_layer_rtss.currentText())
        self.params.setValue("field_num_rtss", self.cbx_field_rtss.currentField())
        self.params.setValue("field_chainage_fin", self.cbx_field_chainage.currentField())
        self.params.setValue("field_classification", self.cbx_field_class.currentField())
        self.params.setValue("field_chainage_debut", self.cbx_field_chainage_d.currentField())
        
        self.params.setValue("suivi_plugin_update", self.chx_follow_update.isChecked())
        self.params.setValue("formater_rtss", self.chx_format_rtss.isChecked())
        self.params.setValue("formater_chainage", self.chx_format_chainage.isChecked())
        self.params.setValue("use_only_on_visible", self.chx_use_visible.isChecked())
        self.params.setValue("precision_chainage", self.spx_precision.value())
        self.params.setValue("layer_ecusson_name", self.txt_layer_ecusson.text())
        self.params.setValue("layer_ecusson_field_route", self.txt_champ_route.text())
        self.params.setValue("layer_ecusson_field_classe", self.txt_champ_classe.text())
        self.params.setValue("layer_ecusson_style", self.txt_sybologie_ecusson.text())
        self.params.setValue("layer_chainage_style", self.txt_sybologie_chainage.text())
        
        # Set raccourci pour le suivi du chainage
        set_raccourci = self.chk_shorcut_chainage.isChecked()
        self.params.setValue("use_raccourcis_chainage", set_raccourci)
        if set_raccourci: self.params.setValue("raccourcis_clavier", self.key_shortcut.keySequence().toString())
        # Set raccourci pour le placement d'éccussons
        set_raccourci = self.chk_shorcut_ecusson.isChecked()
        self.params.setValue("use_raccourcis_ecusson", set_raccourci)
        if set_raccourci: self.params.setValue("raccourcis_clavier_ecusson", self.key_shortcut_ecusson.keySequence().toString())
        
        self.params.setValue("font_on_map", self.mFontButton.currentFont())
        self.params.setValue("color_font_on_map", self.mColorButton.color().name())
        
        group_box_check = self.gbx_show_tooltip.isChecked()
        for param_name, widget in self.checkbox_tooltip.items():
            if group_box_check: self.params.setValue(param_name, widget.isChecked())
            else: self.params.setValue(param_name, False)
        
        for action_name, widget in self.widgets_action.items():
            action = self.params.getAction(action_name)
            if action.get() != widget.isChecked(): action.set(widget.isChecked())
        self.close()
        
    def choisirQML(self, line_edit):
        line_edit.setText(choisirFichier("Ouvrir un fichier de style", "QGIS Layer Settings (*.qml)", line_edit.text()))
        
    def checkKeyShortcut(self, key_sequence):
        self.valide_key_chainage = False
        if key_sequence.toString() != self.params.getValue("raccourcis_clavier"):
            if checkIfKeySequenceExists(key_sequence): 
                self.lbl_key_sequence.setText(
                    f"Attention! Le raccourci {key_sequence.toString()} est déjà associé à une action")
                self.valide_key_chainage = True
        if not self.valide_key_ecusson and not self.valide_key_chainage: self.lbl_key_sequence.setText("")
    
    def checkKeyShortcut2(self, key_sequence):
        self.valide_key_ecusson = False
        if key_sequence.toString() != self.params.getValue("raccourcis_clavier_ecusson"):
            if checkIfKeySequenceExists(key_sequence):
                self.lbl_key_sequence.setText(
                    f"Attention! Le raccourci {key_sequence.toString()} est déjà associé à une action")
                self.valide_key_ecusson = True
        if not self.valide_key_ecusson and not self.valide_key_chainage: self.lbl_key_sequence.setText("")
        
        
pass
