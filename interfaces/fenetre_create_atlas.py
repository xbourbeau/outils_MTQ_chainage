# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OutilsMTQDockWidget
                                 A QGIS plugin
 Regroupe les outils pratiques
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-09-23
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Xavier Bourbeau
        email                : xavier.bourbeau@transports.gouv.qc.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
from qgis.gui import QgisInterface
from qgis.PyQt import uic
from qgis.core import QgsProject
from qgis.PyQt.QtCore import pyqtSignal
from qgis.PyQt.QtWidgets import QDialog

from ..modules.PluginParametres import PluginParametres
from ..mtq.core import Geocodage

FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'fenetre_create_atlas.ui'))

class fenetreCreateAtlas(QDialog, FORM_CLASS):

    closing_window = pyqtSignal()
    
    def __init__(self, iface:QgisInterface, geocode:Geocodage, parent=None):
        # Référence de l'interface QGIS
        self.iface = iface
        # Module de géocodage 
        self.geocode = geocode
        # Référence à la couche des RTSS
        self.layer_rtss = None
        # Constructor
        super(fenetreCreateAtlas, self).__init__(parent)
        # Set up l'interface
        self.setupUi(self)
        # Class de gestion des paramètres
        self.params = PluginParametres()
        # Répertoire du plugin
        self.plugin_dir = os.path.dirname(os.path.dirname(__file__))
        # Connexions
        self.gbx_scale.toggled.connect(self.useScale)
        self.btn_creer.clicked.connect(self.createAtlas)
        
        # Définir l'image du logo de l'outil
        self.lbl_logo.setPixmap(self.params.getPixmap("atlas"))
        self.lbl_logo.setScaledContents(True)
    
    def closeEvent(self, event):
        if self.isVisible():
            # Emit signal que la fenêtre vas être fermé
            self.closing_window.emit()
            # Fermer la fenêtre
            event.accept()
    
    def getPageSize(self, spinbox):
        """ Permet de retourner une dimmentions de la page en mètres """
        # Valeur de hauteur et de largeur si le mode échelle est coché
        if self.gbx_scale.isChecked(): return (spinbox.value()/1000) * self.spx_scale.value()
        # Valeur de hauteur et de largeur si le mode échelle est décoché
        else: return spinbox.value()

    def getPageHeight(self):
        """ Permet de retourner la hauteur de la page en mètres """
        return self.getPageSize(self.spx_haut)
    
    def getPageWidth(self):
        """ Permet de retourner la largeur de la page en mètres """
        return self.getPageSize(self.spx_large)

    def setLayer(self, layer_id): self.layer_rtss = QgsProject.instance().mapLayer(layer_id)
    
    def setInterfaceActive(self):
        if self.isVisible(): self.raise_()
        else: 
            self.show()

    def useScale(self, is_checked):
        """ Sélection du mode échelle de la carte """
        # Activer l'option d'ajustement selon l'échelle lorsque coché
        if is_checked: suffix, tooltip = " mm", "la carte"
        else: suffix, tooltip = " m", "la mise en page"
        # Activer le spinbox d'échelle
        self.spx_scale.setEnabled(is_checked)
        # Convertir les textes des dimensions pour des milimètres
        self.spx_haut.setSuffix(suffix)
        self.spx_haut.setToolTip("Hauteur de la page dans " + tooltip)
        self.spx_large.setSuffix(suffix)
        self.spx_haut.setToolTip("Largeur de la page dans " + tooltip)
    
    def createAtlas(self):
        # Listes des LineRTSS représentant les RTSS selectionnées
        list_rtss = []
        for feat in self.layer_rtss.selectedFeatures():
            feat_rtss = self.geocode.get(feat[self.params.getValue("field_num_rtss")])
            list_rtss.append(feat_rtss.asLineRTSS())
        
        # Création des géométries des pages d'atlas
        atlas_layer = self.geocode.getAtlasLayer(
            list_locs=list_rtss,
            width=self.getPageWidth(),
            height=self.getPageHeight(),
            overlap=self.spx_overlap.value(),
            start_offset=self.spx_start_offset.value(),
            vertical_margin=self.spx_vert_marg.value())
        # Appliquer le style
        atlas_layer.loadNamedStyle(self.params.getValue("layer_atlas_style"))
        # Ajout de la couche des pages d'atlas au projet
        QgsProject.instance().addMapLayer(atlas_layer)
        self.close()
        