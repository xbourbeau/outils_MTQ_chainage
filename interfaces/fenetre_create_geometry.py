# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OutilsMTQDockWidget
                                 A QGIS plugin
 Regroupe les outils pratiques
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-09-23
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Xavier Bourbeau
        email                : xavier.bourbeau@transports.gouv.qc.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
from qgis.gui import QgisInterface, QgsDockWidget
from qgis.PyQt import uic
from qgis.core import QgsVectorLayer, NULL
from qgis.PyQt.QtCore import pyqtSignal, QVariant
from PyQt5.QtCore import Qt
from PyQt5 import QtWidgets, QtCore, QtGui
from qgis.PyQt.QtWidgets import QDockWidget, QToolButton, QMenu, QCheckBox, QWidgetAction, QAction

from ..modules.PluginParametres import PluginParametres
from ..modules.CompleterRTSS import CompleterRTSS
from ..mtq.core import Geocodage, Utilitaire
from ..functions.getIcon import getPixmap, getIcon

FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'fenetre_create_geometry.ui'))

class fenetreCreationGeometrie(QDockWidget, FORM_CLASS):

    closing_window = pyqtSignal()
    set_lock_chainage = pyqtSignal()
    set_lock_offset = pyqtSignal()
    
    def __init__(self, iface:QgisInterface, geocode:Geocodage, parent=None):
        # Référence de l'interface QGIS
        self.iface = iface
        # Module de géocodage 
        self.geocode = geocode
        # Constructor
        super(fenetreCreationGeometrie, self).__init__(parent)
        # Set up l'interface
        self.setupUi(self)
        
        # Class de gestion des paramètres
        self.params = PluginParametres()

        # Install event filter for cycling
        self.installEventFilter(self)
        self.tab_widgets = [self.txt_rtss, self.spx_chainage, self.spx_offset, self.btn_add]

        # Set Action to zoom on exutoire IITs
        action = QAction(self.params.getIcon("loc"), "Lock", self)
        action.setCheckable(True)
        action.triggered.connect(lambda: self.set_lock_chainage.emit())
        self.act_lock_chainage.setDefaultAction(action)

        # Set Action to zoom on exutoire IITs
        action = QAction(self.params.getIcon("loc"), "Lock", self)
        action.setCheckable(True)
        action.triggered.connect(lambda: self.set_lock_offset.emit())
        self.act_lock_offset.setDefaultAction(action)

        #self.btn_add.setIcon(getIcon("qml"))

        # Définir l'image du logo de l'outil
        #self.btn_add.setPixmap(getPixmap("geocodage_inverse"))
        #self.btn_add.setScaledContents(True)

    def closeEvent(self, event):
        if self.isVisible():
            # Emit signal que la fenêtre vas être fermé
            self.closing_window.emit()
            # Fermer la fenêtre
            event.accept()
    
    def setInterfaceActive(self):
        if self.isVisible(): self.raise_()
        else:
            # Get all dock widgets in left area
            left_docks = self.iface.mainWindow().findChildren(QgsDockWidget)
            left_docks = [d for d in left_docks if 
                        self.iface.mainWindow().dockWidgetArea(d) == Qt.LeftDockWidgetArea]
            # Tabify with last dock widget
            if len(left_docks) > 1: self.iface.mainWindow().tabifyDockWidget(left_docks[-2], self)
            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self)
            # Créer le completer
            completer = CompleterRTSS(self.geocode, parent=self.txt_rtss, formater_rtss=False)
            # Appliquer le Completer au LineEdit
            self.txt_rtss.setCompleter(completer)
            self.show()

    def eventFilter(self, obj, event):
        if event.type() == 7: 
            if event.key() == QtCore.Qt.Key_Tab:
                current = QtWidgets.QApplication.focusWidget()
                if current == self.btn_add: self.txt_rtss.setFocus()
        return super().eventFilter(obj, event)

    def lockOffset(self, lock:bool):
        self.act_lock_offset.setChecked(lock)
        self.spx_offset.setEnabled(not lock)

    def lockChainage(self, lock:bool):
        self.act_lock_chainage.setChecked(lock)
        self.spx_chainage.setEnabled(not lock)

    def setValuesFromPoint(self, point_rtss, is_signal=True):
        if not is_signal:
            self.setRTSS(point_rtss.getRTSS().value(), False)
            self.setChainage(point_rtss.getChainage().value(), False)
            self.setOffset(point_rtss.getOffset(), False)

    def setRTSS(self, rtss, is_signal=True):
        if is_signal: pass
        else: self.txt_rtss.setText(rtss)

    def setChainage(self, chainage, is_signal=True):
        if is_signal: pass
        else: self.spx_chainage.setValue(chainage)

    def setOffset(self, offset, is_signal=True):
        if is_signal: pass
        else: self.spx_offset.setValue(offset)

    #def updateOffset(self, is_signal=True):
    #    if is_signal