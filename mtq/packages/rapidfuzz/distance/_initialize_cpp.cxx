/* Generated by Cython 3.0.11 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_11" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x03000BF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__;  (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__rapidfuzz__distance___initialize_cpp
#define __PYX_HAVE_API__rapidfuzz__distance___initialize_cpp
/* Early includes */
#include <string.h>
#include <stdio.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include <math.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <cmath>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <vector>
#include "rapidfuzz.h"
#include "rapidfuzz/details/types.hpp"
#include "cpp_common.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "src/rapidfuzz/distance/_initialize_cpp.pyx",
  "./src/rapidfuzz/cpp_common.pxd",
  "<stringsource>",
  "src/rapidfuzz/distance/_initialize_cpp.pxd",
  "type.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* EnumClassDecl.proto */
#if defined (_MSC_VER)
  #if _MSC_VER >= 1910
    #define __PYX_ENUM_CLASS_DECL enum
  #else
    #define __PYX_ENUM_CLASS_DECL
  #endif
#else
  #define __PYX_ENUM_CLASS_DECL enum
#endif

/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops;
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes;
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment;
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock;
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop;
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode;
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__;
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__;
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__;
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr;
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__;
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__;
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr;
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__;

/* "rapidfuzz/distance/_initialize_cpp.pxd":9
 * 
 * 
 * cdef class Editops:             # <<<<<<<<<<<<<<
 *     cdef RfEditops editops
 * 
 */
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops {
  PyObject_HEAD
  rapidfuzz::Editops editops;
};


/* "rapidfuzz/distance/_initialize_cpp.pxd":12
 *     cdef RfEditops editops
 * 
 * cdef class Opcodes:             # <<<<<<<<<<<<<<
 *     cdef RfOpcodes opcodes
 * 
 */
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes {
  PyObject_HEAD
  rapidfuzz::Opcodes opcodes;
};


/* "rapidfuzz/distance/_initialize_cpp.pxd":15
 *     cdef RfOpcodes opcodes
 * 
 * cdef class ScoreAlignment:             # <<<<<<<<<<<<<<
 *     cdef public object score
 *     cdef public Py_ssize_t src_start
 */
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment {
  PyObject_HEAD
  PyObject *score;
  Py_ssize_t src_start;
  Py_ssize_t src_end;
  Py_ssize_t dest_start;
  Py_ssize_t dest_end;
};


/* "rapidfuzz/distance/_initialize_cpp.pyx":180
 *     return result_list
 * 
 * cdef class MatchingBlock:             # <<<<<<<<<<<<<<
 *     """
 *     Triple describing matching subsequences
 */
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock {
  PyObject_HEAD
  size_t a;
  size_t b;
  size_t size;
};


/* "rapidfuzz/distance/_initialize_cpp.pyx":309
 *     return result_list
 * 
 * cdef class Editop:             # <<<<<<<<<<<<<<
 *     """
 *     Tuple like object describing an edit operation.
 */
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop {
  PyObject_HEAD
  PyObject *tag;
  Py_ssize_t src_pos;
  Py_ssize_t dest_pos;
};


/* "rapidfuzz/distance/_initialize_cpp.pyx":585
 *         return "Editops([" + ", ".join(repr(op) for op in self) + f"], src_len={self.editops.get_src_len()}, dest_len={self.editops.get_dest_len()})"
 * 
 * cdef class Opcode:             # <<<<<<<<<<<<<<
 *     """
 *     Tuple like object describing an edit operation.
 */
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode {
  PyObject_HEAD
  PyObject *tag;
  Py_ssize_t src_start;
  Py_ssize_t src_end;
  Py_ssize_t dest_start;
  Py_ssize_t dest_end;
};


/* "rapidfuzz/distance/_initialize_cpp.pyx":215
 *         raise IndexError('MatchingBlock index out of range')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         yield self.a
 *         yield self.b
 */
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ {
  PyObject_HEAD
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self;
};


/* "rapidfuzz/distance/_initialize_cpp.pyx":356
 *         raise IndexError('Editop index out of range')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         yield self.tag
 *         yield self.src_pos
 */
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ {
  PyObject_HEAD
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self;
};


/* "rapidfuzz/distance/_initialize_cpp.pyx":573
 *             raise TypeError("Expected index or slice")
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef size_t i
 *         for i in range(self.editops.size()):
 */
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ {
  PyObject_HEAD
  size_t __pyx_v_i;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self;
  size_t __pyx_t_0;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
};


/* "rapidfuzz/distance/_initialize_cpp.pyx":583
 * 
 *     def __repr__(self):
 *         return "Editops([" + ", ".join(repr(op) for op in self) + f"], src_len={self.editops.get_src_len()}, dest_len={self.editops.get_dest_len()})"             # <<<<<<<<<<<<<<
 * 
 * cdef class Opcode:
 */
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_op;
};


/* "rapidfuzz/distance/_initialize_cpp.pyx":651
 *         raise IndexError('Opcode index out of range')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         yield self.tag
 *         yield self.src_start
 */
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ {
  PyObject_HEAD
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self;
};


/* "rapidfuzz/distance/_initialize_cpp.pyx":830
 *             raise TypeError("Expected index")
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef size_t i
 *         for i in range(self.opcodes.size()):
 */
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ {
  PyObject_HEAD
  size_t __pyx_v_i;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self;
  size_t __pyx_t_0;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
};


/* "rapidfuzz/distance/_initialize_cpp.pyx":842
 * 
 *     def __repr__(self):
 *         return "Opcodes([" + ", ".join(repr(op) for op in self) + f"], src_len={self.opcodes.get_src_len()}, dest_len={self.opcodes.get_dest_len()})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr {
  PyObject_HEAD
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_op;
};


/* "rapidfuzz/distance/_initialize_cpp.pyx":885
 *         raise IndexError('Opcode index out of range')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         yield self.score
 *         yield self.src_start
 */
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ {
  PyObject_HEAD
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self;
};

/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
      static PyCodeObject *__pyx_frame_code = NULL;\
      CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
      int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
      if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
#if PY_VERSION_HEX >= 0x030b00a2
  #if PY_VERSION_HEX >= 0x030C00b1
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     ((!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #else
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #endif
  #define __Pyx_EnterTracing(tstate)  PyThreadState_EnterTracing(tstate)
  #define __Pyx_LeaveTracing(tstate)  PyThreadState_LeaveTracing(tstate)
#elif PY_VERSION_HEX >= 0x030a00b1
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->cframe->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->cframe->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                 || tstate->c_profilefunc != NULL);\
      } while (0)
#else
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                         || tstate->c_profilefunc != NULL);\
      } while (0)
#endif
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 1, 1)) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 1)) {\
          __Pyx_EnterTracing(tstate);\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          __Pyx_LeaveTracing(tstate);\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_EnterTracing(tstate);
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      __Pyx_LeaveTracing(tstate);
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0)) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0)) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0)) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      __Pyx_EnterTracing(tstate);
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      __Pyx_LeaveTracing(tstate);
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = __Pyx_PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              __Pyx_PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_size_t(size_t value, Py_ssize_t width, char padding_char, char format_char);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* pep479.proto */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char);

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* tp_new.proto */
#define __Pyx_tp_new(type_obj, args) __Pyx_tp_new_kwargs(type_obj, args, NULL)
static CYTHON_INLINE PyObject* __Pyx_tp_new_kwargs(PyObject* type_obj, PyObject* args, PyObject* kwargs) {
    return (PyObject*) (((PyTypeObject*)type_obj)->tp_new((PyTypeObject*)type_obj, args, kwargs));
}

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseUnboundLocalError.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* UnicodeConcatInPlace.proto */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
    #if CYTHON_REFNANNY
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)
    #else
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right)
    #endif
    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    );
#else
#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat
#endif
#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ?\
    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_11
#define __PYX_HAVE_RT_ImportType_proto_3_0_11
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_11(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_11(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_11 {
   __Pyx_ImportType_CheckSize_Error_3_0_11 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_11 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_11 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_11(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_11 check_size);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* ClassMethod.proto */
#include "descrobject.h"
CYTHON_UNUSED static PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* UnicodeAsUCS4.proto */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject*);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* ObjectAsUCS4.proto */
#define __Pyx_PyObject_AsPy_UCS4(x)\
    (likely(PyUnicode_Check(x)) ? __Pyx_PyUnicode_AsPy_UCS4(x) : __Pyx__PyObject_AsPy_UCS4(x))
static Py_UCS4 __Pyx__PyObject_AsPy_UCS4(PyObject*);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
struct __pyx_CoroutineObject;
typedef PyObject *(*__pyx_coroutine_body_t)(struct __pyx_CoroutineObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct __pyx_CoroutineObject {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
#define __Pyx_Generator_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(PyObject *module);

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "cpython" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.pycapsule" */

/* Module declarations from "libc.stddef" */

/* Module declarations from "libc.stdint" */

/* Module declarations from "libc.stdlib" */

/* Module declarations from "libc.math" */

/* Module declarations from "libcpp" */

/* Module declarations from "libcpp.cmath" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "rapidfuzz" */

/* Module declarations from "cpp_common" */
static CYTHON_INLINE bool __pyx_f_10cpp_common_hash_array(PyObject *, RF_String *); /*proto*/
static CYTHON_INLINE bool __pyx_f_10cpp_common_hash_sequence(PyObject *, RF_String *); /*proto*/
static CYTHON_INLINE bool __pyx_f_10cpp_common_is_none(PyObject *); /*proto*/
static CYTHON_INLINE RF_String __pyx_f_10cpp_common_conv_sequence(PyObject *); /*proto*/
static CYTHON_INLINE void __pyx_f_10cpp_common_SetFuncAttrs(PyObject *, PyObject *); /*proto*/

/* Module declarations from "cpython.list" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "rapidfuzz.distance._initialize_cpp" */
static PyObject *__pyx_f_9rapidfuzz_8distance_15_initialize_cpp_edit_type_to_str(__PYX_ENUM_CLASS_DECL rapidfuzz::EditType); /*proto*/
static __PYX_ENUM_CLASS_DECL rapidfuzz::EditType __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_str_to_edit_type(PyObject *); /*proto*/
static rapidfuzz::Editops __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_list_to_editops(PyObject *, size_t, size_t); /*proto*/
static rapidfuzz::Opcodes __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_list_to_opcodes(PyObject *, size_t, size_t); /*proto*/
static PyObject *__pyx_f_9rapidfuzz_8distance_15_initialize_cpp_editops_to_list(rapidfuzz::Editops const &); /*proto*/
static PyObject *__pyx_f_9rapidfuzz_8distance_15_initialize_cpp_opcodes_to_list(rapidfuzz::Opcodes const &); /*proto*/
static PyObject *__pyx_f_9rapidfuzz_8distance_15_initialize_cpp_editops_to_matching_blocks(rapidfuzz::Editops const &); /*proto*/
static PyObject *__pyx_f_9rapidfuzz_8distance_15_initialize_cpp_opcodes_to_matching_blocks(rapidfuzz::Opcodes const &); /*proto*/
static PyObject *__pyx_f_9rapidfuzz_8distance_15_initialize_cpp___pyx_unpickle_Editop__set_state(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *, PyObject *); /*proto*/
static PyObject *__pyx_f_9rapidfuzz_8distance_15_initialize_cpp___pyx_unpickle_Opcode__set_state(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *, PyObject *); /*proto*/
static PyObject *__pyx_f_9rapidfuzz_8distance_15_initialize_cpp___pyx_unpickle_ScoreAlignment__set_state(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *, PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "rapidfuzz.distance._initialize_cpp"
extern int __pyx_module_is_main_rapidfuzz__distance___initialize_cpp;
int __pyx_module_is_main_rapidfuzz__distance___initialize_cpp = 0;

/* Implementation of "rapidfuzz.distance._initialize_cpp" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_MemoryError;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = " - ";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_x[] = "x";
static const char __pyx_k__2[] = ", ";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k__12[] = ")";
static const char __pyx_k__50[] = ".";
static const char __pyx_k__66[] = "?";
static const char __pyx_k_b_2[] = ", b=";
static const char __pyx_k_cls[] = "cls";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_tag[] = "tag";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_apply[] = "apply";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_equal[] = "equal";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_score[] = "score";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_Editop[] = "Editop";
static const char __pyx_k_Opcode[] = "Opcode";
static const char __pyx_k_delete[] = "delete";
static const char __pyx_k_dict_2[] = "_dict";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_insert[] = "insert";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_size_2[] = ", size=";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_Editops[] = "Editops([";
static const char __pyx_k_Opcodes[] = "Opcodes([";
static const char __pyx_k_as_list[] = "as_list";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_editops[] = "editops";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_indices[] = "indices";
static const char __pyx_k_inverse[] = "inverse";
static const char __pyx_k_opcodes[] = "opcodes";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_src_end[] = "src_end";
static const char __pyx_k_src_len[] = "src_len";
static const char __pyx_k_src_pos[] = "src_pos";
static const char __pyx_k_dest_end[] = "dest_end";
static const char __pyx_k_dest_len[] = "dest_len";
static const char __pyx_k_dest_pos[] = "dest_pos";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_typecode[] = "typecode";
static const char __pyx_k_Editops_2[] = "Editops";
static const char __pyx_k_Opcodes_2[] = "Opcodes";
static const char __pyx_k_RF_Scorer[] = "_RF_Scorer";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_pandas_NA[] = "pandas_NA";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_src_end_2[] = ", src_end=";
static const char __pyx_k_src_len_2[] = "], src_len=";
static const char __pyx_k_src_pos_2[] = "', src_pos=";
static const char __pyx_k_src_start[] = "src_start";
static const char __pyx_k_Editop_tag[] = "Editop(tag='";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_Opcode_tag[] = "Opcode(tag='";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_as_editops[] = "as_editops";
static const char __pyx_k_as_opcodes[] = "as_opcodes";
static const char __pyx_k_dest_end_2[] = ", dest_end=";
static const char __pyx_k_dest_len_2[] = ", dest_len=";
static const char __pyx_k_dest_pos_2[] = ", dest_pos=";
static const char __pyx_k_dest_start[] = "dest_start";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_RF_ScorerPy[] = "_RF_ScorerPy";
static const char __pyx_k_src_start_2[] = "', src_start=";
static const char __pyx_k_src_start_3[] = ", src_start=";
static const char __pyx_k_subsequence[] = "subsequence";
static const char __pyx_k_Editops_copy[] = "Editops.copy";
static const char __pyx_k_Opcodes_copy[] = "Opcodes.copy";
static const char __pyx_k_dest_start_2[] = ", dest_start=";
static const char __pyx_k_from_editops[] = "from_editops";
static const char __pyx_k_from_opcodes[] = "from_opcodes";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_use_setstate[] = "use_setstate";
static const char __pyx_k_Editop___iter[] = "Editop.__iter__";
static const char __pyx_k_Editops_apply[] = "Editops.apply";
static const char __pyx_k_MatchingBlock[] = "MatchingBlock";
static const char __pyx_k_Opcode___iter[] = "Opcode.__iter__";
static const char __pyx_k_Opcodes_apply[] = "Opcodes.apply";
static const char __pyx_k_RF_Preprocess[] = "_RF_Preprocess";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_source_string[] = "source_string";
static const char __pyx_k_Editops___iter[] = "Editops.__iter__";
static const char __pyx_k_Expected_index[] = "Expected index";
static const char __pyx_k_Opcodes___iter[] = "Opcodes.__iter__";
static const char __pyx_k_ScoreAlignment[] = "ScoreAlignment";
static const char __pyx_k_Editops_as_list[] = "Editops.as_list";
static const char __pyx_k_Editops_inverse[] = "Editops.inverse";
static const char __pyx_k_MatchingBlock_a[] = "MatchingBlock(a=";
static const char __pyx_k_Opcodes_as_list[] = "Opcodes.as_list";
static const char __pyx_k_Opcodes_inverse[] = "Opcodes.inverse";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_Invalid_Edit_Type[] = "Invalid Edit Type";
static const char __pyx_k_RF_OriginalScorer[] = "_RF_OriginalScorer";
static const char __pyx_k_Editops_as_opcodes[] = "Editops.as_opcodes";
static const char __pyx_k_Opcodes_as_editops[] = "Opcodes.as_editops";
static const char __pyx_k_as_matching_blocks[] = "as_matching_blocks";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_destination_string[] = "destination_string";
static const char __pyx_k_remove_subsequence[] = "remove_subsequence";
static const char __pyx_k_pyx_unpickle_Editop[] = "__pyx_unpickle_Editop";
static const char __pyx_k_pyx_unpickle_Opcode[] = "__pyx_unpickle_Opcode";
static const char __pyx_k_Editops_from_opcodes[] = "Editops.from_opcodes";
static const char __pyx_k_MatchingBlock___iter[] = "MatchingBlock.__iter__";
static const char __pyx_k_Opcodes_from_editops[] = "Opcodes.from_editops";
static const char __pyx_k_ScoreAlignment_score[] = "ScoreAlignment(score=";
static const char __pyx_k_ScoreAlignment___iter[] = "ScoreAlignment.__iter__";
static const char __pyx_k_repr___locals_genexpr[] = "__repr__.<locals>.genexpr";
static const char __pyx_k_Editop___reduce_cython[] = "Editop.__reduce_cython__";
static const char __pyx_k_Opcode___reduce_cython[] = "Opcode.__reduce_cython__";
static const char __pyx_k_Editops___reduce_cython[] = "Editops.__reduce_cython__";
static const char __pyx_k_Expected_index_or_slice[] = "Expected index or slice";
static const char __pyx_k_Opcodes___reduce_cython[] = "Opcodes.__reduce_cython__";
static const char __pyx_k_Editop___setstate_cython[] = "Editop.__setstate_cython__";
static const char __pyx_k_Editops_inverse_line_432[] = "Editops.inverse (line 432)";
static const char __pyx_k_Opcode___setstate_cython[] = "Opcode.__setstate_cython__";
static const char __pyx_k_Opcodes_inverse_line_733[] = "Opcodes.inverse (line 733)";
static const char __pyx_k_Duplicated_edit_operation[] = "Duplicated edit operation";
static const char __pyx_k_Editop_index_out_of_range[] = "Editop index out of range";
static const char __pyx_k_Editops___setstate_cython[] = "Editops.__setstate_cython__";
static const char __pyx_k_Opcode_index_out_of_range[] = "Opcode index out of range";
static const char __pyx_k_Opcodes___setstate_cython[] = "Opcodes.__setstate_cython__";
static const char __pyx_k_Editops_as_matching_blocks[] = "Editops.as_matching_blocks";
static const char __pyx_k_Editops_index_out_of_range[] = "Editops index out of range";
static const char __pyx_k_Editops_remove_subsequence[] = "Editops.remove_subsequence";
static const char __pyx_k_Opcodes_as_matching_blocks[] = "Opcodes.as_matching_blocks";
static const char __pyx_k_Opcodes_index_out_of_range[] = "Opcodes index out of range";
static const char __pyx_k_pyx_unpickle_ScoreAlignment[] = "__pyx_unpickle_ScoreAlignment";
static const char __pyx_k_MatchingBlock___reduce_cython[] = "MatchingBlock.__reduce_cython__";
static const char __pyx_k_Invert_Editops_so_it_describes[] = "\n        Invert Editops, so it describes how to transform the destination string to\n        the source string.\n\n        Returns\n        -------\n        editops : Editops\n            inverted Editops\n\n        Examples\n        --------\n        >>> from rapidfuzz.distance import Levenshtein\n        >>> Levenshtein.editops('spam', 'park')\n        [Editop(tag=delete, src_pos=0, dest_pos=0),\n         Editop(tag=replace, src_pos=3, dest_pos=2),\n         Editop(tag=insert, src_pos=4, dest_pos=3)]\n\n        >>> Levenshtein.editops('spam', 'park').inverse()\n        [Editop(tag=insert, src_pos=0, dest_pos=0),\n         Editop(tag=replace, src_pos=2, dest_pos=3),\n         Editop(tag=delete, src_pos=3, dest_pos=4)]\n        ";
static const char __pyx_k_Invert_Opcodes_so_it_describes[] = "\n        Invert Opcodes, so it describes how to transform the destination string to\n        the source string.\n\n        Returns\n        -------\n        opcodes : Opcodes\n            inverted Opcodes\n\n        Examples\n        --------\n        >>> from rapidfuzz.distance import Levenshtein\n        >>> Levenshtein.opcodes('spam', 'park')\n        [Opcode(tag=delete, src_start=0, src_end=1, dest_start=0, dest_end=0),\n         Opcode(tag=equal, src_start=1, src_end=3, dest_start=0, dest_end=2),\n         Opcode(tag=replace, src_start=3, src_end=4, dest_start=2, dest_end=3),\n         Opcode(tag=insert, src_start=4, src_end=4, dest_start=3, dest_end=4)]\n\n        >>> Levenshtein.opcodes('spam', 'park').inverse()\n        [Opcode(tag=insert, src_start=0, src_end=0, dest_start=0, dest_end=1),\n         Opcode(tag=equal, src_start=0, src_end=2, dest_start=1, dest_end=3),\n         Opcode(tag=replace, src_start=2, src_end=3, dest_start=3, dest_end=4),\n         Opcode(tag=delete, src_start=3, src_end=4, dest_start=4, dest_end=4)]\n        ";
static const char __pyx_k_ScoreAlignment___reduce_cython[] = "ScoreAlignment.__reduce_cython__";
static const char __pyx_k_List_of_edit_operations_invalid[] = "List of edit operations invalid";
static const char __pyx_k_MatchingBlock___setstate_cython[] = "MatchingBlock.__setstate_cython__";
static const char __pyx_k_Expected_list_of_3_tuples_or_a_l[] = "Expected list of 3-tuples, or a list of 5-tuples";
static const char __pyx_k_Got_unexpected_keyword_arguments[] = "Got unexpected keyword arguments: ";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0xd03a775, 0x914e71a, 0x451a363) = (dest_pos, src_pos, tag))";
static const char __pyx_k_List_of_edit_operations_does_not[] = "List of edit operations does not start at position 0";
static const char __pyx_k_List_of_edit_operations_is_not_c[] = "List of edit operations is not continuous";
static const char __pyx_k_List_of_edit_operations_out_of_o[] = "List of edit operations out of order";
static const char __pyx_k_MatchingBlock_index_out_of_range[] = "MatchingBlock index out of range";
static const char __pyx_k_ScoreAlignment___setstate_cython[] = "ScoreAlignment.__setstate_cython__";
static const char __pyx_k_expected_strings_or_bytes_object[] = "expected strings or bytes object";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_rapidfuzz_distance__initialize_c[] = "rapidfuzz.distance._initialize_cpp";
static const char __pyx_k_score_cutoff_has_to_be_in_the_ra[] = "score_cutoff has to be in the range of ";
static const char __pyx_k_self_editops_cannot_be_converted[] = "self.editops cannot be converted to a Python object for pickling";
static const char __pyx_k_self_opcodes_cannot_be_converted[] = "self.opcodes cannot be converted to a Python object for pickling";
static const char __pyx_k_src_rapidfuzz_distance__initiali[] = "src/rapidfuzz/distance/_initialize_cpp.pyx";
static const char __pyx_k_step_sizes_below_0_lead_to_an_in[] = "step sizes below 0 lead to an invalid order of editops";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_2[] = "Incompatible checksums (0x%x vs (0xac2429d, 0xb8a0477, 0xd0c648f) = (dest_end, dest_start, src_end, src_start, tag))";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_3[] = "Incompatible checksums (0x%x vs (0xa8367f7, 0x3e4c916, 0x95a381b) = (dest_end, dest_start, score, src_end, src_start))";
static const char __pyx_k_List_of_edit_operations_does_not_2[] = "List of edit operations does not end at the string ends";
/* #### Code section: decls ### */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock___cinit__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self, size_t __pyx_v_a, size_t __pyx_v_b, size_t __pyx_v_size); /* proto */
static Py_ssize_t __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_2__len__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_4__eq__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_6__getitem__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self, Py_ssize_t __pyx_v_i); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_8__iter__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_11__repr__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1a___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1a_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1b___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1b_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_4size___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_4size_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_13__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_15__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop___init__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self, PyObject *__pyx_v_tag, PyObject *__pyx_v_src_pos, PyObject *__pyx_v_dest_pos); /* proto */
static Py_ssize_t __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_2__len__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_4__eq__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_6__getitem__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self, Py_ssize_t __pyx_v_i); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_8__iter__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_11__repr__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag_4__del__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_7src_pos___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_7src_pos_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_8dest_pos___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_8dest_pos_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_13__reduce_cython__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_15__setstate_cython__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops___init__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, PyObject *__pyx_v_editops, PyObject *__pyx_v_src_len, PyObject *__pyx_v_dest_len); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_2from_opcodes(PyTypeObject *__pyx_v_cls, struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_opcodes); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_4as_opcodes(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_6as_matching_blocks(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8as_list(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_10copy(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_12inverse(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_14apply(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, PyObject *__pyx_v_source_string, PyObject *__pyx_v_destination_string); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_16remove_subsequence(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_subsequence); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7src_len___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7src_len_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8dest_len___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8dest_len_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_18__eq__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static Py_ssize_t __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_20__len__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_22__delitem__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_24__getitem__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_26__iter__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8__repr___genexpr(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_29__repr__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_31__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_33__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode___init__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, PyObject *__pyx_v_tag, PyObject *__pyx_v_src_start, PyObject *__pyx_v_src_end, PyObject *__pyx_v_dest_start, PyObject *__pyx_v_dest_end); /* proto */
static Py_ssize_t __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_2__len__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_4__eq__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_6__getitem__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, Py_ssize_t __pyx_v_i); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_8__iter__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_11__repr__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag_4__del__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_9src_start___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_9src_start_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_7src_end___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_7src_end_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_10dest_start___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_10dest_start_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_8dest_end___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_8dest_end_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_13__reduce_cython__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_15__setstate_cython__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes___init__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self, PyObject *__pyx_v_opcodes, PyObject *__pyx_v_src_len, PyObject *__pyx_v_dest_len); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_2from_editops(PyTypeObject *__pyx_v_cls, struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_editops); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_4as_editops(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_6as_matching_blocks(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8as_list(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_10copy(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_12inverse(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_14apply(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self, PyObject *__pyx_v_source_string, PyObject *__pyx_v_destination_string); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7src_len___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7src_len_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8dest_len___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8dest_len_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_16__eq__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static Py_ssize_t __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_18__len__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_20__getitem__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_22__iter__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8__repr___genexpr(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_25__repr__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_27__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_29__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment___init__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, PyObject *__pyx_v_score, PyObject *__pyx_v_src_start, PyObject *__pyx_v_src_end, PyObject *__pyx_v_dest_start, PyObject *__pyx_v_dest_end); /* proto */
static Py_ssize_t __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_2__len__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_4__eq__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_6__getitem__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, Py_ssize_t __pyx_v_i); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_8__iter__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_11__repr__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score_4__del__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_9src_start___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_9src_start_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_7src_end___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_7src_end_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_10dest_start___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_10dest_start_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_8dest_end___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self); /* proto */
static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_8dest_end_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_13__reduce_cython__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_15__setstate_cython__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp___pyx_unpickle_Editop(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_2__pyx_unpickle_Opcode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_4__pyx_unpickle_ScoreAlignment(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Editops(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Opcodes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Editop(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Opcode(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, 0, 0, 0, 0};
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editops;
  PyObject *__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcodes;
  PyObject *__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment;
  PyObject *__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock;
  PyObject *__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editop;
  PyObject *__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcode;
  PyObject *__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__;
  PyObject *__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__;
  PyObject *__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__;
  PyObject *__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr;
  PyObject *__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__;
  PyObject *__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__;
  PyObject *__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr;
  PyObject *__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__;
  #endif
  PyTypeObject *__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops;
  PyTypeObject *__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes;
  PyTypeObject *__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment;
  PyTypeObject *__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock;
  PyTypeObject *__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop;
  PyTypeObject *__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode;
  PyTypeObject *__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__;
  PyTypeObject *__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__;
  PyTypeObject *__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__;
  PyTypeObject *__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr;
  PyTypeObject *__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__;
  PyTypeObject *__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__;
  PyTypeObject *__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr;
  PyTypeObject *__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__;
  PyObject *__pyx_kp_u_;
  PyObject *__pyx_kp_u_Duplicated_edit_operation;
  PyObject *__pyx_n_s_Editop;
  PyObject *__pyx_n_s_Editop___iter;
  PyObject *__pyx_n_s_Editop___reduce_cython;
  PyObject *__pyx_n_s_Editop___setstate_cython;
  PyObject *__pyx_kp_u_Editop_index_out_of_range;
  PyObject *__pyx_kp_u_Editop_tag;
  PyObject *__pyx_kp_u_Editops;
  PyObject *__pyx_n_s_Editops_2;
  PyObject *__pyx_n_s_Editops___iter;
  PyObject *__pyx_n_s_Editops___reduce_cython;
  PyObject *__pyx_n_s_Editops___setstate_cython;
  PyObject *__pyx_n_s_Editops_apply;
  PyObject *__pyx_n_s_Editops_as_list;
  PyObject *__pyx_n_s_Editops_as_matching_blocks;
  PyObject *__pyx_n_s_Editops_as_opcodes;
  PyObject *__pyx_n_s_Editops_copy;
  PyObject *__pyx_n_s_Editops_from_opcodes;
  PyObject *__pyx_kp_u_Editops_index_out_of_range;
  PyObject *__pyx_n_s_Editops_inverse;
  PyObject *__pyx_kp_u_Editops_inverse_line_432;
  PyObject *__pyx_n_s_Editops_remove_subsequence;
  PyObject *__pyx_kp_u_Expected_index;
  PyObject *__pyx_kp_u_Expected_index_or_slice;
  PyObject *__pyx_kp_u_Expected_list_of_3_tuples_or_a_l;
  PyObject *__pyx_kp_u_Got_unexpected_keyword_arguments;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3;
  PyObject *__pyx_n_s_IndexError;
  PyObject *__pyx_kp_u_Invalid_Edit_Type;
  PyObject *__pyx_kp_u_Invert_Editops_so_it_describes;
  PyObject *__pyx_kp_u_Invert_Opcodes_so_it_describes;
  PyObject *__pyx_kp_u_List_of_edit_operations_does_not;
  PyObject *__pyx_kp_u_List_of_edit_operations_does_not_2;
  PyObject *__pyx_kp_u_List_of_edit_operations_invalid;
  PyObject *__pyx_kp_u_List_of_edit_operations_is_not_c;
  PyObject *__pyx_kp_u_List_of_edit_operations_out_of_o;
  PyObject *__pyx_n_s_MatchingBlock;
  PyObject *__pyx_n_s_MatchingBlock___iter;
  PyObject *__pyx_n_s_MatchingBlock___reduce_cython;
  PyObject *__pyx_n_s_MatchingBlock___setstate_cython;
  PyObject *__pyx_kp_u_MatchingBlock_a;
  PyObject *__pyx_kp_u_MatchingBlock_index_out_of_range;
  PyObject *__pyx_n_s_MemoryError;
  PyObject *__pyx_kp_u_None;
  PyObject *__pyx_n_s_Opcode;
  PyObject *__pyx_n_s_Opcode___iter;
  PyObject *__pyx_n_s_Opcode___reduce_cython;
  PyObject *__pyx_n_s_Opcode___setstate_cython;
  PyObject *__pyx_kp_u_Opcode_index_out_of_range;
  PyObject *__pyx_kp_u_Opcode_tag;
  PyObject *__pyx_kp_u_Opcodes;
  PyObject *__pyx_n_s_Opcodes_2;
  PyObject *__pyx_n_s_Opcodes___iter;
  PyObject *__pyx_n_s_Opcodes___reduce_cython;
  PyObject *__pyx_n_s_Opcodes___setstate_cython;
  PyObject *__pyx_n_s_Opcodes_apply;
  PyObject *__pyx_n_s_Opcodes_as_editops;
  PyObject *__pyx_n_s_Opcodes_as_list;
  PyObject *__pyx_n_s_Opcodes_as_matching_blocks;
  PyObject *__pyx_n_s_Opcodes_copy;
  PyObject *__pyx_n_s_Opcodes_from_editops;
  PyObject *__pyx_kp_u_Opcodes_index_out_of_range;
  PyObject *__pyx_n_s_Opcodes_inverse;
  PyObject *__pyx_kp_u_Opcodes_inverse_line_733;
  PyObject *__pyx_n_s_PickleError;
  PyObject *__pyx_n_s_RF_OriginalScorer;
  PyObject *__pyx_n_s_RF_Preprocess;
  PyObject *__pyx_n_u_RF_Preprocess;
  PyObject *__pyx_n_s_RF_Scorer;
  PyObject *__pyx_n_s_RF_ScorerPy;
  PyObject *__pyx_n_s_ScoreAlignment;
  PyObject *__pyx_n_s_ScoreAlignment___iter;
  PyObject *__pyx_n_s_ScoreAlignment___reduce_cython;
  PyObject *__pyx_n_s_ScoreAlignment___setstate_cython;
  PyObject *__pyx_kp_u_ScoreAlignment_score;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_kp_u__12;
  PyObject *__pyx_kp_u__2;
  PyObject *__pyx_kp_u__50;
  PyObject *__pyx_n_s__66;
  PyObject *__pyx_n_s_a;
  PyObject *__pyx_n_s_apply;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_n_s_array;
  PyObject *__pyx_n_s_as_editops;
  PyObject *__pyx_n_s_as_list;
  PyObject *__pyx_n_s_as_matching_blocks;
  PyObject *__pyx_n_s_as_opcodes;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_b;
  PyObject *__pyx_kp_u_b_2;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_close;
  PyObject *__pyx_n_s_cls;
  PyObject *__pyx_n_s_copy;
  PyObject *__pyx_n_u_delete;
  PyObject *__pyx_n_s_dest_end;
  PyObject *__pyx_kp_u_dest_end_2;
  PyObject *__pyx_n_s_dest_len;
  PyObject *__pyx_kp_u_dest_len_2;
  PyObject *__pyx_n_s_dest_pos;
  PyObject *__pyx_kp_u_dest_pos_2;
  PyObject *__pyx_n_s_dest_start;
  PyObject *__pyx_kp_u_dest_start_2;
  PyObject *__pyx_n_s_destination_string;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_dict_2;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_doc;
  PyObject *__pyx_n_s_editops;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_u_equal;
  PyObject *__pyx_kp_u_expected_strings_or_bytes_object;
  PyObject *__pyx_n_s_from_editops;
  PyObject *__pyx_n_s_from_opcodes;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_genexpr;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_indices;
  PyObject *__pyx_n_u_insert;
  PyObject *__pyx_n_s_inverse;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_iter;
  PyObject *__pyx_n_s_keys;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_new;
  PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
  PyObject *__pyx_n_s_opcodes;
  PyObject *__pyx_n_s_pandas_NA;
  PyObject *__pyx_n_s_pickle;
  PyObject *__pyx_n_s_pyx_PickleError;
  PyObject *__pyx_n_s_pyx_checksum;
  PyObject *__pyx_n_s_pyx_result;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_type;
  PyObject *__pyx_n_s_pyx_unpickle_Editop;
  PyObject *__pyx_n_s_pyx_unpickle_Opcode;
  PyObject *__pyx_n_s_pyx_unpickle_ScoreAlignment;
  PyObject *__pyx_n_s_qualname;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_rapidfuzz_distance__initialize_c;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_remove_subsequence;
  PyObject *__pyx_n_u_replace;
  PyObject *__pyx_n_s_repr___locals_genexpr;
  PyObject *__pyx_n_s_score;
  PyObject *__pyx_kp_u_score_cutoff_has_to_be_in_the_ra;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self_editops_cannot_be_converted;
  PyObject *__pyx_kp_s_self_opcodes_cannot_be_converted;
  PyObject *__pyx_n_s_send;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_size;
  PyObject *__pyx_kp_u_size_2;
  PyObject *__pyx_n_s_source_string;
  PyObject *__pyx_n_s_src_end;
  PyObject *__pyx_kp_u_src_end_2;
  PyObject *__pyx_n_s_src_len;
  PyObject *__pyx_kp_u_src_len_2;
  PyObject *__pyx_n_s_src_pos;
  PyObject *__pyx_kp_u_src_pos_2;
  PyObject *__pyx_kp_s_src_rapidfuzz_distance__initiali;
  PyObject *__pyx_n_s_src_start;
  PyObject *__pyx_kp_u_src_start_2;
  PyObject *__pyx_kp_u_src_start_3;
  PyObject *__pyx_n_s_state;
  PyObject *__pyx_kp_u_step_sizes_below_0_lead_to_an_in;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_subsequence;
  PyObject *__pyx_n_s_tag;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_throw;
  PyObject *__pyx_n_s_typecode;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_s_use_setstate;
  PyObject *__pyx_n_s_x;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_65325334;
  PyObject *__pyx_int_72459107;
  PyObject *__pyx_int_152364826;
  PyObject *__pyx_int_156907547;
  PyObject *__pyx_int_176383991;
  PyObject *__pyx_int_180503197;
  PyObject *__pyx_int_193594487;
  PyObject *__pyx_int_218343285;
  PyObject *__pyx_int_218915983;
  PyObject *__pyx_int_neg_1;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__4;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__27;
  PyObject *__pyx_tuple__28;
  PyObject *__pyx_tuple__29;
  PyObject *__pyx_tuple__32;
  PyObject *__pyx_tuple__42;
  PyObject *__pyx_tuple__43;
  PyObject *__pyx_tuple__49;
  PyObject *__pyx_tuple__52;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__55;
  PyObject *__pyx_tuple__56;
  PyObject *__pyx_tuple__57;
  PyObject *__pyx_tuple__58;
  PyObject *__pyx_tuple__59;
  PyObject *__pyx_tuple__60;
  PyObject *__pyx_tuple__61;
  PyObject *__pyx_tuple__62;
  PyObject *__pyx_tuple__63;
  PyObject *__pyx_tuple__64;
  PyObject *__pyx_tuple__65;
  PyObject *__pyx_codeobj__13;
  PyObject *__pyx_codeobj__14;
  PyObject *__pyx_codeobj__16;
  PyObject *__pyx_codeobj__17;
  PyObject *__pyx_codeobj__18;
  PyObject *__pyx_codeobj__19;
  PyObject *__pyx_codeobj__20;
  PyObject *__pyx_codeobj__21;
  PyObject *__pyx_codeobj__22;
  PyObject *__pyx_codeobj__23;
  PyObject *__pyx_codeobj__24;
  PyObject *__pyx_codeobj__26;
  PyObject *__pyx_codeobj__30;
  PyObject *__pyx_codeobj__31;
  PyObject *__pyx_codeobj__33;
  PyObject *__pyx_codeobj__34;
  PyObject *__pyx_codeobj__35;
  PyObject *__pyx_codeobj__36;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__38;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__40;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__44;
  PyObject *__pyx_codeobj__45;
  PyObject *__pyx_codeobj__46;
  PyObject *__pyx_codeobj__47;
  PyObject *__pyx_codeobj__48;
  PyObject *__pyx_codeobj__51;
  PyObject *__pyx_codeobj__53;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops);
  Py_CLEAR(clear_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editops);
  Py_CLEAR(clear_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes);
  Py_CLEAR(clear_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcodes);
  Py_CLEAR(clear_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment);
  Py_CLEAR(clear_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment);
  Py_CLEAR(clear_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock);
  Py_CLEAR(clear_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock);
  Py_CLEAR(clear_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop);
  Py_CLEAR(clear_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editop);
  Py_CLEAR(clear_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode);
  Py_CLEAR(clear_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcode);
  Py_CLEAR(clear_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__);
  Py_CLEAR(clear_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__);
  Py_CLEAR(clear_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__);
  Py_CLEAR(clear_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__);
  Py_CLEAR(clear_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__);
  Py_CLEAR(clear_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__);
  Py_CLEAR(clear_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__);
  Py_CLEAR(clear_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__);
  Py_CLEAR(clear_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__);
  Py_CLEAR(clear_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__);
  Py_CLEAR(clear_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__);
  Py_CLEAR(clear_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__);
  Py_CLEAR(clear_module_state->__pyx_kp_u_);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Duplicated_edit_operation);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editop);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editop___iter);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editop___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editop___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Editop_index_out_of_range);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Editop_tag);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Editops);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editops_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editops___iter);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editops___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editops___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editops_apply);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editops_as_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editops_as_matching_blocks);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editops_as_opcodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editops_copy);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editops_from_opcodes);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Editops_index_out_of_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editops_inverse);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Editops_inverse_line_432);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editops_remove_subsequence);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Expected_index);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Expected_index_or_slice);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Expected_list_of_3_tuples_or_a_l);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Got_unexpected_keyword_arguments);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_IndexError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invalid_Edit_Type);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invert_Editops_so_it_describes);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invert_Opcodes_so_it_describes);
  Py_CLEAR(clear_module_state->__pyx_kp_u_List_of_edit_operations_does_not);
  Py_CLEAR(clear_module_state->__pyx_kp_u_List_of_edit_operations_does_not_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_List_of_edit_operations_invalid);
  Py_CLEAR(clear_module_state->__pyx_kp_u_List_of_edit_operations_is_not_c);
  Py_CLEAR(clear_module_state->__pyx_kp_u_List_of_edit_operations_out_of_o);
  Py_CLEAR(clear_module_state->__pyx_n_s_MatchingBlock);
  Py_CLEAR(clear_module_state->__pyx_n_s_MatchingBlock___iter);
  Py_CLEAR(clear_module_state->__pyx_n_s_MatchingBlock___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_MatchingBlock___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_u_MatchingBlock_a);
  Py_CLEAR(clear_module_state->__pyx_kp_u_MatchingBlock_index_out_of_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_MemoryError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_None);
  Py_CLEAR(clear_module_state->__pyx_n_s_Opcode);
  Py_CLEAR(clear_module_state->__pyx_n_s_Opcode___iter);
  Py_CLEAR(clear_module_state->__pyx_n_s_Opcode___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Opcode___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Opcode_index_out_of_range);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Opcode_tag);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Opcodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_Opcodes_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_Opcodes___iter);
  Py_CLEAR(clear_module_state->__pyx_n_s_Opcodes___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Opcodes___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Opcodes_apply);
  Py_CLEAR(clear_module_state->__pyx_n_s_Opcodes_as_editops);
  Py_CLEAR(clear_module_state->__pyx_n_s_Opcodes_as_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_Opcodes_as_matching_blocks);
  Py_CLEAR(clear_module_state->__pyx_n_s_Opcodes_copy);
  Py_CLEAR(clear_module_state->__pyx_n_s_Opcodes_from_editops);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Opcodes_index_out_of_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_Opcodes_inverse);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Opcodes_inverse_line_733);
  Py_CLEAR(clear_module_state->__pyx_n_s_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_RF_OriginalScorer);
  Py_CLEAR(clear_module_state->__pyx_n_s_RF_Preprocess);
  Py_CLEAR(clear_module_state->__pyx_n_u_RF_Preprocess);
  Py_CLEAR(clear_module_state->__pyx_n_s_RF_Scorer);
  Py_CLEAR(clear_module_state->__pyx_n_s_RF_ScorerPy);
  Py_CLEAR(clear_module_state->__pyx_n_s_ScoreAlignment);
  Py_CLEAR(clear_module_state->__pyx_n_s_ScoreAlignment___iter);
  Py_CLEAR(clear_module_state->__pyx_n_s_ScoreAlignment___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_ScoreAlignment___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ScoreAlignment_score);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_kp_u__12);
  Py_CLEAR(clear_module_state->__pyx_kp_u__2);
  Py_CLEAR(clear_module_state->__pyx_kp_u__50);
  Py_CLEAR(clear_module_state->__pyx_n_s__66);
  Py_CLEAR(clear_module_state->__pyx_n_s_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_apply);
  Py_CLEAR(clear_module_state->__pyx_n_s_args);
  Py_CLEAR(clear_module_state->__pyx_n_s_array);
  Py_CLEAR(clear_module_state->__pyx_n_s_as_editops);
  Py_CLEAR(clear_module_state->__pyx_n_s_as_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_as_matching_blocks);
  Py_CLEAR(clear_module_state->__pyx_n_s_as_opcodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_b);
  Py_CLEAR(clear_module_state->__pyx_kp_u_b_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_cls);
  Py_CLEAR(clear_module_state->__pyx_n_s_copy);
  Py_CLEAR(clear_module_state->__pyx_n_u_delete);
  Py_CLEAR(clear_module_state->__pyx_n_s_dest_end);
  Py_CLEAR(clear_module_state->__pyx_kp_u_dest_end_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_dest_len);
  Py_CLEAR(clear_module_state->__pyx_kp_u_dest_len_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_dest_pos);
  Py_CLEAR(clear_module_state->__pyx_kp_u_dest_pos_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_dest_start);
  Py_CLEAR(clear_module_state->__pyx_kp_u_dest_start_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_destination_string);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_doc);
  Py_CLEAR(clear_module_state->__pyx_n_s_editops);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_u_equal);
  Py_CLEAR(clear_module_state->__pyx_kp_u_expected_strings_or_bytes_object);
  Py_CLEAR(clear_module_state->__pyx_n_s_from_editops);
  Py_CLEAR(clear_module_state->__pyx_n_s_from_opcodes);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_indices);
  Py_CLEAR(clear_module_state->__pyx_n_u_insert);
  Py_CLEAR(clear_module_state->__pyx_n_s_inverse);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_iter);
  Py_CLEAR(clear_module_state->__pyx_n_s_keys);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_new);
  Py_CLEAR(clear_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_CLEAR(clear_module_state->__pyx_n_s_opcodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_pandas_NA);
  Py_CLEAR(clear_module_state->__pyx_n_s_pickle);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_checksum);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_Editop);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_Opcode);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_ScoreAlignment);
  Py_CLEAR(clear_module_state->__pyx_n_s_qualname);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_rapidfuzz_distance__initialize_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_remove_subsequence);
  Py_CLEAR(clear_module_state->__pyx_n_u_replace);
  Py_CLEAR(clear_module_state->__pyx_n_s_repr___locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_score);
  Py_CLEAR(clear_module_state->__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self_editops_cannot_be_converted);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self_opcodes_cannot_be_converted);
  Py_CLEAR(clear_module_state->__pyx_n_s_send);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_size);
  Py_CLEAR(clear_module_state->__pyx_kp_u_size_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_source_string);
  Py_CLEAR(clear_module_state->__pyx_n_s_src_end);
  Py_CLEAR(clear_module_state->__pyx_kp_u_src_end_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_src_len);
  Py_CLEAR(clear_module_state->__pyx_kp_u_src_len_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_src_pos);
  Py_CLEAR(clear_module_state->__pyx_kp_u_src_pos_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_src_rapidfuzz_distance__initiali);
  Py_CLEAR(clear_module_state->__pyx_n_s_src_start);
  Py_CLEAR(clear_module_state->__pyx_kp_u_src_start_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_src_start_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_state);
  Py_CLEAR(clear_module_state->__pyx_kp_u_step_sizes_below_0_lead_to_an_in);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_subsequence);
  Py_CLEAR(clear_module_state->__pyx_n_s_tag);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_throw);
  Py_CLEAR(clear_module_state->__pyx_n_s_typecode);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_x);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_65325334);
  Py_CLEAR(clear_module_state->__pyx_int_72459107);
  Py_CLEAR(clear_module_state->__pyx_int_152364826);
  Py_CLEAR(clear_module_state->__pyx_int_156907547);
  Py_CLEAR(clear_module_state->__pyx_int_176383991);
  Py_CLEAR(clear_module_state->__pyx_int_180503197);
  Py_CLEAR(clear_module_state->__pyx_int_193594487);
  Py_CLEAR(clear_module_state->__pyx_int_218343285);
  Py_CLEAR(clear_module_state->__pyx_int_218915983);
  Py_CLEAR(clear_module_state->__pyx_int_neg_1);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__27);
  Py_CLEAR(clear_module_state->__pyx_tuple__28);
  Py_CLEAR(clear_module_state->__pyx_tuple__29);
  Py_CLEAR(clear_module_state->__pyx_tuple__32);
  Py_CLEAR(clear_module_state->__pyx_tuple__42);
  Py_CLEAR(clear_module_state->__pyx_tuple__43);
  Py_CLEAR(clear_module_state->__pyx_tuple__49);
  Py_CLEAR(clear_module_state->__pyx_tuple__52);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__55);
  Py_CLEAR(clear_module_state->__pyx_tuple__56);
  Py_CLEAR(clear_module_state->__pyx_tuple__57);
  Py_CLEAR(clear_module_state->__pyx_tuple__58);
  Py_CLEAR(clear_module_state->__pyx_tuple__59);
  Py_CLEAR(clear_module_state->__pyx_tuple__60);
  Py_CLEAR(clear_module_state->__pyx_tuple__61);
  Py_CLEAR(clear_module_state->__pyx_tuple__62);
  Py_CLEAR(clear_module_state->__pyx_tuple__63);
  Py_CLEAR(clear_module_state->__pyx_tuple__64);
  Py_CLEAR(clear_module_state->__pyx_tuple__65);
  Py_CLEAR(clear_module_state->__pyx_codeobj__13);
  Py_CLEAR(clear_module_state->__pyx_codeobj__14);
  Py_CLEAR(clear_module_state->__pyx_codeobj__16);
  Py_CLEAR(clear_module_state->__pyx_codeobj__17);
  Py_CLEAR(clear_module_state->__pyx_codeobj__18);
  Py_CLEAR(clear_module_state->__pyx_codeobj__19);
  Py_CLEAR(clear_module_state->__pyx_codeobj__20);
  Py_CLEAR(clear_module_state->__pyx_codeobj__21);
  Py_CLEAR(clear_module_state->__pyx_codeobj__22);
  Py_CLEAR(clear_module_state->__pyx_codeobj__23);
  Py_CLEAR(clear_module_state->__pyx_codeobj__24);
  Py_CLEAR(clear_module_state->__pyx_codeobj__26);
  Py_CLEAR(clear_module_state->__pyx_codeobj__30);
  Py_CLEAR(clear_module_state->__pyx_codeobj__31);
  Py_CLEAR(clear_module_state->__pyx_codeobj__33);
  Py_CLEAR(clear_module_state->__pyx_codeobj__34);
  Py_CLEAR(clear_module_state->__pyx_codeobj__35);
  Py_CLEAR(clear_module_state->__pyx_codeobj__36);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__38);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__40);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__45);
  Py_CLEAR(clear_module_state->__pyx_codeobj__46);
  Py_CLEAR(clear_module_state->__pyx_codeobj__47);
  Py_CLEAR(clear_module_state->__pyx_codeobj__48);
  Py_CLEAR(clear_module_state->__pyx_codeobj__51);
  Py_CLEAR(clear_module_state->__pyx_codeobj__53);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops);
  Py_VISIT(traverse_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editops);
  Py_VISIT(traverse_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes);
  Py_VISIT(traverse_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcodes);
  Py_VISIT(traverse_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment);
  Py_VISIT(traverse_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment);
  Py_VISIT(traverse_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock);
  Py_VISIT(traverse_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock);
  Py_VISIT(traverse_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop);
  Py_VISIT(traverse_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editop);
  Py_VISIT(traverse_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode);
  Py_VISIT(traverse_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcode);
  Py_VISIT(traverse_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__);
  Py_VISIT(traverse_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__);
  Py_VISIT(traverse_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__);
  Py_VISIT(traverse_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__);
  Py_VISIT(traverse_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__);
  Py_VISIT(traverse_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__);
  Py_VISIT(traverse_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__);
  Py_VISIT(traverse_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__);
  Py_VISIT(traverse_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__);
  Py_VISIT(traverse_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__);
  Py_VISIT(traverse_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__);
  Py_VISIT(traverse_module_state->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__);
  Py_VISIT(traverse_module_state->__pyx_kp_u_);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Duplicated_edit_operation);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editop);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editop___iter);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editop___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editop___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Editop_index_out_of_range);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Editop_tag);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Editops);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editops_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editops___iter);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editops___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editops___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editops_apply);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editops_as_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editops_as_matching_blocks);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editops_as_opcodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editops_copy);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editops_from_opcodes);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Editops_index_out_of_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editops_inverse);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Editops_inverse_line_432);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editops_remove_subsequence);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Expected_index);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Expected_index_or_slice);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Expected_list_of_3_tuples_or_a_l);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Got_unexpected_keyword_arguments);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_IndexError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invalid_Edit_Type);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invert_Editops_so_it_describes);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invert_Opcodes_so_it_describes);
  Py_VISIT(traverse_module_state->__pyx_kp_u_List_of_edit_operations_does_not);
  Py_VISIT(traverse_module_state->__pyx_kp_u_List_of_edit_operations_does_not_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_List_of_edit_operations_invalid);
  Py_VISIT(traverse_module_state->__pyx_kp_u_List_of_edit_operations_is_not_c);
  Py_VISIT(traverse_module_state->__pyx_kp_u_List_of_edit_operations_out_of_o);
  Py_VISIT(traverse_module_state->__pyx_n_s_MatchingBlock);
  Py_VISIT(traverse_module_state->__pyx_n_s_MatchingBlock___iter);
  Py_VISIT(traverse_module_state->__pyx_n_s_MatchingBlock___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_MatchingBlock___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_u_MatchingBlock_a);
  Py_VISIT(traverse_module_state->__pyx_kp_u_MatchingBlock_index_out_of_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_MemoryError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_None);
  Py_VISIT(traverse_module_state->__pyx_n_s_Opcode);
  Py_VISIT(traverse_module_state->__pyx_n_s_Opcode___iter);
  Py_VISIT(traverse_module_state->__pyx_n_s_Opcode___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Opcode___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Opcode_index_out_of_range);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Opcode_tag);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Opcodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_Opcodes_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_Opcodes___iter);
  Py_VISIT(traverse_module_state->__pyx_n_s_Opcodes___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Opcodes___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Opcodes_apply);
  Py_VISIT(traverse_module_state->__pyx_n_s_Opcodes_as_editops);
  Py_VISIT(traverse_module_state->__pyx_n_s_Opcodes_as_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_Opcodes_as_matching_blocks);
  Py_VISIT(traverse_module_state->__pyx_n_s_Opcodes_copy);
  Py_VISIT(traverse_module_state->__pyx_n_s_Opcodes_from_editops);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Opcodes_index_out_of_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_Opcodes_inverse);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Opcodes_inverse_line_733);
  Py_VISIT(traverse_module_state->__pyx_n_s_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_RF_OriginalScorer);
  Py_VISIT(traverse_module_state->__pyx_n_s_RF_Preprocess);
  Py_VISIT(traverse_module_state->__pyx_n_u_RF_Preprocess);
  Py_VISIT(traverse_module_state->__pyx_n_s_RF_Scorer);
  Py_VISIT(traverse_module_state->__pyx_n_s_RF_ScorerPy);
  Py_VISIT(traverse_module_state->__pyx_n_s_ScoreAlignment);
  Py_VISIT(traverse_module_state->__pyx_n_s_ScoreAlignment___iter);
  Py_VISIT(traverse_module_state->__pyx_n_s_ScoreAlignment___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_ScoreAlignment___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ScoreAlignment_score);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_kp_u__12);
  Py_VISIT(traverse_module_state->__pyx_kp_u__2);
  Py_VISIT(traverse_module_state->__pyx_kp_u__50);
  Py_VISIT(traverse_module_state->__pyx_n_s__66);
  Py_VISIT(traverse_module_state->__pyx_n_s_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_apply);
  Py_VISIT(traverse_module_state->__pyx_n_s_args);
  Py_VISIT(traverse_module_state->__pyx_n_s_array);
  Py_VISIT(traverse_module_state->__pyx_n_s_as_editops);
  Py_VISIT(traverse_module_state->__pyx_n_s_as_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_as_matching_blocks);
  Py_VISIT(traverse_module_state->__pyx_n_s_as_opcodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_b);
  Py_VISIT(traverse_module_state->__pyx_kp_u_b_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_cls);
  Py_VISIT(traverse_module_state->__pyx_n_s_copy);
  Py_VISIT(traverse_module_state->__pyx_n_u_delete);
  Py_VISIT(traverse_module_state->__pyx_n_s_dest_end);
  Py_VISIT(traverse_module_state->__pyx_kp_u_dest_end_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_dest_len);
  Py_VISIT(traverse_module_state->__pyx_kp_u_dest_len_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_dest_pos);
  Py_VISIT(traverse_module_state->__pyx_kp_u_dest_pos_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_dest_start);
  Py_VISIT(traverse_module_state->__pyx_kp_u_dest_start_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_destination_string);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_doc);
  Py_VISIT(traverse_module_state->__pyx_n_s_editops);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_u_equal);
  Py_VISIT(traverse_module_state->__pyx_kp_u_expected_strings_or_bytes_object);
  Py_VISIT(traverse_module_state->__pyx_n_s_from_editops);
  Py_VISIT(traverse_module_state->__pyx_n_s_from_opcodes);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_indices);
  Py_VISIT(traverse_module_state->__pyx_n_u_insert);
  Py_VISIT(traverse_module_state->__pyx_n_s_inverse);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_iter);
  Py_VISIT(traverse_module_state->__pyx_n_s_keys);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_new);
  Py_VISIT(traverse_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_VISIT(traverse_module_state->__pyx_n_s_opcodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_pandas_NA);
  Py_VISIT(traverse_module_state->__pyx_n_s_pickle);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_checksum);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_Editop);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_Opcode);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_ScoreAlignment);
  Py_VISIT(traverse_module_state->__pyx_n_s_qualname);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_rapidfuzz_distance__initialize_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_remove_subsequence);
  Py_VISIT(traverse_module_state->__pyx_n_u_replace);
  Py_VISIT(traverse_module_state->__pyx_n_s_repr___locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_score);
  Py_VISIT(traverse_module_state->__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self_editops_cannot_be_converted);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self_opcodes_cannot_be_converted);
  Py_VISIT(traverse_module_state->__pyx_n_s_send);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_size);
  Py_VISIT(traverse_module_state->__pyx_kp_u_size_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_source_string);
  Py_VISIT(traverse_module_state->__pyx_n_s_src_end);
  Py_VISIT(traverse_module_state->__pyx_kp_u_src_end_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_src_len);
  Py_VISIT(traverse_module_state->__pyx_kp_u_src_len_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_src_pos);
  Py_VISIT(traverse_module_state->__pyx_kp_u_src_pos_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_src_rapidfuzz_distance__initiali);
  Py_VISIT(traverse_module_state->__pyx_n_s_src_start);
  Py_VISIT(traverse_module_state->__pyx_kp_u_src_start_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_src_start_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_state);
  Py_VISIT(traverse_module_state->__pyx_kp_u_step_sizes_below_0_lead_to_an_in);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_subsequence);
  Py_VISIT(traverse_module_state->__pyx_n_s_tag);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_throw);
  Py_VISIT(traverse_module_state->__pyx_n_s_typecode);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_x);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_65325334);
  Py_VISIT(traverse_module_state->__pyx_int_72459107);
  Py_VISIT(traverse_module_state->__pyx_int_152364826);
  Py_VISIT(traverse_module_state->__pyx_int_156907547);
  Py_VISIT(traverse_module_state->__pyx_int_176383991);
  Py_VISIT(traverse_module_state->__pyx_int_180503197);
  Py_VISIT(traverse_module_state->__pyx_int_193594487);
  Py_VISIT(traverse_module_state->__pyx_int_218343285);
  Py_VISIT(traverse_module_state->__pyx_int_218915983);
  Py_VISIT(traverse_module_state->__pyx_int_neg_1);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__27);
  Py_VISIT(traverse_module_state->__pyx_tuple__28);
  Py_VISIT(traverse_module_state->__pyx_tuple__29);
  Py_VISIT(traverse_module_state->__pyx_tuple__32);
  Py_VISIT(traverse_module_state->__pyx_tuple__42);
  Py_VISIT(traverse_module_state->__pyx_tuple__43);
  Py_VISIT(traverse_module_state->__pyx_tuple__49);
  Py_VISIT(traverse_module_state->__pyx_tuple__52);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__55);
  Py_VISIT(traverse_module_state->__pyx_tuple__56);
  Py_VISIT(traverse_module_state->__pyx_tuple__57);
  Py_VISIT(traverse_module_state->__pyx_tuple__58);
  Py_VISIT(traverse_module_state->__pyx_tuple__59);
  Py_VISIT(traverse_module_state->__pyx_tuple__60);
  Py_VISIT(traverse_module_state->__pyx_tuple__61);
  Py_VISIT(traverse_module_state->__pyx_tuple__62);
  Py_VISIT(traverse_module_state->__pyx_tuple__63);
  Py_VISIT(traverse_module_state->__pyx_tuple__64);
  Py_VISIT(traverse_module_state->__pyx_tuple__65);
  Py_VISIT(traverse_module_state->__pyx_codeobj__13);
  Py_VISIT(traverse_module_state->__pyx_codeobj__14);
  Py_VISIT(traverse_module_state->__pyx_codeobj__16);
  Py_VISIT(traverse_module_state->__pyx_codeobj__17);
  Py_VISIT(traverse_module_state->__pyx_codeobj__18);
  Py_VISIT(traverse_module_state->__pyx_codeobj__19);
  Py_VISIT(traverse_module_state->__pyx_codeobj__20);
  Py_VISIT(traverse_module_state->__pyx_codeobj__21);
  Py_VISIT(traverse_module_state->__pyx_codeobj__22);
  Py_VISIT(traverse_module_state->__pyx_codeobj__23);
  Py_VISIT(traverse_module_state->__pyx_codeobj__24);
  Py_VISIT(traverse_module_state->__pyx_codeobj__26);
  Py_VISIT(traverse_module_state->__pyx_codeobj__30);
  Py_VISIT(traverse_module_state->__pyx_codeobj__31);
  Py_VISIT(traverse_module_state->__pyx_codeobj__33);
  Py_VISIT(traverse_module_state->__pyx_codeobj__34);
  Py_VISIT(traverse_module_state->__pyx_codeobj__35);
  Py_VISIT(traverse_module_state->__pyx_codeobj__36);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__38);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__40);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__45);
  Py_VISIT(traverse_module_state->__pyx_codeobj__46);
  Py_VISIT(traverse_module_state->__pyx_codeobj__47);
  Py_VISIT(traverse_module_state->__pyx_codeobj__48);
  Py_VISIT(traverse_module_state->__pyx_codeobj__51);
  Py_VISIT(traverse_module_state->__pyx_codeobj__53);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editops __pyx_mstate_global->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editops
#define __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcodes __pyx_mstate_global->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcodes
#define __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment __pyx_mstate_global->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment
#define __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock __pyx_mstate_global->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock
#define __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editop __pyx_mstate_global->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editop
#define __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcode __pyx_mstate_global->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcode
#define __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ __pyx_mstate_global->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__
#define __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ __pyx_mstate_global->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__
#define __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ __pyx_mstate_global->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__
#define __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr __pyx_mstate_global->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr
#define __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ __pyx_mstate_global->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__
#define __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ __pyx_mstate_global->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__
#define __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr __pyx_mstate_global->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr
#define __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ __pyx_mstate_global->__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__
#endif
#define __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops __pyx_mstate_global->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops
#define __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes __pyx_mstate_global->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes
#define __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment __pyx_mstate_global->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment
#define __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock __pyx_mstate_global->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock
#define __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop __pyx_mstate_global->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop
#define __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode __pyx_mstate_global->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode
#define __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ __pyx_mstate_global->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__
#define __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ __pyx_mstate_global->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__
#define __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ __pyx_mstate_global->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__
#define __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr __pyx_mstate_global->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr
#define __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ __pyx_mstate_global->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__
#define __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ __pyx_mstate_global->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__
#define __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr __pyx_mstate_global->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr
#define __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ __pyx_mstate_global->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__
#define __pyx_kp_u_ __pyx_mstate_global->__pyx_kp_u_
#define __pyx_kp_u_Duplicated_edit_operation __pyx_mstate_global->__pyx_kp_u_Duplicated_edit_operation
#define __pyx_n_s_Editop __pyx_mstate_global->__pyx_n_s_Editop
#define __pyx_n_s_Editop___iter __pyx_mstate_global->__pyx_n_s_Editop___iter
#define __pyx_n_s_Editop___reduce_cython __pyx_mstate_global->__pyx_n_s_Editop___reduce_cython
#define __pyx_n_s_Editop___setstate_cython __pyx_mstate_global->__pyx_n_s_Editop___setstate_cython
#define __pyx_kp_u_Editop_index_out_of_range __pyx_mstate_global->__pyx_kp_u_Editop_index_out_of_range
#define __pyx_kp_u_Editop_tag __pyx_mstate_global->__pyx_kp_u_Editop_tag
#define __pyx_kp_u_Editops __pyx_mstate_global->__pyx_kp_u_Editops
#define __pyx_n_s_Editops_2 __pyx_mstate_global->__pyx_n_s_Editops_2
#define __pyx_n_s_Editops___iter __pyx_mstate_global->__pyx_n_s_Editops___iter
#define __pyx_n_s_Editops___reduce_cython __pyx_mstate_global->__pyx_n_s_Editops___reduce_cython
#define __pyx_n_s_Editops___setstate_cython __pyx_mstate_global->__pyx_n_s_Editops___setstate_cython
#define __pyx_n_s_Editops_apply __pyx_mstate_global->__pyx_n_s_Editops_apply
#define __pyx_n_s_Editops_as_list __pyx_mstate_global->__pyx_n_s_Editops_as_list
#define __pyx_n_s_Editops_as_matching_blocks __pyx_mstate_global->__pyx_n_s_Editops_as_matching_blocks
#define __pyx_n_s_Editops_as_opcodes __pyx_mstate_global->__pyx_n_s_Editops_as_opcodes
#define __pyx_n_s_Editops_copy __pyx_mstate_global->__pyx_n_s_Editops_copy
#define __pyx_n_s_Editops_from_opcodes __pyx_mstate_global->__pyx_n_s_Editops_from_opcodes
#define __pyx_kp_u_Editops_index_out_of_range __pyx_mstate_global->__pyx_kp_u_Editops_index_out_of_range
#define __pyx_n_s_Editops_inverse __pyx_mstate_global->__pyx_n_s_Editops_inverse
#define __pyx_kp_u_Editops_inverse_line_432 __pyx_mstate_global->__pyx_kp_u_Editops_inverse_line_432
#define __pyx_n_s_Editops_remove_subsequence __pyx_mstate_global->__pyx_n_s_Editops_remove_subsequence
#define __pyx_kp_u_Expected_index __pyx_mstate_global->__pyx_kp_u_Expected_index
#define __pyx_kp_u_Expected_index_or_slice __pyx_mstate_global->__pyx_kp_u_Expected_index_or_slice
#define __pyx_kp_u_Expected_list_of_3_tuples_or_a_l __pyx_mstate_global->__pyx_kp_u_Expected_list_of_3_tuples_or_a_l
#define __pyx_kp_u_Got_unexpected_keyword_arguments __pyx_mstate_global->__pyx_kp_u_Got_unexpected_keyword_arguments
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3
#define __pyx_n_s_IndexError __pyx_mstate_global->__pyx_n_s_IndexError
#define __pyx_kp_u_Invalid_Edit_Type __pyx_mstate_global->__pyx_kp_u_Invalid_Edit_Type
#define __pyx_kp_u_Invert_Editops_so_it_describes __pyx_mstate_global->__pyx_kp_u_Invert_Editops_so_it_describes
#define __pyx_kp_u_Invert_Opcodes_so_it_describes __pyx_mstate_global->__pyx_kp_u_Invert_Opcodes_so_it_describes
#define __pyx_kp_u_List_of_edit_operations_does_not __pyx_mstate_global->__pyx_kp_u_List_of_edit_operations_does_not
#define __pyx_kp_u_List_of_edit_operations_does_not_2 __pyx_mstate_global->__pyx_kp_u_List_of_edit_operations_does_not_2
#define __pyx_kp_u_List_of_edit_operations_invalid __pyx_mstate_global->__pyx_kp_u_List_of_edit_operations_invalid
#define __pyx_kp_u_List_of_edit_operations_is_not_c __pyx_mstate_global->__pyx_kp_u_List_of_edit_operations_is_not_c
#define __pyx_kp_u_List_of_edit_operations_out_of_o __pyx_mstate_global->__pyx_kp_u_List_of_edit_operations_out_of_o
#define __pyx_n_s_MatchingBlock __pyx_mstate_global->__pyx_n_s_MatchingBlock
#define __pyx_n_s_MatchingBlock___iter __pyx_mstate_global->__pyx_n_s_MatchingBlock___iter
#define __pyx_n_s_MatchingBlock___reduce_cython __pyx_mstate_global->__pyx_n_s_MatchingBlock___reduce_cython
#define __pyx_n_s_MatchingBlock___setstate_cython __pyx_mstate_global->__pyx_n_s_MatchingBlock___setstate_cython
#define __pyx_kp_u_MatchingBlock_a __pyx_mstate_global->__pyx_kp_u_MatchingBlock_a
#define __pyx_kp_u_MatchingBlock_index_out_of_range __pyx_mstate_global->__pyx_kp_u_MatchingBlock_index_out_of_range
#define __pyx_n_s_MemoryError __pyx_mstate_global->__pyx_n_s_MemoryError
#define __pyx_kp_u_None __pyx_mstate_global->__pyx_kp_u_None
#define __pyx_n_s_Opcode __pyx_mstate_global->__pyx_n_s_Opcode
#define __pyx_n_s_Opcode___iter __pyx_mstate_global->__pyx_n_s_Opcode___iter
#define __pyx_n_s_Opcode___reduce_cython __pyx_mstate_global->__pyx_n_s_Opcode___reduce_cython
#define __pyx_n_s_Opcode___setstate_cython __pyx_mstate_global->__pyx_n_s_Opcode___setstate_cython
#define __pyx_kp_u_Opcode_index_out_of_range __pyx_mstate_global->__pyx_kp_u_Opcode_index_out_of_range
#define __pyx_kp_u_Opcode_tag __pyx_mstate_global->__pyx_kp_u_Opcode_tag
#define __pyx_kp_u_Opcodes __pyx_mstate_global->__pyx_kp_u_Opcodes
#define __pyx_n_s_Opcodes_2 __pyx_mstate_global->__pyx_n_s_Opcodes_2
#define __pyx_n_s_Opcodes___iter __pyx_mstate_global->__pyx_n_s_Opcodes___iter
#define __pyx_n_s_Opcodes___reduce_cython __pyx_mstate_global->__pyx_n_s_Opcodes___reduce_cython
#define __pyx_n_s_Opcodes___setstate_cython __pyx_mstate_global->__pyx_n_s_Opcodes___setstate_cython
#define __pyx_n_s_Opcodes_apply __pyx_mstate_global->__pyx_n_s_Opcodes_apply
#define __pyx_n_s_Opcodes_as_editops __pyx_mstate_global->__pyx_n_s_Opcodes_as_editops
#define __pyx_n_s_Opcodes_as_list __pyx_mstate_global->__pyx_n_s_Opcodes_as_list
#define __pyx_n_s_Opcodes_as_matching_blocks __pyx_mstate_global->__pyx_n_s_Opcodes_as_matching_blocks
#define __pyx_n_s_Opcodes_copy __pyx_mstate_global->__pyx_n_s_Opcodes_copy
#define __pyx_n_s_Opcodes_from_editops __pyx_mstate_global->__pyx_n_s_Opcodes_from_editops
#define __pyx_kp_u_Opcodes_index_out_of_range __pyx_mstate_global->__pyx_kp_u_Opcodes_index_out_of_range
#define __pyx_n_s_Opcodes_inverse __pyx_mstate_global->__pyx_n_s_Opcodes_inverse
#define __pyx_kp_u_Opcodes_inverse_line_733 __pyx_mstate_global->__pyx_kp_u_Opcodes_inverse_line_733
#define __pyx_n_s_PickleError __pyx_mstate_global->__pyx_n_s_PickleError
#define __pyx_n_s_RF_OriginalScorer __pyx_mstate_global->__pyx_n_s_RF_OriginalScorer
#define __pyx_n_s_RF_Preprocess __pyx_mstate_global->__pyx_n_s_RF_Preprocess
#define __pyx_n_u_RF_Preprocess __pyx_mstate_global->__pyx_n_u_RF_Preprocess
#define __pyx_n_s_RF_Scorer __pyx_mstate_global->__pyx_n_s_RF_Scorer
#define __pyx_n_s_RF_ScorerPy __pyx_mstate_global->__pyx_n_s_RF_ScorerPy
#define __pyx_n_s_ScoreAlignment __pyx_mstate_global->__pyx_n_s_ScoreAlignment
#define __pyx_n_s_ScoreAlignment___iter __pyx_mstate_global->__pyx_n_s_ScoreAlignment___iter
#define __pyx_n_s_ScoreAlignment___reduce_cython __pyx_mstate_global->__pyx_n_s_ScoreAlignment___reduce_cython
#define __pyx_n_s_ScoreAlignment___setstate_cython __pyx_mstate_global->__pyx_n_s_ScoreAlignment___setstate_cython
#define __pyx_kp_u_ScoreAlignment_score __pyx_mstate_global->__pyx_kp_u_ScoreAlignment_score
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_kp_u__12 __pyx_mstate_global->__pyx_kp_u__12
#define __pyx_kp_u__2 __pyx_mstate_global->__pyx_kp_u__2
#define __pyx_kp_u__50 __pyx_mstate_global->__pyx_kp_u__50
#define __pyx_n_s__66 __pyx_mstate_global->__pyx_n_s__66
#define __pyx_n_s_a __pyx_mstate_global->__pyx_n_s_a
#define __pyx_n_s_apply __pyx_mstate_global->__pyx_n_s_apply
#define __pyx_n_s_args __pyx_mstate_global->__pyx_n_s_args
#define __pyx_n_s_array __pyx_mstate_global->__pyx_n_s_array
#define __pyx_n_s_as_editops __pyx_mstate_global->__pyx_n_s_as_editops
#define __pyx_n_s_as_list __pyx_mstate_global->__pyx_n_s_as_list
#define __pyx_n_s_as_matching_blocks __pyx_mstate_global->__pyx_n_s_as_matching_blocks
#define __pyx_n_s_as_opcodes __pyx_mstate_global->__pyx_n_s_as_opcodes
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_b __pyx_mstate_global->__pyx_n_s_b
#define __pyx_kp_u_b_2 __pyx_mstate_global->__pyx_kp_u_b_2
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_close __pyx_mstate_global->__pyx_n_s_close
#define __pyx_n_s_cls __pyx_mstate_global->__pyx_n_s_cls
#define __pyx_n_s_copy __pyx_mstate_global->__pyx_n_s_copy
#define __pyx_n_u_delete __pyx_mstate_global->__pyx_n_u_delete
#define __pyx_n_s_dest_end __pyx_mstate_global->__pyx_n_s_dest_end
#define __pyx_kp_u_dest_end_2 __pyx_mstate_global->__pyx_kp_u_dest_end_2
#define __pyx_n_s_dest_len __pyx_mstate_global->__pyx_n_s_dest_len
#define __pyx_kp_u_dest_len_2 __pyx_mstate_global->__pyx_kp_u_dest_len_2
#define __pyx_n_s_dest_pos __pyx_mstate_global->__pyx_n_s_dest_pos
#define __pyx_kp_u_dest_pos_2 __pyx_mstate_global->__pyx_kp_u_dest_pos_2
#define __pyx_n_s_dest_start __pyx_mstate_global->__pyx_n_s_dest_start
#define __pyx_kp_u_dest_start_2 __pyx_mstate_global->__pyx_kp_u_dest_start_2
#define __pyx_n_s_destination_string __pyx_mstate_global->__pyx_n_s_destination_string
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_dict_2 __pyx_mstate_global->__pyx_n_s_dict_2
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_doc __pyx_mstate_global->__pyx_n_s_doc
#define __pyx_n_s_editops __pyx_mstate_global->__pyx_n_s_editops
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_u_equal __pyx_mstate_global->__pyx_n_u_equal
#define __pyx_kp_u_expected_strings_or_bytes_object __pyx_mstate_global->__pyx_kp_u_expected_strings_or_bytes_object
#define __pyx_n_s_from_editops __pyx_mstate_global->__pyx_n_s_from_editops
#define __pyx_n_s_from_opcodes __pyx_mstate_global->__pyx_n_s_from_opcodes
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_genexpr __pyx_mstate_global->__pyx_n_s_genexpr
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_indices __pyx_mstate_global->__pyx_n_s_indices
#define __pyx_n_u_insert __pyx_mstate_global->__pyx_n_u_insert
#define __pyx_n_s_inverse __pyx_mstate_global->__pyx_n_s_inverse
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_iter __pyx_mstate_global->__pyx_n_s_iter
#define __pyx_n_s_keys __pyx_mstate_global->__pyx_n_s_keys
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_new __pyx_mstate_global->__pyx_n_s_new
#define __pyx_kp_s_no_default___reduce___due_to_non __pyx_mstate_global->__pyx_kp_s_no_default___reduce___due_to_non
#define __pyx_n_s_opcodes __pyx_mstate_global->__pyx_n_s_opcodes
#define __pyx_n_s_pandas_NA __pyx_mstate_global->__pyx_n_s_pandas_NA
#define __pyx_n_s_pickle __pyx_mstate_global->__pyx_n_s_pickle
#define __pyx_n_s_pyx_PickleError __pyx_mstate_global->__pyx_n_s_pyx_PickleError
#define __pyx_n_s_pyx_checksum __pyx_mstate_global->__pyx_n_s_pyx_checksum
#define __pyx_n_s_pyx_result __pyx_mstate_global->__pyx_n_s_pyx_result
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_type __pyx_mstate_global->__pyx_n_s_pyx_type
#define __pyx_n_s_pyx_unpickle_Editop __pyx_mstate_global->__pyx_n_s_pyx_unpickle_Editop
#define __pyx_n_s_pyx_unpickle_Opcode __pyx_mstate_global->__pyx_n_s_pyx_unpickle_Opcode
#define __pyx_n_s_pyx_unpickle_ScoreAlignment __pyx_mstate_global->__pyx_n_s_pyx_unpickle_ScoreAlignment
#define __pyx_n_s_qualname __pyx_mstate_global->__pyx_n_s_qualname
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_rapidfuzz_distance__initialize_c __pyx_mstate_global->__pyx_n_s_rapidfuzz_distance__initialize_c
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_remove_subsequence __pyx_mstate_global->__pyx_n_s_remove_subsequence
#define __pyx_n_u_replace __pyx_mstate_global->__pyx_n_u_replace
#define __pyx_n_s_repr___locals_genexpr __pyx_mstate_global->__pyx_n_s_repr___locals_genexpr
#define __pyx_n_s_score __pyx_mstate_global->__pyx_n_s_score
#define __pyx_kp_u_score_cutoff_has_to_be_in_the_ra __pyx_mstate_global->__pyx_kp_u_score_cutoff_has_to_be_in_the_ra
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self_editops_cannot_be_converted __pyx_mstate_global->__pyx_kp_s_self_editops_cannot_be_converted
#define __pyx_kp_s_self_opcodes_cannot_be_converted __pyx_mstate_global->__pyx_kp_s_self_opcodes_cannot_be_converted
#define __pyx_n_s_send __pyx_mstate_global->__pyx_n_s_send
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_size __pyx_mstate_global->__pyx_n_s_size
#define __pyx_kp_u_size_2 __pyx_mstate_global->__pyx_kp_u_size_2
#define __pyx_n_s_source_string __pyx_mstate_global->__pyx_n_s_source_string
#define __pyx_n_s_src_end __pyx_mstate_global->__pyx_n_s_src_end
#define __pyx_kp_u_src_end_2 __pyx_mstate_global->__pyx_kp_u_src_end_2
#define __pyx_n_s_src_len __pyx_mstate_global->__pyx_n_s_src_len
#define __pyx_kp_u_src_len_2 __pyx_mstate_global->__pyx_kp_u_src_len_2
#define __pyx_n_s_src_pos __pyx_mstate_global->__pyx_n_s_src_pos
#define __pyx_kp_u_src_pos_2 __pyx_mstate_global->__pyx_kp_u_src_pos_2
#define __pyx_kp_s_src_rapidfuzz_distance__initiali __pyx_mstate_global->__pyx_kp_s_src_rapidfuzz_distance__initiali
#define __pyx_n_s_src_start __pyx_mstate_global->__pyx_n_s_src_start
#define __pyx_kp_u_src_start_2 __pyx_mstate_global->__pyx_kp_u_src_start_2
#define __pyx_kp_u_src_start_3 __pyx_mstate_global->__pyx_kp_u_src_start_3
#define __pyx_n_s_state __pyx_mstate_global->__pyx_n_s_state
#define __pyx_kp_u_step_sizes_below_0_lead_to_an_in __pyx_mstate_global->__pyx_kp_u_step_sizes_below_0_lead_to_an_in
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_subsequence __pyx_mstate_global->__pyx_n_s_subsequence
#define __pyx_n_s_tag __pyx_mstate_global->__pyx_n_s_tag
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_throw __pyx_mstate_global->__pyx_n_s_throw
#define __pyx_n_s_typecode __pyx_mstate_global->__pyx_n_s_typecode
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_s_use_setstate __pyx_mstate_global->__pyx_n_s_use_setstate
#define __pyx_n_s_x __pyx_mstate_global->__pyx_n_s_x
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_65325334 __pyx_mstate_global->__pyx_int_65325334
#define __pyx_int_72459107 __pyx_mstate_global->__pyx_int_72459107
#define __pyx_int_152364826 __pyx_mstate_global->__pyx_int_152364826
#define __pyx_int_156907547 __pyx_mstate_global->__pyx_int_156907547
#define __pyx_int_176383991 __pyx_mstate_global->__pyx_int_176383991
#define __pyx_int_180503197 __pyx_mstate_global->__pyx_int_180503197
#define __pyx_int_193594487 __pyx_mstate_global->__pyx_int_193594487
#define __pyx_int_218343285 __pyx_mstate_global->__pyx_int_218343285
#define __pyx_int_218915983 __pyx_mstate_global->__pyx_int_218915983
#define __pyx_int_neg_1 __pyx_mstate_global->__pyx_int_neg_1
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__27 __pyx_mstate_global->__pyx_tuple__27
#define __pyx_tuple__28 __pyx_mstate_global->__pyx_tuple__28
#define __pyx_tuple__29 __pyx_mstate_global->__pyx_tuple__29
#define __pyx_tuple__32 __pyx_mstate_global->__pyx_tuple__32
#define __pyx_tuple__42 __pyx_mstate_global->__pyx_tuple__42
#define __pyx_tuple__43 __pyx_mstate_global->__pyx_tuple__43
#define __pyx_tuple__49 __pyx_mstate_global->__pyx_tuple__49
#define __pyx_tuple__52 __pyx_mstate_global->__pyx_tuple__52
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__55 __pyx_mstate_global->__pyx_tuple__55
#define __pyx_tuple__56 __pyx_mstate_global->__pyx_tuple__56
#define __pyx_tuple__57 __pyx_mstate_global->__pyx_tuple__57
#define __pyx_tuple__58 __pyx_mstate_global->__pyx_tuple__58
#define __pyx_tuple__59 __pyx_mstate_global->__pyx_tuple__59
#define __pyx_tuple__60 __pyx_mstate_global->__pyx_tuple__60
#define __pyx_tuple__61 __pyx_mstate_global->__pyx_tuple__61
#define __pyx_tuple__62 __pyx_mstate_global->__pyx_tuple__62
#define __pyx_tuple__63 __pyx_mstate_global->__pyx_tuple__63
#define __pyx_tuple__64 __pyx_mstate_global->__pyx_tuple__64
#define __pyx_tuple__65 __pyx_mstate_global->__pyx_tuple__65
#define __pyx_codeobj__13 __pyx_mstate_global->__pyx_codeobj__13
#define __pyx_codeobj__14 __pyx_mstate_global->__pyx_codeobj__14
#define __pyx_codeobj__16 __pyx_mstate_global->__pyx_codeobj__16
#define __pyx_codeobj__17 __pyx_mstate_global->__pyx_codeobj__17
#define __pyx_codeobj__18 __pyx_mstate_global->__pyx_codeobj__18
#define __pyx_codeobj__19 __pyx_mstate_global->__pyx_codeobj__19
#define __pyx_codeobj__20 __pyx_mstate_global->__pyx_codeobj__20
#define __pyx_codeobj__21 __pyx_mstate_global->__pyx_codeobj__21
#define __pyx_codeobj__22 __pyx_mstate_global->__pyx_codeobj__22
#define __pyx_codeobj__23 __pyx_mstate_global->__pyx_codeobj__23
#define __pyx_codeobj__24 __pyx_mstate_global->__pyx_codeobj__24
#define __pyx_codeobj__26 __pyx_mstate_global->__pyx_codeobj__26
#define __pyx_codeobj__30 __pyx_mstate_global->__pyx_codeobj__30
#define __pyx_codeobj__31 __pyx_mstate_global->__pyx_codeobj__31
#define __pyx_codeobj__33 __pyx_mstate_global->__pyx_codeobj__33
#define __pyx_codeobj__34 __pyx_mstate_global->__pyx_codeobj__34
#define __pyx_codeobj__35 __pyx_mstate_global->__pyx_codeobj__35
#define __pyx_codeobj__36 __pyx_mstate_global->__pyx_codeobj__36
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__38 __pyx_mstate_global->__pyx_codeobj__38
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__40 __pyx_mstate_global->__pyx_codeobj__40
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__44 __pyx_mstate_global->__pyx_codeobj__44
#define __pyx_codeobj__45 __pyx_mstate_global->__pyx_codeobj__45
#define __pyx_codeobj__46 __pyx_mstate_global->__pyx_codeobj__46
#define __pyx_codeobj__47 __pyx_mstate_global->__pyx_codeobj__47
#define __pyx_codeobj__48 __pyx_mstate_global->__pyx_codeobj__48
#define __pyx_codeobj__51 __pyx_mstate_global->__pyx_codeobj__51
#define __pyx_codeobj__53 __pyx_mstate_global->__pyx_codeobj__53
/* #### Code section: module_code ### */

/* "cpp_common.pxd":255
 *     void validate_string(object py_str, const char* err) except +
 * 
 * cdef inline bool hash_array(arr, RF_String* s_proc) except False:             # <<<<<<<<<<<<<<
 *     # TODO on Cpython this does not require any copies
 *     cdef Py_UCS4 typecode = <Py_UCS4>arr.typecode
 */

static CYTHON_INLINE bool __pyx_f_10cpp_common_hash_array(PyObject *__pyx_v_arr, RF_String *__pyx_v_s_proc) {
  Py_UCS4 __pyx_v_typecode;
  int64_t __pyx_v_i;
  CYTHON_UNUSED PyObject *__pyx_v_e = NULL;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_UCS4 __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int64_t __pyx_t_8;
  int64_t __pyx_t_9;
  int64_t __pyx_t_10;
  uint64_t __pyx_t_11;
  Py_hash_t __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hash_array", 1);
  __Pyx_TraceCall("hash_array", __pyx_f[1], 255, 0, __PYX_ERR(1, 255, __pyx_L1_error));

  /* "cpp_common.pxd":257
 * cdef inline bool hash_array(arr, RF_String* s_proc) except False:
 *     # TODO on Cpython this does not require any copies
 *     cdef Py_UCS4 typecode = <Py_UCS4>arr.typecode             # <<<<<<<<<<<<<<
 *     s_proc.length = <int64_t>len(arr)
 * 
 */
  __Pyx_TraceLine(257,0,__PYX_ERR(1, 257, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_arr, __pyx_n_s_typecode); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(1, 257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_typecode = ((Py_UCS4)__pyx_t_2);

  /* "cpp_common.pxd":258
 *     # TODO on Cpython this does not require any copies
 *     cdef Py_UCS4 typecode = <Py_UCS4>arr.typecode
 *     s_proc.length = <int64_t>len(arr)             # <<<<<<<<<<<<<<
 * 
 *     s_proc.data = malloc(s_proc.length * sizeof(uint64_t))
 */
  __Pyx_TraceLine(258,0,__PYX_ERR(1, 258, __pyx_L1_error))
  __pyx_t_3 = PyObject_Length(__pyx_v_arr); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 258, __pyx_L1_error)
  __pyx_v_s_proc->length = ((int64_t)__pyx_t_3);

  /* "cpp_common.pxd":260
 *     s_proc.length = <int64_t>len(arr)
 * 
 *     s_proc.data = malloc(s_proc.length * sizeof(uint64_t))             # <<<<<<<<<<<<<<
 * 
 *     if s_proc.data == NULL:
 */
  __Pyx_TraceLine(260,0,__PYX_ERR(1, 260, __pyx_L1_error))
  __pyx_v_s_proc->data = malloc((__pyx_v_s_proc->length * (sizeof(uint64_t))));

  /* "cpp_common.pxd":262
 *     s_proc.data = malloc(s_proc.length * sizeof(uint64_t))
 * 
 *     if s_proc.data == NULL:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  __Pyx_TraceLine(262,0,__PYX_ERR(1, 262, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v_s_proc->data == NULL);
  if (unlikely(__pyx_t_4)) {

    /* "cpp_common.pxd":263
 * 
 *     if s_proc.data == NULL:
 *         raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __Pyx_TraceLine(263,0,__PYX_ERR(1, 263, __pyx_L1_error))
    PyErr_NoMemory(); __PYX_ERR(1, 263, __pyx_L1_error)

    /* "cpp_common.pxd":262
 *     s_proc.data = malloc(s_proc.length * sizeof(uint64_t))
 * 
 *     if s_proc.data == NULL:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  }

  /* "cpp_common.pxd":265
 *         raise MemoryError
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # ignore signed/unsigned, since it is not relevant in any of the algorithms
 *         if typecode in {'b', 'B'}: # signed/unsigned char
 */
  __Pyx_TraceLine(265,0,__PYX_ERR(1, 265, __pyx_L1_error))
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "cpp_common.pxd":267
 *     try:
 *         # ignore signed/unsigned, since it is not relevant in any of the algorithms
 *         if typecode in {'b', 'B'}: # signed/unsigned char             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
      __Pyx_TraceLine(267,0,__PYX_ERR(1, 267, __pyx_L4_error))
      switch (__pyx_v_typecode) {
        case 98:
        CYTHON_FALLTHROUGH;
        case 66:

        /* "cpp_common.pxd":268
 *         # ignore signed/unsigned, since it is not relevant in any of the algorithms
 *         if typecode in {'b', 'B'}: # signed/unsigned char
 *             s_proc.kind = RF_StringType.RF_UINT64             # <<<<<<<<<<<<<<
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 */
        __Pyx_TraceLine(268,0,__PYX_ERR(1, 268, __pyx_L4_error))
        __pyx_v_s_proc->kind = RF_UINT64;

        /* "cpp_common.pxd":269
 *         if typecode in {'b', 'B'}: # signed/unsigned char
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode == 'u': # 'u' wchar_t
 */
        __Pyx_TraceLine(269,0,__PYX_ERR(1, 269, __pyx_L4_error))
        __pyx_t_8 = __pyx_v_s_proc->length;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_i = __pyx_t_10;

          /* "cpp_common.pxd":270
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]             # <<<<<<<<<<<<<<
 *         elif typecode == 'u': # 'u' wchar_t
 *             s_proc.kind = RF_StringType.RF_UINT64
 */
          __Pyx_TraceLine(270,0,__PYX_ERR(1, 270, __pyx_L4_error))
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_arr, __pyx_v_i, int64_t, 1, __Pyx_PyInt_From_int64_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 270, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_11 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 270, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)__pyx_t_11);
        }

        /* "cpp_common.pxd":267
 *     try:
 *         # ignore signed/unsigned, since it is not relevant in any of the algorithms
 *         if typecode in {'b', 'B'}: # signed/unsigned char             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        break;
        case 0x75:

        /* "cpp_common.pxd":272
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode == 'u': # 'u' wchar_t
 *             s_proc.kind = RF_StringType.RF_UINT64             # <<<<<<<<<<<<<<
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>arr[i]
 */
        __Pyx_TraceLine(272,0,__PYX_ERR(1, 272, __pyx_L4_error))
        __pyx_v_s_proc->kind = RF_UINT64;

        /* "cpp_common.pxd":273
 *         elif typecode == 'u': # 'u' wchar_t
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>arr[i]
 *         elif typecode in {'h', 'H'}: #  signed/unsigned short
 */
        __Pyx_TraceLine(273,0,__PYX_ERR(1, 273, __pyx_L4_error))
        __pyx_t_8 = __pyx_v_s_proc->length;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_i = __pyx_t_10;

          /* "cpp_common.pxd":274
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>arr[i]             # <<<<<<<<<<<<<<
 *         elif typecode in {'h', 'H'}: #  signed/unsigned short
 *             s_proc.kind = RF_StringType.RF_UINT64
 */
          __Pyx_TraceLine(274,0,__PYX_ERR(1, 274, __pyx_L4_error))
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_arr, __pyx_v_i, int64_t, 1, __Pyx_PyInt_From_int64_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 274, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(1, 274, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)((Py_UCS4)__pyx_t_2));
        }

        /* "cpp_common.pxd":271
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode == 'u': # 'u' wchar_t             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        break;
        case 0x68:

        /* "cpp_common.pxd":275
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>arr[i]
 *         elif typecode in {'h', 'H'}: #  signed/unsigned short             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        __Pyx_TraceLine(275,0,__PYX_ERR(1, 275, __pyx_L4_error))
        CYTHON_FALLTHROUGH;
        case 72:

        /* "cpp_common.pxd":276
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>arr[i]
 *         elif typecode in {'h', 'H'}: #  signed/unsigned short
 *             s_proc.kind = RF_StringType.RF_UINT64             # <<<<<<<<<<<<<<
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 */
        __Pyx_TraceLine(276,0,__PYX_ERR(1, 276, __pyx_L4_error))
        __pyx_v_s_proc->kind = RF_UINT64;

        /* "cpp_common.pxd":277
 *         elif typecode in {'h', 'H'}: #  signed/unsigned short
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'i', 'I'}: # signed/unsigned int
 */
        __Pyx_TraceLine(277,0,__PYX_ERR(1, 277, __pyx_L4_error))
        __pyx_t_8 = __pyx_v_s_proc->length;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_i = __pyx_t_10;

          /* "cpp_common.pxd":278
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]             # <<<<<<<<<<<<<<
 *         elif typecode in {'i', 'I'}: # signed/unsigned int
 *             s_proc.kind = RF_StringType.RF_UINT64
 */
          __Pyx_TraceLine(278,0,__PYX_ERR(1, 278, __pyx_L4_error))
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_arr, __pyx_v_i, int64_t, 1, __Pyx_PyInt_From_int64_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 278, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_11 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 278, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)__pyx_t_11);
        }

        /* "cpp_common.pxd":275
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>arr[i]
 *         elif typecode in {'h', 'H'}: #  signed/unsigned short             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        break;
        case 0x69:

        /* "cpp_common.pxd":279
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'i', 'I'}: # signed/unsigned int             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        __Pyx_TraceLine(279,0,__PYX_ERR(1, 279, __pyx_L4_error))
        CYTHON_FALLTHROUGH;
        case 73:

        /* "cpp_common.pxd":280
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'i', 'I'}: # signed/unsigned int
 *             s_proc.kind = RF_StringType.RF_UINT64             # <<<<<<<<<<<<<<
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 */
        __Pyx_TraceLine(280,0,__PYX_ERR(1, 280, __pyx_L4_error))
        __pyx_v_s_proc->kind = RF_UINT64;

        /* "cpp_common.pxd":281
 *         elif typecode in {'i', 'I'}: # signed/unsigned int
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'l', 'L'}: # signed/unsigned long
 */
        __Pyx_TraceLine(281,0,__PYX_ERR(1, 281, __pyx_L4_error))
        __pyx_t_8 = __pyx_v_s_proc->length;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_i = __pyx_t_10;

          /* "cpp_common.pxd":282
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]             # <<<<<<<<<<<<<<
 *         elif typecode in {'l', 'L'}: # signed/unsigned long
 *             s_proc.kind = RF_StringType.RF_UINT64
 */
          __Pyx_TraceLine(282,0,__PYX_ERR(1, 282, __pyx_L4_error))
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_arr, __pyx_v_i, int64_t, 1, __Pyx_PyInt_From_int64_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 282, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_11 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 282, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)__pyx_t_11);
        }

        /* "cpp_common.pxd":279
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'i', 'I'}: # signed/unsigned int             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        break;
        case 0x6C:

        /* "cpp_common.pxd":283
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'l', 'L'}: # signed/unsigned long             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        __Pyx_TraceLine(283,0,__PYX_ERR(1, 283, __pyx_L4_error))
        CYTHON_FALLTHROUGH;
        case 76:

        /* "cpp_common.pxd":284
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'l', 'L'}: # signed/unsigned long
 *             s_proc.kind = RF_StringType.RF_UINT64             # <<<<<<<<<<<<<<
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 */
        __Pyx_TraceLine(284,0,__PYX_ERR(1, 284, __pyx_L4_error))
        __pyx_v_s_proc->kind = RF_UINT64;

        /* "cpp_common.pxd":285
 *         elif typecode in {'l', 'L'}: # signed/unsigned long
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'q', 'Q'}: # signed/unsigned long long
 */
        __Pyx_TraceLine(285,0,__PYX_ERR(1, 285, __pyx_L4_error))
        __pyx_t_8 = __pyx_v_s_proc->length;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_i = __pyx_t_10;

          /* "cpp_common.pxd":286
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]             # <<<<<<<<<<<<<<
 *         elif typecode in {'q', 'Q'}: # signed/unsigned long long
 *             s_proc.kind = RF_StringType.RF_UINT64
 */
          __Pyx_TraceLine(286,0,__PYX_ERR(1, 286, __pyx_L4_error))
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_arr, __pyx_v_i, int64_t, 1, __Pyx_PyInt_From_int64_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 286, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_11 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 286, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)__pyx_t_11);
        }

        /* "cpp_common.pxd":283
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'l', 'L'}: # signed/unsigned long             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        break;
        case 0x71:

        /* "cpp_common.pxd":287
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'q', 'Q'}: # signed/unsigned long long             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        __Pyx_TraceLine(287,0,__PYX_ERR(1, 287, __pyx_L4_error))
        CYTHON_FALLTHROUGH;
        case 81:

        /* "cpp_common.pxd":288
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'q', 'Q'}: # signed/unsigned long long
 *             s_proc.kind = RF_StringType.RF_UINT64             # <<<<<<<<<<<<<<
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 */
        __Pyx_TraceLine(288,0,__PYX_ERR(1, 288, __pyx_L4_error))
        __pyx_v_s_proc->kind = RF_UINT64;

        /* "cpp_common.pxd":289
 *         elif typecode in {'q', 'Q'}: # signed/unsigned long long
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         else: # float/double are hashed
 */
        __Pyx_TraceLine(289,0,__PYX_ERR(1, 289, __pyx_L4_error))
        __pyx_t_8 = __pyx_v_s_proc->length;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_i = __pyx_t_10;

          /* "cpp_common.pxd":290
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]             # <<<<<<<<<<<<<<
 *         else: # float/double are hashed
 *             s_proc.kind = RF_StringType.RF_UINT64
 */
          __Pyx_TraceLine(290,0,__PYX_ERR(1, 290, __pyx_L4_error))
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_arr, __pyx_v_i, int64_t, 1, __Pyx_PyInt_From_int64_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 290, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_11 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 290, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)__pyx_t_11);
        }

        /* "cpp_common.pxd":287
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'q', 'Q'}: # signed/unsigned long long             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        break;
        default:

        /* "cpp_common.pxd":292
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         else: # float/double are hashed
 *             s_proc.kind = RF_StringType.RF_UINT64             # <<<<<<<<<<<<<<
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(arr[i])
 */
        __Pyx_TraceLine(292,0,__PYX_ERR(1, 292, __pyx_L4_error))
        __pyx_v_s_proc->kind = RF_UINT64;

        /* "cpp_common.pxd":293
 *         else: # float/double are hashed
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(arr[i])
 *     except Exception as e:
 */
        __Pyx_TraceLine(293,0,__PYX_ERR(1, 293, __pyx_L4_error))
        __pyx_t_8 = __pyx_v_s_proc->length;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_i = __pyx_t_10;

          /* "cpp_common.pxd":294
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(arr[i])             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         free(s_proc.data)
 */
          __Pyx_TraceLine(294,0,__PYX_ERR(1, 294, __pyx_L4_error))
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_arr, __pyx_v_i, int64_t, 1, __Pyx_PyInt_From_int64_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 294, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_12 = PyObject_Hash(__pyx_t_1); if (unlikely(__pyx_t_12 == ((Py_hash_t)-1))) __PYX_ERR(1, 294, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)__pyx_t_12);
        }
        break;
      }

      /* "cpp_common.pxd":265
 *         raise MemoryError
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # ignore signed/unsigned, since it is not relevant in any of the algorithms
 *         if typecode in {'b', 'B'}: # signed/unsigned char
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cpp_common.pxd":295
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(arr[i])
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         free(s_proc.data)
 *         s_proc.data = NULL
 */
    __Pyx_TraceLine(295,0,__PYX_ERR(1, 295, __pyx_L6_except_error))
    __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_13) {
      __Pyx_AddTraceback("cpp_common.hash_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_14, &__pyx_t_15) < 0) __PYX_ERR(1, 295, __pyx_L6_except_error)
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_14);
      __pyx_v_e = __pyx_t_14;
      /*try:*/ {

        /* "cpp_common.pxd":296
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(arr[i])
 *     except Exception as e:
 *         free(s_proc.data)             # <<<<<<<<<<<<<<
 *         s_proc.data = NULL
 *         raise
 */
        __Pyx_TraceLine(296,0,__PYX_ERR(1, 296, __pyx_L29_error))
        free(__pyx_v_s_proc->data);

        /* "cpp_common.pxd":297
 *     except Exception as e:
 *         free(s_proc.data)
 *         s_proc.data = NULL             # <<<<<<<<<<<<<<
 *         raise
 * 
 */
        __Pyx_TraceLine(297,0,__PYX_ERR(1, 297, __pyx_L29_error))
        __pyx_v_s_proc->data = NULL;

        /* "cpp_common.pxd":298
 *         free(s_proc.data)
 *         s_proc.data = NULL
 *         raise             # <<<<<<<<<<<<<<
 * 
 *     s_proc.dtor = default_string_deinit
 */
        __Pyx_TraceLine(298,0,__PYX_ERR(1, 298, __pyx_L29_error))
        __Pyx_GIVEREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_14, __pyx_t_15);
        __pyx_t_1 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; 
        __PYX_ERR(1, 298, __pyx_L29_error)
      }

      /* "cpp_common.pxd":295
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(arr[i])
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         free(s_proc.data)
 *         s_proc.data = NULL
 */
      __Pyx_TraceLine(295,0,__PYX_ERR(1, 295, __pyx_L29_error))
      /*finally:*/ {
        __pyx_L29_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_22);
          __Pyx_XGOTREF(__pyx_t_23);
          __pyx_t_13 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_XGIVEREF(__pyx_t_22);
            __Pyx_XGIVEREF(__pyx_t_23);
            __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
          }
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_XGIVEREF(__pyx_t_19);
          __Pyx_XGIVEREF(__pyx_t_20);
          __Pyx_ErrRestore(__pyx_t_18, __pyx_t_19, __pyx_t_20);
          __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
          __pyx_lineno = __pyx_t_13; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_17;
          goto __pyx_L6_except_error;
        }
      }
    }
    goto __pyx_L6_except_error;

    /* "cpp_common.pxd":265
 *         raise MemoryError
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # ignore signed/unsigned, since it is not relevant in any of the algorithms
 *         if typecode in {'b', 'B'}: # signed/unsigned char
 */
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "cpp_common.pxd":300
 *         raise
 * 
 *     s_proc.dtor = default_string_deinit             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(300,0,__PYX_ERR(1, 300, __pyx_L1_error))
  __pyx_v_s_proc->dtor = default_string_deinit;

  /* "cpp_common.pxd":301
 * 
 *     s_proc.dtor = default_string_deinit
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(301,0,__PYX_ERR(1, 301, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cpp_common.pxd":255
 *     void validate_string(object py_str, const char* err) except +
 * 
 * cdef inline bool hash_array(arr, RF_String* s_proc) except False:             # <<<<<<<<<<<<<<
 *     # TODO on Cpython this does not require any copies
 *     cdef Py_UCS4 typecode = <Py_UCS4>arr.typecode
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("cpp_common.hash_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":304
 * 
 * 
 * cdef inline bool hash_sequence(seq, RF_String* s_proc) except False:             # <<<<<<<<<<<<<<
 *     s_proc.length = <int64_t>len(seq)
 * 
 */

static CYTHON_INLINE bool __pyx_f_10cpp_common_hash_sequence(PyObject *__pyx_v_seq, RF_String *__pyx_v_s_proc) {
  int64_t __pyx_v_i;
  PyObject *__pyx_v_elem = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_e = NULL;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int64_t __pyx_t_6;
  int64_t __pyx_t_7;
  int64_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  Py_hash_t __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hash_sequence", 1);
  __Pyx_TraceCall("hash_sequence", __pyx_f[1], 304, 0, __PYX_ERR(1, 304, __pyx_L1_error));

  /* "cpp_common.pxd":305
 * 
 * cdef inline bool hash_sequence(seq, RF_String* s_proc) except False:
 *     s_proc.length = <int64_t>len(seq)             # <<<<<<<<<<<<<<
 * 
 *     s_proc.data = malloc(s_proc.length * sizeof(uint64_t))
 */
  __Pyx_TraceLine(305,0,__PYX_ERR(1, 305, __pyx_L1_error))
  __pyx_t_1 = PyObject_Length(__pyx_v_seq); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 305, __pyx_L1_error)
  __pyx_v_s_proc->length = ((int64_t)__pyx_t_1);

  /* "cpp_common.pxd":307
 *     s_proc.length = <int64_t>len(seq)
 * 
 *     s_proc.data = malloc(s_proc.length * sizeof(uint64_t))             # <<<<<<<<<<<<<<
 * 
 *     if s_proc.data == NULL:
 */
  __Pyx_TraceLine(307,0,__PYX_ERR(1, 307, __pyx_L1_error))
  __pyx_v_s_proc->data = malloc((__pyx_v_s_proc->length * (sizeof(uint64_t))));

  /* "cpp_common.pxd":309
 *     s_proc.data = malloc(s_proc.length * sizeof(uint64_t))
 * 
 *     if s_proc.data == NULL:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  __Pyx_TraceLine(309,0,__PYX_ERR(1, 309, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v_s_proc->data == NULL);
  if (unlikely(__pyx_t_2)) {

    /* "cpp_common.pxd":310
 * 
 *     if s_proc.data == NULL:
 *         raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __Pyx_TraceLine(310,0,__PYX_ERR(1, 310, __pyx_L1_error))
    PyErr_NoMemory(); __PYX_ERR(1, 310, __pyx_L1_error)

    /* "cpp_common.pxd":309
 *     s_proc.data = malloc(s_proc.length * sizeof(uint64_t))
 * 
 *     if s_proc.data == NULL:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  }

  /* "cpp_common.pxd":312
 *         raise MemoryError
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         s_proc.kind = RF_StringType.RF_UINT64
 *         for i in range(s_proc.length):
 */
  __Pyx_TraceLine(312,0,__PYX_ERR(1, 312, __pyx_L1_error))
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "cpp_common.pxd":313
 * 
 *     try:
 *         s_proc.kind = RF_StringType.RF_UINT64             # <<<<<<<<<<<<<<
 *         for i in range(s_proc.length):
 *             elem = seq[i]
 */
      __Pyx_TraceLine(313,0,__PYX_ERR(1, 313, __pyx_L4_error))
      __pyx_v_s_proc->kind = RF_UINT64;

      /* "cpp_common.pxd":314
 *     try:
 *         s_proc.kind = RF_StringType.RF_UINT64
 *         for i in range(s_proc.length):             # <<<<<<<<<<<<<<
 *             elem = seq[i]
 *             # this is required so e.g. a list of char can be compared to a string
 */
      __Pyx_TraceLine(314,0,__PYX_ERR(1, 314, __pyx_L4_error))
      __pyx_t_6 = __pyx_v_s_proc->length;
      __pyx_t_7 = __pyx_t_6;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "cpp_common.pxd":315
 *         s_proc.kind = RF_StringType.RF_UINT64
 *         for i in range(s_proc.length):
 *             elem = seq[i]             # <<<<<<<<<<<<<<
 *             # this is required so e.g. a list of char can be compared to a string
 *             if isinstance(elem, str) and len(elem) == 1:
 */
        __Pyx_TraceLine(315,0,__PYX_ERR(1, 315, __pyx_L4_error))
        __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_seq, __pyx_v_i, int64_t, 1, __Pyx_PyInt_From_int64_t, 0, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 315, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_XDECREF_SET(__pyx_v_elem, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "cpp_common.pxd":317
 *             elem = seq[i]
 *             # this is required so e.g. a list of char can be compared to a string
 *             if isinstance(elem, str) and len(elem) == 1:             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>elem
 *             elif isinstance(elem, int) and elem == -1:
 */
        __Pyx_TraceLine(317,0,__PYX_ERR(1, 317, __pyx_L4_error))
        __pyx_t_10 = PyUnicode_Check(__pyx_v_elem); 
        if (__pyx_t_10) {
        } else {
          __pyx_t_2 = __pyx_t_10;
          goto __pyx_L13_bool_binop_done;
        }
        __pyx_t_1 = PyObject_Length(__pyx_v_elem); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 317, __pyx_L4_error)
        __pyx_t_10 = (__pyx_t_1 == 1);
        __pyx_t_2 = __pyx_t_10;
        __pyx_L13_bool_binop_done:;
        if (__pyx_t_2) {

          /* "cpp_common.pxd":318
 *             # this is required so e.g. a list of char can be compared to a string
 *             if isinstance(elem, str) and len(elem) == 1:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>elem             # <<<<<<<<<<<<<<
 *             elif isinstance(elem, int) and elem == -1:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>-1
 */
          __Pyx_TraceLine(318,0,__PYX_ERR(1, 318, __pyx_L4_error))
          __pyx_t_11 = __Pyx_PyObject_AsPy_UCS4(__pyx_v_elem); if (unlikely((__pyx_t_11 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(1, 318, __pyx_L4_error)
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)((Py_UCS4)__pyx_t_11));

          /* "cpp_common.pxd":317
 *             elem = seq[i]
 *             # this is required so e.g. a list of char can be compared to a string
 *             if isinstance(elem, str) and len(elem) == 1:             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>elem
 *             elif isinstance(elem, int) and elem == -1:
 */
          goto __pyx_L12;
        }

        /* "cpp_common.pxd":319
 *             if isinstance(elem, str) and len(elem) == 1:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>elem
 *             elif isinstance(elem, int) and elem == -1:             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>-1
 *             else:
 */
        __Pyx_TraceLine(319,0,__PYX_ERR(1, 319, __pyx_L4_error))
        __pyx_t_10 = PyInt_Check(__pyx_v_elem); 
        if (__pyx_t_10) {
        } else {
          __pyx_t_2 = __pyx_t_10;
          goto __pyx_L15_bool_binop_done;
        }
        __pyx_t_10 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_elem, __pyx_int_neg_1, -1L, 0)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(1, 319, __pyx_L4_error)
        __pyx_t_2 = __pyx_t_10;
        __pyx_L15_bool_binop_done:;
        if (__pyx_t_2) {

          /* "cpp_common.pxd":320
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>elem
 *             elif isinstance(elem, int) and elem == -1:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>-1             # <<<<<<<<<<<<<<
 *             else:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(elem)
 */
          __Pyx_TraceLine(320,0,__PYX_ERR(1, 320, __pyx_L4_error))
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)-1L);

          /* "cpp_common.pxd":319
 *             if isinstance(elem, str) and len(elem) == 1:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>elem
 *             elif isinstance(elem, int) and elem == -1:             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>-1
 *             else:
 */
          goto __pyx_L12;
        }

        /* "cpp_common.pxd":322
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>-1
 *             else:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(elem)             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         free(s_proc.data)
 */
        __Pyx_TraceLine(322,0,__PYX_ERR(1, 322, __pyx_L4_error))
        /*else*/ {
          __pyx_t_12 = PyObject_Hash(__pyx_v_elem); if (unlikely(__pyx_t_12 == ((Py_hash_t)-1))) __PYX_ERR(1, 322, __pyx_L4_error)
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)__pyx_t_12);
        }
        __pyx_L12:;
      }

      /* "cpp_common.pxd":312
 *         raise MemoryError
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         s_proc.kind = RF_StringType.RF_UINT64
 *         for i in range(s_proc.length):
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "cpp_common.pxd":323
 *             else:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(elem)
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         free(s_proc.data)
 *         s_proc.data = NULL
 */
    __Pyx_TraceLine(323,0,__PYX_ERR(1, 323, __pyx_L6_except_error))
    __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_13) {
      __Pyx_AddTraceback("cpp_common.hash_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_14, &__pyx_t_15) < 0) __PYX_ERR(1, 323, __pyx_L6_except_error)
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_14);
      __pyx_v_e = __pyx_t_14;
      /*try:*/ {

        /* "cpp_common.pxd":324
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(elem)
 *     except Exception as e:
 *         free(s_proc.data)             # <<<<<<<<<<<<<<
 *         s_proc.data = NULL
 *         raise
 */
        __Pyx_TraceLine(324,0,__PYX_ERR(1, 324, __pyx_L22_error))
        free(__pyx_v_s_proc->data);

        /* "cpp_common.pxd":325
 *     except Exception as e:
 *         free(s_proc.data)
 *         s_proc.data = NULL             # <<<<<<<<<<<<<<
 *         raise
 * 
 */
        __Pyx_TraceLine(325,0,__PYX_ERR(1, 325, __pyx_L22_error))
        __pyx_v_s_proc->data = NULL;

        /* "cpp_common.pxd":326
 *         free(s_proc.data)
 *         s_proc.data = NULL
 *         raise             # <<<<<<<<<<<<<<
 * 
 *     s_proc.dtor = default_string_deinit
 */
        __Pyx_TraceLine(326,0,__PYX_ERR(1, 326, __pyx_L22_error))
        __Pyx_GIVEREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_ErrRestoreWithState(__pyx_t_9, __pyx_t_14, __pyx_t_15);
        __pyx_t_9 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; 
        __PYX_ERR(1, 326, __pyx_L22_error)
      }

      /* "cpp_common.pxd":323
 *             else:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(elem)
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         free(s_proc.data)
 *         s_proc.data = NULL
 */
      __Pyx_TraceLine(323,0,__PYX_ERR(1, 323, __pyx_L22_error))
      /*finally:*/ {
        __pyx_L22_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_22);
          __Pyx_XGOTREF(__pyx_t_23);
          __pyx_t_13 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_XGIVEREF(__pyx_t_22);
            __Pyx_XGIVEREF(__pyx_t_23);
            __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
          }
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_XGIVEREF(__pyx_t_19);
          __Pyx_XGIVEREF(__pyx_t_20);
          __Pyx_ErrRestore(__pyx_t_18, __pyx_t_19, __pyx_t_20);
          __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
          __pyx_lineno = __pyx_t_13; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_17;
          goto __pyx_L6_except_error;
        }
      }
    }
    goto __pyx_L6_except_error;

    /* "cpp_common.pxd":312
 *         raise MemoryError
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         s_proc.kind = RF_StringType.RF_UINT64
 *         for i in range(s_proc.length):
 */
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "cpp_common.pxd":328
 *         raise
 * 
 *     s_proc.dtor = default_string_deinit             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(328,0,__PYX_ERR(1, 328, __pyx_L1_error))
  __pyx_v_s_proc->dtor = default_string_deinit;

  /* "cpp_common.pxd":329
 * 
 *     s_proc.dtor = default_string_deinit
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline bool is_none(s) noexcept:
 */
  __Pyx_TraceLine(329,0,__PYX_ERR(1, 329, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cpp_common.pxd":304
 * 
 * 
 * cdef inline bool hash_sequence(seq, RF_String* s_proc) except False:             # <<<<<<<<<<<<<<
 *     s_proc.length = <int64_t>len(seq)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("cpp_common.hash_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_elem);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":331
 *     return True
 * 
 * cdef inline bool is_none(s) noexcept:             # <<<<<<<<<<<<<<
 *     if s is None or s is pandas_NA:
 *         return True
 */

static CYTHON_INLINE bool __pyx_f_10cpp_common_is_none(PyObject *__pyx_v_s) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_none", 1);
  __Pyx_TraceCall("is_none", __pyx_f[1], 331, 0, __PYX_ERR(1, 331, __pyx_L1_error));

  /* "cpp_common.pxd":332
 * 
 * cdef inline bool is_none(s) noexcept:
 *     if s is None or s is pandas_NA:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __Pyx_TraceLine(332,0,__PYX_ERR(1, 332, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v_s == Py_None);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pandas_NA); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = (__pyx_v_s == __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cpp_common.pxd":333
 * cdef inline bool is_none(s) noexcept:
 *     if s is None or s is pandas_NA:
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(s, float) and isnan(<double>s):
 */
    __Pyx_TraceLine(333,0,__PYX_ERR(1, 333, __pyx_L1_error))
    __pyx_r = 1;
    goto __pyx_L0;

    /* "cpp_common.pxd":332
 * 
 * cdef inline bool is_none(s) noexcept:
 *     if s is None or s is pandas_NA:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "cpp_common.pxd":335
 *         return True
 * 
 *     if isinstance(s, float) and isnan(<double>s):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __Pyx_TraceLine(335,0,__PYX_ERR(1, 335, __pyx_L1_error))
  __pyx_t_2 = PyFloat_Check(__pyx_v_s); 
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_s); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 335, __pyx_L1_error)
  try {
    __pyx_t_2 = std::isnan(((double)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 335, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cpp_common.pxd":336
 * 
 *     if isinstance(s, float) and isnan(<double>s):
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     return False
 */
    __Pyx_TraceLine(336,0,__PYX_ERR(1, 336, __pyx_L1_error))
    __pyx_r = 1;
    goto __pyx_L0;

    /* "cpp_common.pxd":335
 *         return True
 * 
 *     if isinstance(s, float) and isnan(<double>s):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "cpp_common.pxd":338
 *         return True
 * 
 *     return False             # <<<<<<<<<<<<<<
 * 
 * # todo we will probably want to clean up the various methods of
 */
  __Pyx_TraceLine(338,0,__PYX_ERR(1, 338, __pyx_L1_error))
  __pyx_r = 0;
  goto __pyx_L0;

  /* "cpp_common.pxd":331
 *     return True
 * 
 * cdef inline bool is_none(s) noexcept:             # <<<<<<<<<<<<<<
 *     if s is None or s is pandas_NA:
 *         return True
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cpp_common.is_none", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":343
 * # converting strings. This has to be done carefully, since especially with preprocessor functions
 * # the none check is often required before calling the preprocessing functions to keep the current behaviour
 * cdef inline bool conv_sequence_with_none(seq, RF_String* c_seq) except False:             # <<<<<<<<<<<<<<
 *     if is_valid_string(seq):
 *         c_seq[0] = move(convert_string(seq))
 */

static CYTHON_INLINE bool __pyx_f_10cpp_common_conv_sequence_with_none(PyObject *__pyx_v_seq, RF_String *__pyx_v_c_seq) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("conv_sequence_with_none", 1);
  __Pyx_TraceCall("conv_sequence_with_none", __pyx_f[1], 343, 0, __PYX_ERR(1, 343, __pyx_L1_error));

  /* "cpp_common.pxd":344
 * # the none check is often required before calling the preprocessing functions to keep the current behaviour
 * cdef inline bool conv_sequence_with_none(seq, RF_String* c_seq) except False:
 *     if is_valid_string(seq):             # <<<<<<<<<<<<<<
 *         c_seq[0] = move(convert_string(seq))
 *     elif is_none(seq):
 */
  __Pyx_TraceLine(344,0,__PYX_ERR(1, 344, __pyx_L1_error))
  try {
    __pyx_t_1 = is_valid_string(__pyx_v_seq);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 344, __pyx_L1_error)
  }
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cpp_common.pxd":345
 * cdef inline bool conv_sequence_with_none(seq, RF_String* c_seq) except False:
 *     if is_valid_string(seq):
 *         c_seq[0] = move(convert_string(seq))             # <<<<<<<<<<<<<<
 *     elif is_none(seq):
 *         c_seq.length = 0
 */
    __Pyx_TraceLine(345,0,__PYX_ERR(1, 345, __pyx_L1_error))
    (__pyx_v_c_seq[0]) = cython_std::move<RF_String>(convert_string(__pyx_v_seq));

    /* "cpp_common.pxd":344
 * # the none check is often required before calling the preprocessing functions to keep the current behaviour
 * cdef inline bool conv_sequence_with_none(seq, RF_String* c_seq) except False:
 *     if is_valid_string(seq):             # <<<<<<<<<<<<<<
 *         c_seq[0] = move(convert_string(seq))
 *     elif is_none(seq):
 */
    goto __pyx_L3;
  }

  /* "cpp_common.pxd":346
 *     if is_valid_string(seq):
 *         c_seq[0] = move(convert_string(seq))
 *     elif is_none(seq):             # <<<<<<<<<<<<<<
 *         c_seq.length = 0
 *         c_seq.data = NULL
 */
  __Pyx_TraceLine(346,0,__PYX_ERR(1, 346, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_seq) != 0);
  if (__pyx_t_2) {

    /* "cpp_common.pxd":347
 *         c_seq[0] = move(convert_string(seq))
 *     elif is_none(seq):
 *         c_seq.length = 0             # <<<<<<<<<<<<<<
 *         c_seq.data = NULL
 *     elif isinstance(seq, array):
 */
    __Pyx_TraceLine(347,0,__PYX_ERR(1, 347, __pyx_L1_error))
    __pyx_v_c_seq->length = 0;

    /* "cpp_common.pxd":348
 *     elif is_none(seq):
 *         c_seq.length = 0
 *         c_seq.data = NULL             # <<<<<<<<<<<<<<
 *     elif isinstance(seq, array):
 *         hash_array(seq, c_seq)
 */
    __Pyx_TraceLine(348,0,__PYX_ERR(1, 348, __pyx_L1_error))
    __pyx_v_c_seq->data = NULL;

    /* "cpp_common.pxd":346
 *     if is_valid_string(seq):
 *         c_seq[0] = move(convert_string(seq))
 *     elif is_none(seq):             # <<<<<<<<<<<<<<
 *         c_seq.length = 0
 *         c_seq.data = NULL
 */
    goto __pyx_L3;
  }

  /* "cpp_common.pxd":349
 *         c_seq.length = 0
 *         c_seq.data = NULL
 *     elif isinstance(seq, array):             # <<<<<<<<<<<<<<
 *         hash_array(seq, c_seq)
 *     else:
 */
  __Pyx_TraceLine(349,0,__PYX_ERR(1, 349, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_seq, __pyx_t_3); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(1, 349, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "cpp_common.pxd":350
 *         c_seq.data = NULL
 *     elif isinstance(seq, array):
 *         hash_array(seq, c_seq)             # <<<<<<<<<<<<<<
 *     else:
 *         hash_sequence(seq, c_seq)
 */
    __Pyx_TraceLine(350,0,__PYX_ERR(1, 350, __pyx_L1_error))
    __pyx_t_4 = __pyx_f_10cpp_common_hash_array(__pyx_v_seq, __pyx_v_c_seq); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(1, 350, __pyx_L1_error)

    /* "cpp_common.pxd":349
 *         c_seq.length = 0
 *         c_seq.data = NULL
 *     elif isinstance(seq, array):             # <<<<<<<<<<<<<<
 *         hash_array(seq, c_seq)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "cpp_common.pxd":352
 *         hash_array(seq, c_seq)
 *     else:
 *         hash_sequence(seq, c_seq)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
  __Pyx_TraceLine(352,0,__PYX_ERR(1, 352, __pyx_L1_error))
  /*else*/ {
    __pyx_t_4 = __pyx_f_10cpp_common_hash_sequence(__pyx_v_seq, __pyx_v_c_seq); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(1, 352, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cpp_common.pxd":354
 *         hash_sequence(seq, c_seq)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline RF_String conv_sequence(seq) except *:
 */
  __Pyx_TraceLine(354,0,__PYX_ERR(1, 354, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cpp_common.pxd":343
 * # converting strings. This has to be done carefully, since especially with preprocessor functions
 * # the none check is often required before calling the preprocessing functions to keep the current behaviour
 * cdef inline bool conv_sequence_with_none(seq, RF_String* c_seq) except False:             # <<<<<<<<<<<<<<
 *     if is_valid_string(seq):
 *         c_seq[0] = move(convert_string(seq))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpp_common.conv_sequence_with_none", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":356
 *     return True
 * 
 * cdef inline RF_String conv_sequence(seq) except *:             # <<<<<<<<<<<<<<
 *     cdef RF_String c_seq
 *     if is_valid_string(seq):
 */

static CYTHON_INLINE RF_String __pyx_f_10cpp_common_conv_sequence(PyObject *__pyx_v_seq) {
  RF_String __pyx_v_c_seq;
  RF_String __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("conv_sequence", 1);
  __Pyx_TraceCall("conv_sequence", __pyx_f[1], 356, 0, __PYX_ERR(1, 356, __pyx_L1_error));

  /* "cpp_common.pxd":358
 * cdef inline RF_String conv_sequence(seq) except *:
 *     cdef RF_String c_seq
 *     if is_valid_string(seq):             # <<<<<<<<<<<<<<
 *         c_seq = move(convert_string(seq))
 *     elif isinstance(seq, array):
 */
  __Pyx_TraceLine(358,0,__PYX_ERR(1, 358, __pyx_L1_error))
  try {
    __pyx_t_1 = is_valid_string(__pyx_v_seq);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 358, __pyx_L1_error)
  }
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cpp_common.pxd":359
 *     cdef RF_String c_seq
 *     if is_valid_string(seq):
 *         c_seq = move(convert_string(seq))             # <<<<<<<<<<<<<<
 *     elif isinstance(seq, array):
 *         hash_array(seq, &c_seq)
 */
    __Pyx_TraceLine(359,0,__PYX_ERR(1, 359, __pyx_L1_error))
    __pyx_v_c_seq = cython_std::move<RF_String>(convert_string(__pyx_v_seq));

    /* "cpp_common.pxd":358
 * cdef inline RF_String conv_sequence(seq) except *:
 *     cdef RF_String c_seq
 *     if is_valid_string(seq):             # <<<<<<<<<<<<<<
 *         c_seq = move(convert_string(seq))
 *     elif isinstance(seq, array):
 */
    goto __pyx_L3;
  }

  /* "cpp_common.pxd":360
 *     if is_valid_string(seq):
 *         c_seq = move(convert_string(seq))
 *     elif isinstance(seq, array):             # <<<<<<<<<<<<<<
 *         hash_array(seq, &c_seq)
 *     else:
 */
  __Pyx_TraceLine(360,0,__PYX_ERR(1, 360, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_seq, __pyx_t_3); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(1, 360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "cpp_common.pxd":361
 *         c_seq = move(convert_string(seq))
 *     elif isinstance(seq, array):
 *         hash_array(seq, &c_seq)             # <<<<<<<<<<<<<<
 *     else:
 *         hash_sequence(seq, &c_seq)
 */
    __Pyx_TraceLine(361,0,__PYX_ERR(1, 361, __pyx_L1_error))
    __pyx_t_4 = __pyx_f_10cpp_common_hash_array(__pyx_v_seq, (&__pyx_v_c_seq)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(1, 361, __pyx_L1_error)

    /* "cpp_common.pxd":360
 *     if is_valid_string(seq):
 *         c_seq = move(convert_string(seq))
 *     elif isinstance(seq, array):             # <<<<<<<<<<<<<<
 *         hash_array(seq, &c_seq)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "cpp_common.pxd":363
 *         hash_array(seq, &c_seq)
 *     else:
 *         hash_sequence(seq, &c_seq)             # <<<<<<<<<<<<<<
 * 
 *     return move(c_seq)
 */
  __Pyx_TraceLine(363,0,__PYX_ERR(1, 363, __pyx_L1_error))
  /*else*/ {
    __pyx_t_4 = __pyx_f_10cpp_common_hash_sequence(__pyx_v_seq, (&__pyx_v_c_seq)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(1, 363, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cpp_common.pxd":365
 *         hash_sequence(seq, &c_seq)
 * 
 *     return move(c_seq)             # <<<<<<<<<<<<<<
 * 
 * cdef inline double get_score_cutoff_f64(score_cutoff, float worst_score, float optimal_score) except *:
 */
  __Pyx_TraceLine(365,0,__PYX_ERR(1, 365, __pyx_L1_error))
  __pyx_r = cython_std::move<RF_String>(__pyx_v_c_seq);
  goto __pyx_L0;

  /* "cpp_common.pxd":356
 *     return True
 * 
 * cdef inline RF_String conv_sequence(seq) except *:             # <<<<<<<<<<<<<<
 *     cdef RF_String c_seq
 *     if is_valid_string(seq):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpp_common.conv_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":367
 *     return move(c_seq)
 * 
 * cdef inline double get_score_cutoff_f64(score_cutoff, float worst_score, float optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef float c_score_cutoff = worst_score
 * 
 */

static CYTHON_INLINE double __pyx_f_10cpp_common_get_score_cutoff_f64(PyObject *__pyx_v_score_cutoff, float __pyx_v_worst_score, float __pyx_v_optimal_score) {
  float __pyx_v_c_score_cutoff;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  float __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_score_cutoff_f64", 1);
  __Pyx_TraceCall("get_score_cutoff_f64", __pyx_f[1], 367, 0, __PYX_ERR(1, 367, __pyx_L1_error));

  /* "cpp_common.pxd":368
 * 
 * cdef inline double get_score_cutoff_f64(score_cutoff, float worst_score, float optimal_score) except *:
 *     cdef float c_score_cutoff = worst_score             # <<<<<<<<<<<<<<
 * 
 *     if score_cutoff is not None:
 */
  __Pyx_TraceLine(368,0,__PYX_ERR(1, 368, __pyx_L1_error))
  __pyx_v_c_score_cutoff = __pyx_v_worst_score;

  /* "cpp_common.pxd":370
 *     cdef float c_score_cutoff = worst_score
 * 
 *     if score_cutoff is not None:             # <<<<<<<<<<<<<<
 *         c_score_cutoff = score_cutoff
 *         if optimal_score > worst_score:
 */
  __Pyx_TraceLine(370,0,__PYX_ERR(1, 370, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_score_cutoff != Py_None);
  if (__pyx_t_1) {

    /* "cpp_common.pxd":371
 * 
 *     if score_cutoff is not None:
 *         c_score_cutoff = score_cutoff             # <<<<<<<<<<<<<<
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 */
    __Pyx_TraceLine(371,0,__PYX_ERR(1, 371, __pyx_L1_error))
    __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_v_score_cutoff); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 371, __pyx_L1_error)
    __pyx_v_c_score_cutoff = __pyx_t_2;

    /* "cpp_common.pxd":372
 *     if score_cutoff is not None:
 *         c_score_cutoff = score_cutoff
 *         if optimal_score > worst_score:             # <<<<<<<<<<<<<<
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 */
    __Pyx_TraceLine(372,0,__PYX_ERR(1, 372, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_optimal_score > __pyx_v_worst_score);
    if (__pyx_t_1) {

      /* "cpp_common.pxd":374
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError("score_cutoff has to be in the range of %s - %s" % (worst_score, optimal_score))
 *         else:
 */
      __Pyx_TraceLine(374,0,__PYX_ERR(1, 374, __pyx_L1_error))
      __pyx_t_3 = (__pyx_v_c_score_cutoff < __pyx_v_worst_score);
      if (!__pyx_t_3) {
      } else {
        __pyx_t_1 = __pyx_t_3;
        goto __pyx_L6_bool_binop_done;
      }
      __pyx_t_3 = (__pyx_v_c_score_cutoff > __pyx_v_optimal_score);
      __pyx_t_1 = __pyx_t_3;
      __pyx_L6_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "cpp_common.pxd":375
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 *                 raise TypeError("score_cutoff has to be in the range of %s - %s" % (worst_score, optimal_score))             # <<<<<<<<<<<<<<
 *         else:
 *             # e.g. DBL_MAX - 0
 */
        __Pyx_TraceLine(375,0,__PYX_ERR(1, 375, __pyx_L1_error))
        __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = 0;
        __pyx_t_6 = 127;
        __Pyx_INCREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_5 += 39;
        __Pyx_GIVEREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_7 = PyFloat_FromDouble(__pyx_v_worst_score); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_t_7), __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_kp_u_);
        __pyx_t_5 += 3;
        __Pyx_GIVEREF(__pyx_kp_u_);
        PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_);
        __pyx_t_8 = PyFloat_FromDouble(__pyx_v_optimal_score); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_t_8), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_4, 4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 375, __pyx_L1_error)

        /* "cpp_common.pxd":374
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError("score_cutoff has to be in the range of %s - %s" % (worst_score, optimal_score))
 *         else:
 */
      }

      /* "cpp_common.pxd":372
 *     if score_cutoff is not None:
 *         c_score_cutoff = score_cutoff
 *         if optimal_score > worst_score:             # <<<<<<<<<<<<<<
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 */
      goto __pyx_L4;
    }

    /* "cpp_common.pxd":378
 *         else:
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 */
    __Pyx_TraceLine(378,0,__PYX_ERR(1, 378, __pyx_L1_error))
    /*else*/ {
      __pyx_t_3 = (__pyx_v_c_score_cutoff > __pyx_v_worst_score);
      if (!__pyx_t_3) {
      } else {
        __pyx_t_1 = __pyx_t_3;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_3 = (__pyx_v_c_score_cutoff < __pyx_v_optimal_score);
      __pyx_t_1 = __pyx_t_3;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "cpp_common.pxd":379
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")             # <<<<<<<<<<<<<<
 * 
 *     return c_score_cutoff
 */
        __Pyx_TraceLine(379,0,__PYX_ERR(1, 379, __pyx_L1_error))
        __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 379, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = 0;
        __pyx_t_6 = 127;
        __Pyx_INCREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_5 += 39;
        __Pyx_GIVEREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_7 = PyFloat_FromDouble(__pyx_v_optimal_score); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 379, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 379, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_kp_u_);
        __pyx_t_5 += 3;
        __Pyx_GIVEREF(__pyx_kp_u_);
        PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_);
        __pyx_t_8 = PyFloat_FromDouble(__pyx_v_worst_score); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 379, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 379, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_4, 4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 379, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 379, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 379, __pyx_L1_error)

        /* "cpp_common.pxd":378
 *         else:
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 */
      }
    }
    __pyx_L4:;

    /* "cpp_common.pxd":370
 *     cdef float c_score_cutoff = worst_score
 * 
 *     if score_cutoff is not None:             # <<<<<<<<<<<<<<
 *         c_score_cutoff = score_cutoff
 *         if optimal_score > worst_score:
 */
  }

  /* "cpp_common.pxd":381
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 *     return c_score_cutoff             # <<<<<<<<<<<<<<
 * 
 * cdef inline int64_t get_score_cutoff_i64(score_cutoff, int64_t worst_score, int64_t optimal_score) except *:
 */
  __Pyx_TraceLine(381,0,__PYX_ERR(1, 381, __pyx_L1_error))
  __pyx_r = __pyx_v_c_score_cutoff;
  goto __pyx_L0;

  /* "cpp_common.pxd":367
 *     return move(c_seq)
 * 
 * cdef inline double get_score_cutoff_f64(score_cutoff, float worst_score, float optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef float c_score_cutoff = worst_score
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cpp_common.get_score_cutoff_f64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":383
 *     return c_score_cutoff
 * 
 * cdef inline int64_t get_score_cutoff_i64(score_cutoff, int64_t worst_score, int64_t optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef int64_t c_score_cutoff = worst_score
 * 
 */

static CYTHON_INLINE int64_t __pyx_f_10cpp_common_get_score_cutoff_i64(PyObject *__pyx_v_score_cutoff, int64_t __pyx_v_worst_score, int64_t __pyx_v_optimal_score) {
  int64_t __pyx_v_c_score_cutoff;
  int64_t __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_score_cutoff_i64", 1);
  __Pyx_TraceCall("get_score_cutoff_i64", __pyx_f[1], 383, 0, __PYX_ERR(1, 383, __pyx_L1_error));

  /* "cpp_common.pxd":384
 * 
 * cdef inline int64_t get_score_cutoff_i64(score_cutoff, int64_t worst_score, int64_t optimal_score) except *:
 *     cdef int64_t c_score_cutoff = worst_score             # <<<<<<<<<<<<<<
 * 
 *     if score_cutoff is not None:
 */
  __Pyx_TraceLine(384,0,__PYX_ERR(1, 384, __pyx_L1_error))
  __pyx_v_c_score_cutoff = __pyx_v_worst_score;

  /* "cpp_common.pxd":386
 *     cdef int64_t c_score_cutoff = worst_score
 * 
 *     if score_cutoff is not None:             # <<<<<<<<<<<<<<
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 */
  __Pyx_TraceLine(386,0,__PYX_ERR(1, 386, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_score_cutoff != Py_None);
  if (__pyx_t_1) {

    /* "cpp_common.pxd":387
 * 
 *     if score_cutoff is not None:
 *         if optimal_score > worst_score:             # <<<<<<<<<<<<<<
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 */
    __Pyx_TraceLine(387,0,__PYX_ERR(1, 387, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_optimal_score > __pyx_v_worst_score);
    if (__pyx_t_1) {

      /* "cpp_common.pxd":389
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {worst_score} - {optimal_score}")
 *         else:
 */
      __Pyx_TraceLine(389,0,__PYX_ERR(1, 389, __pyx_L1_error))
      __pyx_t_2 = (__pyx_v_c_score_cutoff < __pyx_v_worst_score);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L6_bool_binop_done;
      }
      __pyx_t_2 = (__pyx_v_c_score_cutoff > __pyx_v_optimal_score);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L6_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "cpp_common.pxd":390
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 *                 raise TypeError(f"score_cutoff has to be in the range of {worst_score} - {optimal_score}")             # <<<<<<<<<<<<<<
 *         else:
 *             # e.g. DBL_MAX - 0
 */
        __Pyx_TraceLine(390,0,__PYX_ERR(1, 390, __pyx_L1_error))
        __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = 0;
        __pyx_t_5 = 127;
        __Pyx_INCREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_4 += 39;
        __Pyx_GIVEREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_6 = __Pyx_PyInt_From_int64_t(__pyx_v_worst_score); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
        __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_);
        __pyx_t_4 += 3;
        __Pyx_GIVEREF(__pyx_kp_u_);
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_);
        __pyx_t_7 = __Pyx_PyInt_From_int64_t(__pyx_v_optimal_score); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
        __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_3, 4, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(1, 390, __pyx_L1_error)

        /* "cpp_common.pxd":389
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {worst_score} - {optimal_score}")
 *         else:
 */
      }

      /* "cpp_common.pxd":387
 * 
 *     if score_cutoff is not None:
 *         if optimal_score > worst_score:             # <<<<<<<<<<<<<<
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 */
      goto __pyx_L4;
    }

    /* "cpp_common.pxd":393
 *         else:
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 */
    __Pyx_TraceLine(393,0,__PYX_ERR(1, 393, __pyx_L1_error))
    /*else*/ {
      __pyx_t_2 = (__pyx_v_c_score_cutoff > __pyx_v_worst_score);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_2 = (__pyx_v_c_score_cutoff < __pyx_v_optimal_score);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "cpp_common.pxd":394
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")             # <<<<<<<<<<<<<<
 * 
 *     return c_score_cutoff
 */
        __Pyx_TraceLine(394,0,__PYX_ERR(1, 394, __pyx_L1_error))
        __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = 0;
        __pyx_t_5 = 127;
        __Pyx_INCREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_4 += 39;
        __Pyx_GIVEREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_6 = __Pyx_PyInt_From_int64_t(__pyx_v_optimal_score); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
        __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_);
        __pyx_t_4 += 3;
        __Pyx_GIVEREF(__pyx_kp_u_);
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_);
        __pyx_t_7 = __Pyx_PyInt_From_int64_t(__pyx_v_worst_score); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
        __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_3, 4, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(1, 394, __pyx_L1_error)

        /* "cpp_common.pxd":393
 *         else:
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 */
      }
    }
    __pyx_L4:;

    /* "cpp_common.pxd":386
 *     cdef int64_t c_score_cutoff = worst_score
 * 
 *     if score_cutoff is not None:             # <<<<<<<<<<<<<<
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 */
  }

  /* "cpp_common.pxd":396
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 *     return c_score_cutoff             # <<<<<<<<<<<<<<
 * 
 * cdef inline size_t get_score_cutoff_size_t(score_cutoff, size_t worst_score, size_t optimal_score) except *:
 */
  __Pyx_TraceLine(396,0,__PYX_ERR(1, 396, __pyx_L1_error))
  __pyx_r = __pyx_v_c_score_cutoff;
  goto __pyx_L0;

  /* "cpp_common.pxd":383
 *     return c_score_cutoff
 * 
 * cdef inline int64_t get_score_cutoff_i64(score_cutoff, int64_t worst_score, int64_t optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef int64_t c_score_cutoff = worst_score
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cpp_common.get_score_cutoff_i64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":398
 *     return c_score_cutoff
 * 
 * cdef inline size_t get_score_cutoff_size_t(score_cutoff, size_t worst_score, size_t optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef uint64_t c_score_cutoff = worst_score
 * 
 */

static CYTHON_INLINE size_t __pyx_f_10cpp_common_get_score_cutoff_size_t(PyObject *__pyx_v_score_cutoff, size_t __pyx_v_worst_score, size_t __pyx_v_optimal_score) {
  uint64_t __pyx_v_c_score_cutoff;
  size_t __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  uint64_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_score_cutoff_size_t", 1);
  __Pyx_TraceCall("get_score_cutoff_size_t", __pyx_f[1], 398, 0, __PYX_ERR(1, 398, __pyx_L1_error));

  /* "cpp_common.pxd":399
 * 
 * cdef inline size_t get_score_cutoff_size_t(score_cutoff, size_t worst_score, size_t optimal_score) except *:
 *     cdef uint64_t c_score_cutoff = worst_score             # <<<<<<<<<<<<<<
 * 
 *     if score_cutoff is not None:
 */
  __Pyx_TraceLine(399,0,__PYX_ERR(1, 399, __pyx_L1_error))
  __pyx_v_c_score_cutoff = __pyx_v_worst_score;

  /* "cpp_common.pxd":401
 *     cdef uint64_t c_score_cutoff = worst_score
 * 
 *     if score_cutoff is not None:             # <<<<<<<<<<<<<<
 *         c_score_cutoff = score_cutoff
 *         if c_score_cutoff > SIZE_MAX:
 */
  __Pyx_TraceLine(401,0,__PYX_ERR(1, 401, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_score_cutoff != Py_None);
  if (__pyx_t_1) {

    /* "cpp_common.pxd":402
 * 
 *     if score_cutoff is not None:
 *         c_score_cutoff = score_cutoff             # <<<<<<<<<<<<<<
 *         if c_score_cutoff > SIZE_MAX:
 *             c_score_cutoff = SIZE_MAX
 */
    __Pyx_TraceLine(402,0,__PYX_ERR(1, 402, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_v_score_cutoff); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 402, __pyx_L1_error)
    __pyx_v_c_score_cutoff = __pyx_t_2;

    /* "cpp_common.pxd":403
 *     if score_cutoff is not None:
 *         c_score_cutoff = score_cutoff
 *         if c_score_cutoff > SIZE_MAX:             # <<<<<<<<<<<<<<
 *             c_score_cutoff = SIZE_MAX
 * 
 */
    __Pyx_TraceLine(403,0,__PYX_ERR(1, 403, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_c_score_cutoff > SIZE_MAX);
    if (__pyx_t_1) {

      /* "cpp_common.pxd":404
 *         c_score_cutoff = score_cutoff
 *         if c_score_cutoff > SIZE_MAX:
 *             c_score_cutoff = SIZE_MAX             # <<<<<<<<<<<<<<
 * 
 *         if optimal_score > worst_score:
 */
      __Pyx_TraceLine(404,0,__PYX_ERR(1, 404, __pyx_L1_error))
      __pyx_v_c_score_cutoff = SIZE_MAX;

      /* "cpp_common.pxd":403
 *     if score_cutoff is not None:
 *         c_score_cutoff = score_cutoff
 *         if c_score_cutoff > SIZE_MAX:             # <<<<<<<<<<<<<<
 *             c_score_cutoff = SIZE_MAX
 * 
 */
    }

    /* "cpp_common.pxd":406
 *             c_score_cutoff = SIZE_MAX
 * 
 *         if optimal_score > worst_score:             # <<<<<<<<<<<<<<
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 */
    __Pyx_TraceLine(406,0,__PYX_ERR(1, 406, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_optimal_score > __pyx_v_worst_score);
    if (__pyx_t_1) {

      /* "cpp_common.pxd":408
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {worst_score} - {optimal_score}")
 *         else:
 */
      __Pyx_TraceLine(408,0,__PYX_ERR(1, 408, __pyx_L1_error))
      __pyx_t_3 = (__pyx_v_c_score_cutoff < __pyx_v_worst_score);
      if (!__pyx_t_3) {
      } else {
        __pyx_t_1 = __pyx_t_3;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_3 = (__pyx_v_c_score_cutoff > __pyx_v_optimal_score);
      __pyx_t_1 = __pyx_t_3;
      __pyx_L7_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "cpp_common.pxd":409
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 *                 raise TypeError(f"score_cutoff has to be in the range of {worst_score} - {optimal_score}")             # <<<<<<<<<<<<<<
 *         else:
 *             # e.g. DBL_MAX - 0
 */
        __Pyx_TraceLine(409,0,__PYX_ERR(1, 409, __pyx_L1_error))
        __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = 0;
        __pyx_t_6 = 127;
        __Pyx_INCREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_5 += 39;
        __Pyx_GIVEREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_7 = __Pyx_PyUnicode_From_size_t(__pyx_v_worst_score, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_);
        __pyx_t_5 += 3;
        __Pyx_GIVEREF(__pyx_kp_u_);
        PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_);
        __pyx_t_7 = __Pyx_PyUnicode_From_size_t(__pyx_v_optimal_score, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_4, 4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 409, __pyx_L1_error)

        /* "cpp_common.pxd":408
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {worst_score} - {optimal_score}")
 *         else:
 */
      }

      /* "cpp_common.pxd":406
 *             c_score_cutoff = SIZE_MAX
 * 
 *         if optimal_score > worst_score:             # <<<<<<<<<<<<<<
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 */
      goto __pyx_L5;
    }

    /* "cpp_common.pxd":412
 *         else:
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 */
    __Pyx_TraceLine(412,0,__PYX_ERR(1, 412, __pyx_L1_error))
    /*else*/ {
      __pyx_t_3 = (__pyx_v_c_score_cutoff > __pyx_v_worst_score);
      if (!__pyx_t_3) {
      } else {
        __pyx_t_1 = __pyx_t_3;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_3 = (__pyx_v_c_score_cutoff < __pyx_v_optimal_score);
      __pyx_t_1 = __pyx_t_3;
      __pyx_L10_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "cpp_common.pxd":413
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")             # <<<<<<<<<<<<<<
 * 
 *     return <size_t>c_score_cutoff
 */
        __Pyx_TraceLine(413,0,__PYX_ERR(1, 413, __pyx_L1_error))
        __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 413, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = 0;
        __pyx_t_6 = 127;
        __Pyx_INCREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_5 += 39;
        __Pyx_GIVEREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_7 = __Pyx_PyUnicode_From_size_t(__pyx_v_optimal_score, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 413, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_);
        __pyx_t_5 += 3;
        __Pyx_GIVEREF(__pyx_kp_u_);
        PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_);
        __pyx_t_7 = __Pyx_PyUnicode_From_size_t(__pyx_v_worst_score, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 413, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_4, 4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 413, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 413, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 413, __pyx_L1_error)

        /* "cpp_common.pxd":412
 *         else:
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 */
      }
    }
    __pyx_L5:;

    /* "cpp_common.pxd":401
 *     cdef uint64_t c_score_cutoff = worst_score
 * 
 *     if score_cutoff is not None:             # <<<<<<<<<<<<<<
 *         c_score_cutoff = score_cutoff
 *         if c_score_cutoff > SIZE_MAX:
 */
  }

  /* "cpp_common.pxd":415
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 *     return <size_t>c_score_cutoff             # <<<<<<<<<<<<<<
 * 
 * cdef inline bool preprocess_strings(s1, s2, processor, RF_StringWrapper* s1_proc, RF_StringWrapper* s2_proc) except False:
 */
  __Pyx_TraceLine(415,0,__PYX_ERR(1, 415, __pyx_L1_error))
  __pyx_r = ((size_t)__pyx_v_c_score_cutoff);
  goto __pyx_L0;

  /* "cpp_common.pxd":398
 *     return c_score_cutoff
 * 
 * cdef inline size_t get_score_cutoff_size_t(score_cutoff, size_t worst_score, size_t optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef uint64_t c_score_cutoff = worst_score
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cpp_common.get_score_cutoff_size_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":417
 *     return <size_t>c_score_cutoff
 * 
 * cdef inline bool preprocess_strings(s1, s2, processor, RF_StringWrapper* s1_proc, RF_StringWrapper* s2_proc) except False:             # <<<<<<<<<<<<<<
 *     cdef RF_Preprocessor* preprocess_context = NULL
 * 
 */

static CYTHON_INLINE bool __pyx_f_10cpp_common_preprocess_strings(PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, RF_StringWrapper *__pyx_v_s1_proc, RF_StringWrapper *__pyx_v_s2_proc) {
  RF_Preprocessor *__pyx_v_preprocess_context;
  PyObject *__pyx_v_processor_capsule = NULL;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  RF_String __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  void *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  unsigned int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("preprocess_strings", 0);
  __Pyx_TraceCall("preprocess_strings", __pyx_f[1], 417, 0, __PYX_ERR(1, 417, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_s1);
  __Pyx_INCREF(__pyx_v_s2);

  /* "cpp_common.pxd":418
 * 
 * cdef inline bool preprocess_strings(s1, s2, processor, RF_StringWrapper* s1_proc, RF_StringWrapper* s2_proc) except False:
 *     cdef RF_Preprocessor* preprocess_context = NULL             # <<<<<<<<<<<<<<
 * 
 *     if not processor:
 */
  __Pyx_TraceLine(418,0,__PYX_ERR(1, 418, __pyx_L1_error))
  __pyx_v_preprocess_context = NULL;

  /* "cpp_common.pxd":420
 *     cdef RF_Preprocessor* preprocess_context = NULL
 * 
 *     if not processor:             # <<<<<<<<<<<<<<
 *         s1_proc[0] = RF_StringWrapper(conv_sequence(s1))
 *         s2_proc[0] = RF_StringWrapper(conv_sequence(s2))
 */
  __Pyx_TraceLine(420,0,__PYX_ERR(1, 420, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_processor); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 420, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "cpp_common.pxd":421
 * 
 *     if not processor:
 *         s1_proc[0] = RF_StringWrapper(conv_sequence(s1))             # <<<<<<<<<<<<<<
 *         s2_proc[0] = RF_StringWrapper(conv_sequence(s2))
 *     else:
 */
    __Pyx_TraceLine(421,0,__PYX_ERR(1, 421, __pyx_L1_error))
    __pyx_t_3 = __pyx_f_10cpp_common_conv_sequence(__pyx_v_s1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 421, __pyx_L1_error)
    (__pyx_v_s1_proc[0]) = RF_StringWrapper(__pyx_t_3);

    /* "cpp_common.pxd":422
 *     if not processor:
 *         s1_proc[0] = RF_StringWrapper(conv_sequence(s1))
 *         s2_proc[0] = RF_StringWrapper(conv_sequence(s2))             # <<<<<<<<<<<<<<
 *     else:
 *         processor_capsule = getattr(processor, '_RF_Preprocess', processor)
 */
    __Pyx_TraceLine(422,0,__PYX_ERR(1, 422, __pyx_L1_error))
    __pyx_t_3 = __pyx_f_10cpp_common_conv_sequence(__pyx_v_s2); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 422, __pyx_L1_error)
    (__pyx_v_s2_proc[0]) = RF_StringWrapper(__pyx_t_3);

    /* "cpp_common.pxd":420
 *     cdef RF_Preprocessor* preprocess_context = NULL
 * 
 *     if not processor:             # <<<<<<<<<<<<<<
 *         s1_proc[0] = RF_StringWrapper(conv_sequence(s1))
 *         s2_proc[0] = RF_StringWrapper(conv_sequence(s2))
 */
    goto __pyx_L3;
  }

  /* "cpp_common.pxd":424
 *         s2_proc[0] = RF_StringWrapper(conv_sequence(s2))
 *     else:
 *         processor_capsule = getattr(processor, '_RF_Preprocess', processor)             # <<<<<<<<<<<<<<
 *         if PyCapsule_IsValid(processor_capsule, NULL):
 *             preprocess_context = <RF_Preprocessor*>PyCapsule_GetPointer(processor_capsule, NULL)
 */
  __Pyx_TraceLine(424,0,__PYX_ERR(1, 424, __pyx_L1_error))
  /*else*/ {
    __pyx_t_4 = __Pyx_GetAttr3(__pyx_v_processor, __pyx_n_u_RF_Preprocess, __pyx_v_processor); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_processor_capsule = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "cpp_common.pxd":425
 *     else:
 *         processor_capsule = getattr(processor, '_RF_Preprocess', processor)
 *         if PyCapsule_IsValid(processor_capsule, NULL):             # <<<<<<<<<<<<<<
 *             preprocess_context = <RF_Preprocessor*>PyCapsule_GetPointer(processor_capsule, NULL)
 * 
 */
    __Pyx_TraceLine(425,0,__PYX_ERR(1, 425, __pyx_L1_error))
    __pyx_t_2 = PyCapsule_IsValid(__pyx_v_processor_capsule, NULL);
    if (__pyx_t_2) {

      /* "cpp_common.pxd":426
 *         processor_capsule = getattr(processor, '_RF_Preprocess', processor)
 *         if PyCapsule_IsValid(processor_capsule, NULL):
 *             preprocess_context = <RF_Preprocessor*>PyCapsule_GetPointer(processor_capsule, NULL)             # <<<<<<<<<<<<<<
 * 
 *         if preprocess_context != NULL and preprocess_context.version == 1:
 */
      __Pyx_TraceLine(426,0,__PYX_ERR(1, 426, __pyx_L1_error))
      __pyx_t_5 = PyCapsule_GetPointer(__pyx_v_processor_capsule, NULL); if (unlikely(__pyx_t_5 == ((void *)NULL) && PyErr_Occurred())) __PYX_ERR(1, 426, __pyx_L1_error)
      __pyx_v_preprocess_context = ((RF_Preprocessor *)__pyx_t_5);

      /* "cpp_common.pxd":425
 *     else:
 *         processor_capsule = getattr(processor, '_RF_Preprocess', processor)
 *         if PyCapsule_IsValid(processor_capsule, NULL):             # <<<<<<<<<<<<<<
 *             preprocess_context = <RF_Preprocessor*>PyCapsule_GetPointer(processor_capsule, NULL)
 * 
 */
    }

    /* "cpp_common.pxd":428
 *             preprocess_context = <RF_Preprocessor*>PyCapsule_GetPointer(processor_capsule, NULL)
 * 
 *         if preprocess_context != NULL and preprocess_context.version == 1:             # <<<<<<<<<<<<<<
 *             preprocess_context.preprocess(s1, &(s1_proc[0].string))
 *             preprocess_context.preprocess(s2, &(s2_proc[0].string))
 */
    __Pyx_TraceLine(428,0,__PYX_ERR(1, 428, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_preprocess_context != NULL);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = (__pyx_v_preprocess_context->version == 1);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_2) {

      /* "cpp_common.pxd":429
 * 
 *         if preprocess_context != NULL and preprocess_context.version == 1:
 *             preprocess_context.preprocess(s1, &(s1_proc[0].string))             # <<<<<<<<<<<<<<
 *             preprocess_context.preprocess(s2, &(s2_proc[0].string))
 *         else:
 */
      __Pyx_TraceLine(429,0,__PYX_ERR(1, 429, __pyx_L1_error))
      __pyx_t_6 = __pyx_v_preprocess_context->preprocess(__pyx_v_s1, (&(__pyx_v_s1_proc[0]).string)); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(1, 429, __pyx_L1_error)

      /* "cpp_common.pxd":430
 *         if preprocess_context != NULL and preprocess_context.version == 1:
 *             preprocess_context.preprocess(s1, &(s1_proc[0].string))
 *             preprocess_context.preprocess(s2, &(s2_proc[0].string))             # <<<<<<<<<<<<<<
 *         else:
 *             s1 = processor(s1)
 */
      __Pyx_TraceLine(430,0,__PYX_ERR(1, 430, __pyx_L1_error))
      __pyx_t_6 = __pyx_v_preprocess_context->preprocess(__pyx_v_s2, (&(__pyx_v_s2_proc[0]).string)); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(1, 430, __pyx_L1_error)

      /* "cpp_common.pxd":428
 *             preprocess_context = <RF_Preprocessor*>PyCapsule_GetPointer(processor_capsule, NULL)
 * 
 *         if preprocess_context != NULL and preprocess_context.version == 1:             # <<<<<<<<<<<<<<
 *             preprocess_context.preprocess(s1, &(s1_proc[0].string))
 *             preprocess_context.preprocess(s2, &(s2_proc[0].string))
 */
      goto __pyx_L5;
    }

    /* "cpp_common.pxd":432
 *             preprocess_context.preprocess(s2, &(s2_proc[0].string))
 *         else:
 *             s1 = processor(s1)             # <<<<<<<<<<<<<<
 *             s1_proc[0] = RF_StringWrapper(conv_sequence(s1), s1)
 *             s2 = processor(s2)
 */
    __Pyx_TraceLine(432,0,__PYX_ERR(1, 432, __pyx_L1_error))
    /*else*/ {
      __Pyx_INCREF(__pyx_v_processor);
      __pyx_t_7 = __pyx_v_processor; __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_9 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_s1};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 432, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF_SET(__pyx_v_s1, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "cpp_common.pxd":433
 *         else:
 *             s1 = processor(s1)
 *             s1_proc[0] = RF_StringWrapper(conv_sequence(s1), s1)             # <<<<<<<<<<<<<<
 *             s2 = processor(s2)
 *             s2_proc[0] = RF_StringWrapper(conv_sequence(s2), s2)
 */
      __Pyx_TraceLine(433,0,__PYX_ERR(1, 433, __pyx_L1_error))
      __pyx_t_3 = __pyx_f_10cpp_common_conv_sequence(__pyx_v_s1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 433, __pyx_L1_error)
      (__pyx_v_s1_proc[0]) = RF_StringWrapper(__pyx_t_3, __pyx_v_s1);

      /* "cpp_common.pxd":434
 *             s1 = processor(s1)
 *             s1_proc[0] = RF_StringWrapper(conv_sequence(s1), s1)
 *             s2 = processor(s2)             # <<<<<<<<<<<<<<
 *             s2_proc[0] = RF_StringWrapper(conv_sequence(s2), s2)
 * 
 */
      __Pyx_TraceLine(434,0,__PYX_ERR(1, 434, __pyx_L1_error))
      __Pyx_INCREF(__pyx_v_processor);
      __pyx_t_7 = __pyx_v_processor; __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_9 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_s2};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 434, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF_SET(__pyx_v_s2, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "cpp_common.pxd":435
 *             s1_proc[0] = RF_StringWrapper(conv_sequence(s1), s1)
 *             s2 = processor(s2)
 *             s2_proc[0] = RF_StringWrapper(conv_sequence(s2), s2)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
      __Pyx_TraceLine(435,0,__PYX_ERR(1, 435, __pyx_L1_error))
      __pyx_t_3 = __pyx_f_10cpp_common_conv_sequence(__pyx_v_s2); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 435, __pyx_L1_error)
      (__pyx_v_s2_proc[0]) = RF_StringWrapper(__pyx_t_3, __pyx_v_s2);
    }
    __pyx_L5:;
  }
  __pyx_L3:;

  /* "cpp_common.pxd":437
 *             s2_proc[0] = RF_StringWrapper(conv_sequence(s2), s2)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline bool NoKwargsInit(RF_Kwargs* self, dict kwargs) except False:
 */
  __Pyx_TraceLine(437,0,__PYX_ERR(1, 437, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cpp_common.pxd":417
 *     return <size_t>c_score_cutoff
 * 
 * cdef inline bool preprocess_strings(s1, s2, processor, RF_StringWrapper* s1_proc, RF_StringWrapper* s2_proc) except False:             # <<<<<<<<<<<<<<
 *     cdef RF_Preprocessor* preprocess_context = NULL
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cpp_common.preprocess_strings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_processor_capsule);
  __Pyx_XDECREF(__pyx_v_s1);
  __Pyx_XDECREF(__pyx_v_s2);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":439
 *     return True
 * 
 * cdef inline bool NoKwargsInit(RF_Kwargs* self, dict kwargs) except False:             # <<<<<<<<<<<<<<
 *     if len(kwargs):
 *         raise TypeError("Got unexpected keyword arguments: ", ", ".join(kwargs.keys()))
 */

static CYTHON_INLINE bool __pyx_f_10cpp_common_NoKwargsInit(RF_Kwargs *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("NoKwargsInit", 1);
  __Pyx_TraceCall("NoKwargsInit", __pyx_f[1], 439, 0, __PYX_ERR(1, 439, __pyx_L1_error));

  /* "cpp_common.pxd":440
 * 
 * cdef inline bool NoKwargsInit(RF_Kwargs* self, dict kwargs) except False:
 *     if len(kwargs):             # <<<<<<<<<<<<<<
 *         raise TypeError("Got unexpected keyword arguments: ", ", ".join(kwargs.keys()))
 * 
 */
  __Pyx_TraceLine(440,0,__PYX_ERR(1, 440, __pyx_L1_error))
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 440, __pyx_L1_error)
  }
  __pyx_t_1 = PyDict_Size(__pyx_v_kwargs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 440, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cpp_common.pxd":441
 * cdef inline bool NoKwargsInit(RF_Kwargs* self, dict kwargs) except False:
 *     if len(kwargs):
 *         raise TypeError("Got unexpected keyword arguments: ", ", ".join(kwargs.keys()))             # <<<<<<<<<<<<<<
 * 
 *     self.context = NULL
 */
    __Pyx_TraceLine(441,0,__PYX_ERR(1, 441, __pyx_L1_error))
    if (unlikely(__pyx_v_kwargs == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
      __PYX_ERR(1, 441, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_Keys(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyUnicode_Join(__pyx_kp_u__2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_kp_u_Got_unexpected_keyword_arguments);
    __Pyx_GIVEREF(__pyx_kp_u_Got_unexpected_keyword_arguments);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Got_unexpected_keyword_arguments)) __PYX_ERR(1, 441, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4)) __PYX_ERR(1, 441, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 441, __pyx_L1_error)

    /* "cpp_common.pxd":440
 * 
 * cdef inline bool NoKwargsInit(RF_Kwargs* self, dict kwargs) except False:
 *     if len(kwargs):             # <<<<<<<<<<<<<<
 *         raise TypeError("Got unexpected keyword arguments: ", ", ".join(kwargs.keys()))
 * 
 */
  }

  /* "cpp_common.pxd":443
 *         raise TypeError("Got unexpected keyword arguments: ", ", ".join(kwargs.keys()))
 * 
 *     self.context = NULL             # <<<<<<<<<<<<<<
 *     self.dtor = NULL
 *     return True
 */
  __Pyx_TraceLine(443,0,__PYX_ERR(1, 443, __pyx_L1_error))
  __pyx_v_self->context = NULL;

  /* "cpp_common.pxd":444
 * 
 *     self.context = NULL
 *     self.dtor = NULL             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(444,0,__PYX_ERR(1, 444, __pyx_L1_error))
  __pyx_v_self->dtor = NULL;

  /* "cpp_common.pxd":445
 *     self.context = NULL
 *     self.dtor = NULL
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline RF_Scorer CreateScorerContext(RF_KwargsInit kwargs_init, RF_GetScorerFlags get_scorer_flags, RF_ScorerFuncInit scorer_func_init, RF_UncachedScorerFunc uncached_scorer_func) noexcept:
 */
  __Pyx_TraceLine(445,0,__PYX_ERR(1, 445, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cpp_common.pxd":439
 *     return True
 * 
 * cdef inline bool NoKwargsInit(RF_Kwargs* self, dict kwargs) except False:             # <<<<<<<<<<<<<<
 *     if len(kwargs):
 *         raise TypeError("Got unexpected keyword arguments: ", ", ".join(kwargs.keys()))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cpp_common.NoKwargsInit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":447
 *     return True
 * 
 * cdef inline RF_Scorer CreateScorerContext(RF_KwargsInit kwargs_init, RF_GetScorerFlags get_scorer_flags, RF_ScorerFuncInit scorer_func_init, RF_UncachedScorerFunc uncached_scorer_func) noexcept:             # <<<<<<<<<<<<<<
 *     cdef RF_Scorer context
 *     context.version = SCORER_STRUCT_VERSION
 */

static CYTHON_INLINE RF_Scorer __pyx_f_10cpp_common_CreateScorerContext(RF_KwargsInit __pyx_v_kwargs_init, RF_GetScorerFlags __pyx_v_get_scorer_flags, RF_ScorerFuncInit __pyx_v_scorer_func_init, RF_UncachedScorerFunc __pyx_v_uncached_scorer_func) {
  RF_Scorer __pyx_v_context;
  RF_Scorer __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("CreateScorerContext", __pyx_f[1], 447, 0, __PYX_ERR(1, 447, __pyx_L1_error));

  /* "cpp_common.pxd":449
 * cdef inline RF_Scorer CreateScorerContext(RF_KwargsInit kwargs_init, RF_GetScorerFlags get_scorer_flags, RF_ScorerFuncInit scorer_func_init, RF_UncachedScorerFunc uncached_scorer_func) noexcept:
 *     cdef RF_Scorer context
 *     context.version = SCORER_STRUCT_VERSION             # <<<<<<<<<<<<<<
 *     context.kwargs_init = kwargs_init
 *     context.get_scorer_flags = get_scorer_flags
 */
  __Pyx_TraceLine(449,0,__PYX_ERR(1, 449, __pyx_L1_error))
  __pyx_v_context.version = SCORER_STRUCT_VERSION;

  /* "cpp_common.pxd":450
 *     cdef RF_Scorer context
 *     context.version = SCORER_STRUCT_VERSION
 *     context.kwargs_init = kwargs_init             # <<<<<<<<<<<<<<
 *     context.get_scorer_flags = get_scorer_flags
 *     context.scorer_func_init = scorer_func_init
 */
  __Pyx_TraceLine(450,0,__PYX_ERR(1, 450, __pyx_L1_error))
  __pyx_v_context.kwargs_init = __pyx_v_kwargs_init;

  /* "cpp_common.pxd":451
 *     context.version = SCORER_STRUCT_VERSION
 *     context.kwargs_init = kwargs_init
 *     context.get_scorer_flags = get_scorer_flags             # <<<<<<<<<<<<<<
 *     context.scorer_func_init = scorer_func_init
 *     context.uncached_scorer_func = uncached_scorer_func
 */
  __Pyx_TraceLine(451,0,__PYX_ERR(1, 451, __pyx_L1_error))
  __pyx_v_context.get_scorer_flags = __pyx_v_get_scorer_flags;

  /* "cpp_common.pxd":452
 *     context.kwargs_init = kwargs_init
 *     context.get_scorer_flags = get_scorer_flags
 *     context.scorer_func_init = scorer_func_init             # <<<<<<<<<<<<<<
 *     context.uncached_scorer_func = uncached_scorer_func
 *     return context
 */
  __Pyx_TraceLine(452,0,__PYX_ERR(1, 452, __pyx_L1_error))
  __pyx_v_context.scorer_func_init = __pyx_v_scorer_func_init;

  /* "cpp_common.pxd":453
 *     context.get_scorer_flags = get_scorer_flags
 *     context.scorer_func_init = scorer_func_init
 *     context.uncached_scorer_func = uncached_scorer_func             # <<<<<<<<<<<<<<
 *     return context
 * 
 */
  __Pyx_TraceLine(453,0,__PYX_ERR(1, 453, __pyx_L1_error))
  __pyx_v_context.uncached_scorer_func = __pyx_v_uncached_scorer_func;

  /* "cpp_common.pxd":454
 *     context.scorer_func_init = scorer_func_init
 *     context.uncached_scorer_func = uncached_scorer_func
 *     return context             # <<<<<<<<<<<<<<
 * 
 * cdef inline void SetFuncAttrs(cpp_func, py_func) except *:
 */
  __Pyx_TraceLine(454,0,__PYX_ERR(1, 454, __pyx_L1_error))
  __pyx_r = __pyx_v_context;
  goto __pyx_L0;

  /* "cpp_common.pxd":447
 *     return True
 * 
 * cdef inline RF_Scorer CreateScorerContext(RF_KwargsInit kwargs_init, RF_GetScorerFlags get_scorer_flags, RF_ScorerFuncInit scorer_func_init, RF_UncachedScorerFunc uncached_scorer_func) noexcept:             # <<<<<<<<<<<<<<
 *     cdef RF_Scorer context
 *     context.version = SCORER_STRUCT_VERSION
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cpp_common.CreateScorerContext", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "cpp_common.pxd":456
 *     return context
 * 
 * cdef inline void SetFuncAttrs(cpp_func, py_func) except *:             # <<<<<<<<<<<<<<
 *     cpp_func.__name__ = py_func.__name__
 *     cpp_func.__qualname__ = py_func.__qualname__
 */

static CYTHON_INLINE void __pyx_f_10cpp_common_SetFuncAttrs(PyObject *__pyx_v_cpp_func, PyObject *__pyx_v_py_func) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetFuncAttrs", 1);
  __Pyx_TraceCall("SetFuncAttrs", __pyx_f[1], 456, 0, __PYX_ERR(1, 456, __pyx_L1_error));

  /* "cpp_common.pxd":457
 * 
 * cdef inline void SetFuncAttrs(cpp_func, py_func) except *:
 *     cpp_func.__name__ = py_func.__name__             # <<<<<<<<<<<<<<
 *     cpp_func.__qualname__ = py_func.__qualname__
 *     cpp_func.__doc__ = py_func.__doc__
 */
  __Pyx_TraceLine(457,0,__PYX_ERR(1, 457, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_func, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_cpp_func, __pyx_n_s_name, __pyx_t_1) < 0) __PYX_ERR(1, 457, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cpp_common.pxd":458
 * cdef inline void SetFuncAttrs(cpp_func, py_func) except *:
 *     cpp_func.__name__ = py_func.__name__
 *     cpp_func.__qualname__ = py_func.__qualname__             # <<<<<<<<<<<<<<
 *     cpp_func.__doc__ = py_func.__doc__
 * 
 */
  __Pyx_TraceLine(458,0,__PYX_ERR(1, 458, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_func, __pyx_n_s_qualname); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_cpp_func, __pyx_n_s_qualname, __pyx_t_1) < 0) __PYX_ERR(1, 458, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cpp_common.pxd":459
 *     cpp_func.__name__ = py_func.__name__
 *     cpp_func.__qualname__ = py_func.__qualname__
 *     cpp_func.__doc__ = py_func.__doc__             # <<<<<<<<<<<<<<
 * 
 * cdef inline void SetScorerAttrs(cpp_func, py_func, RF_Scorer* context) except *:
 */
  __Pyx_TraceLine(459,0,__PYX_ERR(1, 459, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_func, __pyx_n_s_doc); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_cpp_func, __pyx_n_s_doc, __pyx_t_1) < 0) __PYX_ERR(1, 459, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cpp_common.pxd":456
 *     return context
 * 
 * cdef inline void SetFuncAttrs(cpp_func, py_func) except *:             # <<<<<<<<<<<<<<
 *     cpp_func.__name__ = py_func.__name__
 *     cpp_func.__qualname__ = py_func.__qualname__
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpp_common.SetFuncAttrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "cpp_common.pxd":461
 *     cpp_func.__doc__ = py_func.__doc__
 * 
 * cdef inline void SetScorerAttrs(cpp_func, py_func, RF_Scorer* context) except *:             # <<<<<<<<<<<<<<
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Scorer = PyCapsule_New(context, NULL, NULL)
 */

static CYTHON_INLINE void __pyx_f_10cpp_common_SetScorerAttrs(PyObject *__pyx_v_cpp_func, PyObject *__pyx_v_py_func, RF_Scorer *__pyx_v_context) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetScorerAttrs", 1);
  __Pyx_TraceCall("SetScorerAttrs", __pyx_f[1], 461, 0, __PYX_ERR(1, 461, __pyx_L1_error));

  /* "cpp_common.pxd":462
 * 
 * cdef inline void SetScorerAttrs(cpp_func, py_func, RF_Scorer* context) except *:
 *     SetFuncAttrs(cpp_func, py_func)             # <<<<<<<<<<<<<<
 *     cpp_func._RF_Scorer = PyCapsule_New(context, NULL, NULL)
 *     cpp_func._RF_ScorerPy = py_func._RF_ScorerPy
 */
  __Pyx_TraceLine(462,0,__PYX_ERR(1, 462, __pyx_L1_error))
  __pyx_f_10cpp_common_SetFuncAttrs(__pyx_v_cpp_func, __pyx_v_py_func); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 462, __pyx_L1_error)

  /* "cpp_common.pxd":463
 * cdef inline void SetScorerAttrs(cpp_func, py_func, RF_Scorer* context) except *:
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Scorer = PyCapsule_New(context, NULL, NULL)             # <<<<<<<<<<<<<<
 *     cpp_func._RF_ScorerPy = py_func._RF_ScorerPy
 * 
 */
  __Pyx_TraceLine(463,0,__PYX_ERR(1, 463, __pyx_L1_error))
  __pyx_t_1 = PyCapsule_New(__pyx_v_context, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_cpp_func, __pyx_n_s_RF_Scorer, __pyx_t_1) < 0) __PYX_ERR(1, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cpp_common.pxd":464
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Scorer = PyCapsule_New(context, NULL, NULL)
 *     cpp_func._RF_ScorerPy = py_func._RF_ScorerPy             # <<<<<<<<<<<<<<
 * 
 *     # used to detect the function hasn't been wrapped afterwards
 */
  __Pyx_TraceLine(464,0,__PYX_ERR(1, 464, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_func, __pyx_n_s_RF_ScorerPy); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_cpp_func, __pyx_n_s_RF_ScorerPy, __pyx_t_1) < 0) __PYX_ERR(1, 464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cpp_common.pxd":467
 * 
 *     # used to detect the function hasn't been wrapped afterwards
 *     cpp_func._RF_OriginalScorer = cpp_func             # <<<<<<<<<<<<<<
 * 
 * cdef inline RF_Preprocessor CreateProcessorContext(RF_Preprocess preprocess) except *:
 */
  __Pyx_TraceLine(467,0,__PYX_ERR(1, 467, __pyx_L1_error))
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_cpp_func, __pyx_n_s_RF_OriginalScorer, __pyx_v_cpp_func) < 0) __PYX_ERR(1, 467, __pyx_L1_error)

  /* "cpp_common.pxd":461
 *     cpp_func.__doc__ = py_func.__doc__
 * 
 * cdef inline void SetScorerAttrs(cpp_func, py_func, RF_Scorer* context) except *:             # <<<<<<<<<<<<<<
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Scorer = PyCapsule_New(context, NULL, NULL)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpp_common.SetScorerAttrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "cpp_common.pxd":469
 *     cpp_func._RF_OriginalScorer = cpp_func
 * 
 * cdef inline RF_Preprocessor CreateProcessorContext(RF_Preprocess preprocess) except *:             # <<<<<<<<<<<<<<
 *     cdef RF_Preprocessor context
 *     context.version = PREPROCESSOR_STRUCT_VERSION
 */

static CYTHON_INLINE RF_Preprocessor __pyx_f_10cpp_common_CreateProcessorContext(RF_Preprocess __pyx_v_preprocess) {
  RF_Preprocessor __pyx_v_context;
  RF_Preprocessor __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("CreateProcessorContext", __pyx_f[1], 469, 0, __PYX_ERR(1, 469, __pyx_L1_error));

  /* "cpp_common.pxd":471
 * cdef inline RF_Preprocessor CreateProcessorContext(RF_Preprocess preprocess) except *:
 *     cdef RF_Preprocessor context
 *     context.version = PREPROCESSOR_STRUCT_VERSION             # <<<<<<<<<<<<<<
 *     context.preprocess = preprocess
 *     return context
 */
  __Pyx_TraceLine(471,0,__PYX_ERR(1, 471, __pyx_L1_error))
  __pyx_v_context.version = PREPROCESSOR_STRUCT_VERSION;

  /* "cpp_common.pxd":472
 *     cdef RF_Preprocessor context
 *     context.version = PREPROCESSOR_STRUCT_VERSION
 *     context.preprocess = preprocess             # <<<<<<<<<<<<<<
 *     return context
 * 
 */
  __Pyx_TraceLine(472,0,__PYX_ERR(1, 472, __pyx_L1_error))
  __pyx_v_context.preprocess = __pyx_v_preprocess;

  /* "cpp_common.pxd":473
 *     context.version = PREPROCESSOR_STRUCT_VERSION
 *     context.preprocess = preprocess
 *     return context             # <<<<<<<<<<<<<<
 * 
 * cdef inline void SetProcessorAttrs(cpp_func, py_func, RF_Preprocessor* context) except *:
 */
  __Pyx_TraceLine(473,0,__PYX_ERR(1, 473, __pyx_L1_error))
  __pyx_r = __pyx_v_context;
  goto __pyx_L0;

  /* "cpp_common.pxd":469
 *     cpp_func._RF_OriginalScorer = cpp_func
 * 
 * cdef inline RF_Preprocessor CreateProcessorContext(RF_Preprocess preprocess) except *:             # <<<<<<<<<<<<<<
 *     cdef RF_Preprocessor context
 *     context.version = PREPROCESSOR_STRUCT_VERSION
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cpp_common.CreateProcessorContext", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "cpp_common.pxd":475
 *     return context
 * 
 * cdef inline void SetProcessorAttrs(cpp_func, py_func, RF_Preprocessor* context) except *:             # <<<<<<<<<<<<<<
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Preprocess = PyCapsule_New(context, NULL, NULL)
 */

static CYTHON_INLINE void __pyx_f_10cpp_common_SetProcessorAttrs(PyObject *__pyx_v_cpp_func, PyObject *__pyx_v_py_func, RF_Preprocessor *__pyx_v_context) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetProcessorAttrs", 1);
  __Pyx_TraceCall("SetProcessorAttrs", __pyx_f[1], 475, 0, __PYX_ERR(1, 475, __pyx_L1_error));

  /* "cpp_common.pxd":476
 * 
 * cdef inline void SetProcessorAttrs(cpp_func, py_func, RF_Preprocessor* context) except *:
 *     SetFuncAttrs(cpp_func, py_func)             # <<<<<<<<<<<<<<
 *     cpp_func._RF_Preprocess = PyCapsule_New(context, NULL, NULL)
 */
  __Pyx_TraceLine(476,0,__PYX_ERR(1, 476, __pyx_L1_error))
  __pyx_f_10cpp_common_SetFuncAttrs(__pyx_v_cpp_func, __pyx_v_py_func); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 476, __pyx_L1_error)

  /* "cpp_common.pxd":477
 * cdef inline void SetProcessorAttrs(cpp_func, py_func, RF_Preprocessor* context) except *:
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Preprocess = PyCapsule_New(context, NULL, NULL)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(477,0,__PYX_ERR(1, 477, __pyx_L1_error))
  __pyx_t_1 = PyCapsule_New(__pyx_v_context, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_cpp_func, __pyx_n_s_RF_Preprocess, __pyx_t_1) < 0) __PYX_ERR(1, 477, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cpp_common.pxd":475
 *     return context
 * 
 * cdef inline void SetProcessorAttrs(cpp_func, py_func, RF_Preprocessor* context) except *:             # <<<<<<<<<<<<<<
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Preprocess = PyCapsule_New(context, NULL, NULL)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpp_common.SetProcessorAttrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":27
 *     object editops_apply(const RfEditops& ops, const RF_String& str1, const RF_String& str2) except + nogil
 * 
 * cdef str edit_type_to_str(EditType edit_type):             # <<<<<<<<<<<<<<
 *     if edit_type == EditType.Insert:
 *         return "insert"
 */

static PyObject *__pyx_f_9rapidfuzz_8distance_15_initialize_cpp_edit_type_to_str(__PYX_ENUM_CLASS_DECL rapidfuzz::EditType __pyx_v_edit_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("edit_type_to_str", 1);
  __Pyx_TraceCall("edit_type_to_str", __pyx_f[0], 27, 0, __PYX_ERR(0, 27, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":28
 * 
 * cdef str edit_type_to_str(EditType edit_type):
 *     if edit_type == EditType.Insert:             # <<<<<<<<<<<<<<
 *         return "insert"
 *     elif edit_type == EditType.Delete:
 */
  __Pyx_TraceLine(28,0,__PYX_ERR(0, 28, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_edit_type == rapidfuzz::EditType::Insert);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":29
 * cdef str edit_type_to_str(EditType edit_type):
 *     if edit_type == EditType.Insert:
 *         return "insert"             # <<<<<<<<<<<<<<
 *     elif edit_type == EditType.Delete:
 *         return "delete"
 */
    __Pyx_TraceLine(29,0,__PYX_ERR(0, 29, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_insert);
    __pyx_r = __pyx_n_u_insert;
    goto __pyx_L0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":28
 * 
 * cdef str edit_type_to_str(EditType edit_type):
 *     if edit_type == EditType.Insert:             # <<<<<<<<<<<<<<
 *         return "insert"
 *     elif edit_type == EditType.Delete:
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":30
 *     if edit_type == EditType.Insert:
 *         return "insert"
 *     elif edit_type == EditType.Delete:             # <<<<<<<<<<<<<<
 *         return "delete"
 *     elif edit_type == EditType.Replace:
 */
  __Pyx_TraceLine(30,0,__PYX_ERR(0, 30, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_edit_type == rapidfuzz::EditType::Delete);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":31
 *         return "insert"
 *     elif edit_type == EditType.Delete:
 *         return "delete"             # <<<<<<<<<<<<<<
 *     elif edit_type == EditType.Replace:
 *         return "replace"
 */
    __Pyx_TraceLine(31,0,__PYX_ERR(0, 31, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_delete);
    __pyx_r = __pyx_n_u_delete;
    goto __pyx_L0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":30
 *     if edit_type == EditType.Insert:
 *         return "insert"
 *     elif edit_type == EditType.Delete:             # <<<<<<<<<<<<<<
 *         return "delete"
 *     elif edit_type == EditType.Replace:
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":32
 *     elif edit_type == EditType.Delete:
 *         return "delete"
 *     elif edit_type == EditType.Replace:             # <<<<<<<<<<<<<<
 *         return "replace"
 *     else:
 */
  __Pyx_TraceLine(32,0,__PYX_ERR(0, 32, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_edit_type == rapidfuzz::EditType::Replace);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":33
 *         return "delete"
 *     elif edit_type == EditType.Replace:
 *         return "replace"             # <<<<<<<<<<<<<<
 *     else:
 *         return "equal"
 */
    __Pyx_TraceLine(33,0,__PYX_ERR(0, 33, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_replace);
    __pyx_r = __pyx_n_u_replace;
    goto __pyx_L0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":32
 *     elif edit_type == EditType.Delete:
 *         return "delete"
 *     elif edit_type == EditType.Replace:             # <<<<<<<<<<<<<<
 *         return "replace"
 *     else:
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":35
 *         return "replace"
 *     else:
 *         return "equal"             # <<<<<<<<<<<<<<
 * 
 * cdef EditType str_to_edit_type(edit_type) except *:
 */
  __Pyx_TraceLine(35,0,__PYX_ERR(0, 35, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_equal);
    __pyx_r = __pyx_n_u_equal;
    goto __pyx_L0;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":27
 *     object editops_apply(const RfEditops& ops, const RF_String& str1, const RF_String& str2) except + nogil
 * 
 * cdef str edit_type_to_str(EditType edit_type):             # <<<<<<<<<<<<<<
 *     if edit_type == EditType.Insert:
 *         return "insert"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.edit_type_to_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":37
 *         return "equal"
 * 
 * cdef EditType str_to_edit_type(edit_type) except *:             # <<<<<<<<<<<<<<
 *     # todo fix compiler warning about potentially uninitialized return value
 *     if edit_type == "insert":
 */

static __PYX_ENUM_CLASS_DECL rapidfuzz::EditType __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_str_to_edit_type(PyObject *__pyx_v_edit_type) {
  __PYX_ENUM_CLASS_DECL rapidfuzz::EditType __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("str_to_edit_type", 1);
  __Pyx_TraceCall("str_to_edit_type", __pyx_f[0], 37, 0, __PYX_ERR(0, 37, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":39
 * cdef EditType str_to_edit_type(edit_type) except *:
 *     # todo fix compiler warning about potentially uninitialized return value
 *     if edit_type == "insert":             # <<<<<<<<<<<<<<
 *         return EditType.Insert
 *     elif edit_type == "delete":
 */
  __Pyx_TraceLine(39,0,__PYX_ERR(0, 39, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_edit_type, __pyx_n_u_insert, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 39, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":40
 *     # todo fix compiler warning about potentially uninitialized return value
 *     if edit_type == "insert":
 *         return EditType.Insert             # <<<<<<<<<<<<<<
 *     elif edit_type == "delete":
 *         return EditType.Delete
 */
    __Pyx_TraceLine(40,0,__PYX_ERR(0, 40, __pyx_L1_error))
    __pyx_r = rapidfuzz::EditType::Insert;
    goto __pyx_L0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":39
 * cdef EditType str_to_edit_type(edit_type) except *:
 *     # todo fix compiler warning about potentially uninitialized return value
 *     if edit_type == "insert":             # <<<<<<<<<<<<<<
 *         return EditType.Insert
 *     elif edit_type == "delete":
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":41
 *     if edit_type == "insert":
 *         return EditType.Insert
 *     elif edit_type == "delete":             # <<<<<<<<<<<<<<
 *         return EditType.Delete
 *     elif edit_type == "replace":
 */
  __Pyx_TraceLine(41,0,__PYX_ERR(0, 41, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_edit_type, __pyx_n_u_delete, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 41, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":42
 *         return EditType.Insert
 *     elif edit_type == "delete":
 *         return EditType.Delete             # <<<<<<<<<<<<<<
 *     elif edit_type == "replace":
 *         return EditType.Replace
 */
    __Pyx_TraceLine(42,0,__PYX_ERR(0, 42, __pyx_L1_error))
    __pyx_r = rapidfuzz::EditType::Delete;
    goto __pyx_L0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":41
 *     if edit_type == "insert":
 *         return EditType.Insert
 *     elif edit_type == "delete":             # <<<<<<<<<<<<<<
 *         return EditType.Delete
 *     elif edit_type == "replace":
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":43
 *     elif edit_type == "delete":
 *         return EditType.Delete
 *     elif edit_type == "replace":             # <<<<<<<<<<<<<<
 *         return EditType.Replace
 *     elif edit_type == "equal":
 */
  __Pyx_TraceLine(43,0,__PYX_ERR(0, 43, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_edit_type, __pyx_n_u_replace, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 43, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":44
 *         return EditType.Delete
 *     elif edit_type == "replace":
 *         return EditType.Replace             # <<<<<<<<<<<<<<
 *     elif edit_type == "equal":
 *         return EditType.None
 */
    __Pyx_TraceLine(44,0,__PYX_ERR(0, 44, __pyx_L1_error))
    __pyx_r = rapidfuzz::EditType::Replace;
    goto __pyx_L0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":43
 *     elif edit_type == "delete":
 *         return EditType.Delete
 *     elif edit_type == "replace":             # <<<<<<<<<<<<<<
 *         return EditType.Replace
 *     elif edit_type == "equal":
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":45
 *     elif edit_type == "replace":
 *         return EditType.Replace
 *     elif edit_type == "equal":             # <<<<<<<<<<<<<<
 *         return EditType.None
 *     else:
 */
  __Pyx_TraceLine(45,0,__PYX_ERR(0, 45, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_edit_type, __pyx_n_u_equal, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 45, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":46
 *         return EditType.Replace
 *     elif edit_type == "equal":
 *         return EditType.None             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError("Invalid Edit Type")
 */
    __Pyx_TraceLine(46,0,__PYX_ERR(0, 46, __pyx_L1_error))
    __pyx_r = rapidfuzz::EditType::None;
    goto __pyx_L0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":45
 *     elif edit_type == "replace":
 *         return EditType.Replace
 *     elif edit_type == "equal":             # <<<<<<<<<<<<<<
 *         return EditType.None
 *     else:
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":48
 *         return EditType.None
 *     else:
 *         raise ValueError("Invalid Edit Type")             # <<<<<<<<<<<<<<
 * 
 * cdef RfEditops list_to_editops(ops, size_t src_len, size_t dest_len) except *:
 */
  __Pyx_TraceLine(48,0,__PYX_ERR(0, 48, __pyx_L1_error))
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 48, __pyx_L1_error)
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":37
 *         return "equal"
 * 
 * cdef EditType str_to_edit_type(edit_type) except *:             # <<<<<<<<<<<<<<
 *     # todo fix compiler warning about potentially uninitialized return value
 *     if edit_type == "insert":
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.str_to_edit_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":50
 *         raise ValueError("Invalid Edit Type")
 * 
 * cdef RfEditops list_to_editops(ops, size_t src_len, size_t dest_len) except *:             # <<<<<<<<<<<<<<
 *     cdef RfEditops result
 *     cdef size_t i
 */

static rapidfuzz::Editops __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_list_to_editops(PyObject *__pyx_v_ops, size_t __pyx_v_src_len, size_t __pyx_v_dest_len) {
  rapidfuzz::Editops __pyx_v_result;
  size_t __pyx_v_i;
  __PYX_ENUM_CLASS_DECL rapidfuzz::EditType __pyx_v_edit_type;
  size_t __pyx_v_src_pos;
  size_t __pyx_v_dest_pos;
  size_t __pyx_v_ops_len;
  PyObject *__pyx_v_op = NULL;
  rapidfuzz::Editops __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  rapidfuzz::Opcodes __pyx_t_4;
  rapidfuzz::Editops __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  __PYX_ENUM_CLASS_DECL rapidfuzz::EditType __pyx_t_9;
  size_t __pyx_t_10;
  int __pyx_t_11;
  size_t __pyx_t_12;
  size_t __pyx_t_13;
  rapidfuzz::EditOp __pyx_t_14;
  rapidfuzz::EditOp __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_to_editops", 1);
  __Pyx_TraceCall("list_to_editops", __pyx_f[0], 50, 0, __PYX_ERR(0, 50, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":55
 *     cdef EditType edit_type
 *     cdef size_t src_pos, dest_pos
 *     cdef size_t ops_len = len(ops)             # <<<<<<<<<<<<<<
 *     result.set_src_len(src_len)
 *     result.set_dest_len(dest_len)
 */
  __Pyx_TraceLine(55,0,__PYX_ERR(0, 55, __pyx_L1_error))
  __pyx_t_1 = PyObject_Length(__pyx_v_ops); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 55, __pyx_L1_error)
  __pyx_v_ops_len = __pyx_t_1;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":56
 *     cdef size_t src_pos, dest_pos
 *     cdef size_t ops_len = len(ops)
 *     result.set_src_len(src_len)             # <<<<<<<<<<<<<<
 *     result.set_dest_len(dest_len)
 * 
 */
  __Pyx_TraceLine(56,0,__PYX_ERR(0, 56, __pyx_L1_error))
  __pyx_v_result.set_src_len(__pyx_v_src_len);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":57
 *     cdef size_t ops_len = len(ops)
 *     result.set_src_len(src_len)
 *     result.set_dest_len(dest_len)             # <<<<<<<<<<<<<<
 * 
 *     if not ops_len:
 */
  __Pyx_TraceLine(57,0,__PYX_ERR(0, 57, __pyx_L1_error))
  __pyx_v_result.set_dest_len(__pyx_v_dest_len);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":59
 *     result.set_dest_len(dest_len)
 * 
 *     if not ops_len:             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __Pyx_TraceLine(59,0,__PYX_ERR(0, 59, __pyx_L1_error))
  __pyx_t_2 = (!(__pyx_v_ops_len != 0));
  if (__pyx_t_2) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":60
 * 
 *     if not ops_len:
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     if len(ops[0]) == 5:
 */
    __Pyx_TraceLine(60,0,__PYX_ERR(0, 60, __pyx_L1_error))
    __pyx_r = __pyx_v_result;
    goto __pyx_L0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":59
 *     result.set_dest_len(dest_len)
 * 
 *     if not ops_len:             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":62
 *         return result
 * 
 *     if len(ops[0]) == 5:             # <<<<<<<<<<<<<<
 *         return RfEditops(list_to_opcodes(ops, src_len, dest_len))
 * 
 */
  __Pyx_TraceLine(62,0,__PYX_ERR(0, 62, __pyx_L1_error))
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_ops, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = (__pyx_t_1 == 5);
  if (__pyx_t_2) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":63
 * 
 *     if len(ops[0]) == 5:
 *         return RfEditops(list_to_opcodes(ops, src_len, dest_len))             # <<<<<<<<<<<<<<
 * 
 *     result.reserve(ops_len)
 */
    __Pyx_TraceLine(63,0,__PYX_ERR(0, 63, __pyx_L1_error))
    __pyx_t_4 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_list_to_opcodes(__pyx_v_ops, __pyx_v_src_len, __pyx_v_dest_len); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 63, __pyx_L1_error)
    try {
      __pyx_t_5 = rapidfuzz::Editops(__pyx_t_4);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 63, __pyx_L1_error)
    }
    __pyx_r = __pyx_t_5;
    goto __pyx_L0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":62
 *         return result
 * 
 *     if len(ops[0]) == 5:             # <<<<<<<<<<<<<<
 *         return RfEditops(list_to_opcodes(ops, src_len, dest_len))
 * 
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":65
 *         return RfEditops(list_to_opcodes(ops, src_len, dest_len))
 * 
 *     result.reserve(ops_len)             # <<<<<<<<<<<<<<
 *     for op in ops:
 *         if len(op) != 3:
 */
  __Pyx_TraceLine(65,0,__PYX_ERR(0, 65, __pyx_L1_error))
  try {
    __pyx_v_result.reserve(__pyx_v_ops_len);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 65, __pyx_L1_error)
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":66
 * 
 *     result.reserve(ops_len)
 *     for op in ops:             # <<<<<<<<<<<<<<
 *         if len(op) != 3:
 *             raise TypeError("Expected list of 3-tuples, or a list of 5-tuples")
 */
  __Pyx_TraceLine(66,0,__PYX_ERR(0, 66, __pyx_L1_error))
  if (likely(PyList_CheckExact(__pyx_v_ops)) || PyTuple_CheckExact(__pyx_v_ops)) {
    __pyx_t_3 = __pyx_v_ops; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_ops); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 66, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 66, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 66, __pyx_L1_error)
        #else
        __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 66, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 66, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 66, __pyx_L1_error)
        #else
        __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 66, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 66, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_op, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":67
 *     result.reserve(ops_len)
 *     for op in ops:
 *         if len(op) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected list of 3-tuples, or a list of 5-tuples")
 * 
 */
    __Pyx_TraceLine(67,0,__PYX_ERR(0, 67, __pyx_L1_error))
    __pyx_t_8 = PyObject_Length(__pyx_v_op); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 67, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_8 != 3);
    if (unlikely(__pyx_t_2)) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":68
 *     for op in ops:
 *         if len(op) != 3:
 *             raise TypeError("Expected list of 3-tuples, or a list of 5-tuples")             # <<<<<<<<<<<<<<
 * 
 *         edit_type = str_to_edit_type(op[0])
 */
      __Pyx_TraceLine(68,0,__PYX_ERR(0, 68, __pyx_L1_error))
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 68, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 68, __pyx_L1_error)

      /* "rapidfuzz/distance/_initialize_cpp.pyx":67
 *     result.reserve(ops_len)
 *     for op in ops:
 *         if len(op) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected list of 3-tuples, or a list of 5-tuples")
 * 
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":70
 *             raise TypeError("Expected list of 3-tuples, or a list of 5-tuples")
 * 
 *         edit_type = str_to_edit_type(op[0])             # <<<<<<<<<<<<<<
 *         src_pos = op[1]
 *         dest_pos = op[2]
 */
    __Pyx_TraceLine(70,0,__PYX_ERR(0, 70, __pyx_L1_error))
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_op, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_str_to_edit_type(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_edit_type = __pyx_t_9;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":71
 * 
 *         edit_type = str_to_edit_type(op[0])
 *         src_pos = op[1]             # <<<<<<<<<<<<<<
 *         dest_pos = op[2]
 * 
 */
    __Pyx_TraceLine(71,0,__PYX_ERR(0, 71, __pyx_L1_error))
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_op, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_t_7); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_src_pos = __pyx_t_10;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":72
 *         edit_type = str_to_edit_type(op[0])
 *         src_pos = op[1]
 *         dest_pos = op[2]             # <<<<<<<<<<<<<<
 * 
 *         if src_pos > src_len or dest_pos > dest_len:
 */
    __Pyx_TraceLine(72,0,__PYX_ERR(0, 72, __pyx_L1_error))
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_op, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_t_7); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_dest_pos = __pyx_t_10;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":74
 *         dest_pos = op[2]
 * 
 *         if src_pos > src_len or dest_pos > dest_len:             # <<<<<<<<<<<<<<
 *             raise ValueError("List of edit operations invalid")
 * 
 */
    __Pyx_TraceLine(74,0,__PYX_ERR(0, 74, __pyx_L1_error))
    __pyx_t_11 = (__pyx_v_src_pos > __pyx_v_src_len);
    if (!__pyx_t_11) {
    } else {
      __pyx_t_2 = __pyx_t_11;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_11 = (__pyx_v_dest_pos > __pyx_v_dest_len);
    __pyx_t_2 = __pyx_t_11;
    __pyx_L9_bool_binop_done:;
    if (unlikely(__pyx_t_2)) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":75
 * 
 *         if src_pos > src_len or dest_pos > dest_len:
 *             raise ValueError("List of edit operations invalid")             # <<<<<<<<<<<<<<
 * 
 *         if src_pos == src_len and edit_type != EditType.Insert:
 */
      __Pyx_TraceLine(75,0,__PYX_ERR(0, 75, __pyx_L1_error))
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 75, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 75, __pyx_L1_error)

      /* "rapidfuzz/distance/_initialize_cpp.pyx":74
 *         dest_pos = op[2]
 * 
 *         if src_pos > src_len or dest_pos > dest_len:             # <<<<<<<<<<<<<<
 *             raise ValueError("List of edit operations invalid")
 * 
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":77
 *             raise ValueError("List of edit operations invalid")
 * 
 *         if src_pos == src_len and edit_type != EditType.Insert:             # <<<<<<<<<<<<<<
 *             raise ValueError("List of edit operations invalid")
 *         elif dest_pos == dest_len and edit_type != EditType.Delete:
 */
    __Pyx_TraceLine(77,0,__PYX_ERR(0, 77, __pyx_L1_error))
    __pyx_t_11 = (__pyx_v_src_pos == __pyx_v_src_len);
    if (__pyx_t_11) {
    } else {
      __pyx_t_2 = __pyx_t_11;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_11 = (__pyx_v_edit_type != rapidfuzz::EditType::Insert);
    __pyx_t_2 = __pyx_t_11;
    __pyx_L12_bool_binop_done:;
    if (unlikely(__pyx_t_2)) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":78
 * 
 *         if src_pos == src_len and edit_type != EditType.Insert:
 *             raise ValueError("List of edit operations invalid")             # <<<<<<<<<<<<<<
 *         elif dest_pos == dest_len and edit_type != EditType.Delete:
 *             raise ValueError("List of edit operations invalid")
 */
      __Pyx_TraceLine(78,0,__PYX_ERR(0, 78, __pyx_L1_error))
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 78, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 78, __pyx_L1_error)

      /* "rapidfuzz/distance/_initialize_cpp.pyx":77
 *             raise ValueError("List of edit operations invalid")
 * 
 *         if src_pos == src_len and edit_type != EditType.Insert:             # <<<<<<<<<<<<<<
 *             raise ValueError("List of edit operations invalid")
 *         elif dest_pos == dest_len and edit_type != EditType.Delete:
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":79
 *         if src_pos == src_len and edit_type != EditType.Insert:
 *             raise ValueError("List of edit operations invalid")
 *         elif dest_pos == dest_len and edit_type != EditType.Delete:             # <<<<<<<<<<<<<<
 *             raise ValueError("List of edit operations invalid")
 * 
 */
    __Pyx_TraceLine(79,0,__PYX_ERR(0, 79, __pyx_L1_error))
    __pyx_t_11 = (__pyx_v_dest_pos == __pyx_v_dest_len);
    if (__pyx_t_11) {
    } else {
      __pyx_t_2 = __pyx_t_11;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_11 = (__pyx_v_edit_type != rapidfuzz::EditType::Delete);
    __pyx_t_2 = __pyx_t_11;
    __pyx_L14_bool_binop_done:;
    if (unlikely(__pyx_t_2)) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":80
 *             raise ValueError("List of edit operations invalid")
 *         elif dest_pos == dest_len and edit_type != EditType.Delete:
 *             raise ValueError("List of edit operations invalid")             # <<<<<<<<<<<<<<
 * 
 *         # keep operations are not relevant in editops
 */
      __Pyx_TraceLine(80,0,__PYX_ERR(0, 80, __pyx_L1_error))
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 80, __pyx_L1_error)

      /* "rapidfuzz/distance/_initialize_cpp.pyx":79
 *         if src_pos == src_len and edit_type != EditType.Insert:
 *             raise ValueError("List of edit operations invalid")
 *         elif dest_pos == dest_len and edit_type != EditType.Delete:             # <<<<<<<<<<<<<<
 *             raise ValueError("List of edit operations invalid")
 * 
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":83
 * 
 *         # keep operations are not relevant in editops
 *         if edit_type == EditType.None:             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
    __Pyx_TraceLine(83,0,__PYX_ERR(0, 83, __pyx_L1_error))
    __pyx_t_2 = (__pyx_v_edit_type == rapidfuzz::EditType::None);
    if (__pyx_t_2) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":84
 *         # keep operations are not relevant in editops
 *         if edit_type == EditType.None:
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         result.emplace_back(edit_type, src_pos, dest_pos)
 */
      __Pyx_TraceLine(84,0,__PYX_ERR(0, 84, __pyx_L1_error))
      goto __pyx_L5_continue;

      /* "rapidfuzz/distance/_initialize_cpp.pyx":83
 * 
 *         # keep operations are not relevant in editops
 *         if edit_type == EditType.None:             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":86
 *             continue
 * 
 *         result.emplace_back(edit_type, src_pos, dest_pos)             # <<<<<<<<<<<<<<
 * 
 *     # validate order of editops
 */
    __Pyx_TraceLine(86,0,__PYX_ERR(0, 86, __pyx_L1_error))
    __pyx_v_result.emplace_back(__pyx_v_edit_type, __pyx_v_src_pos, __pyx_v_dest_pos);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":66
 * 
 *     result.reserve(ops_len)
 *     for op in ops:             # <<<<<<<<<<<<<<
 *         if len(op) != 3:
 *             raise TypeError("Expected list of 3-tuples, or a list of 5-tuples")
 */
    __Pyx_TraceLine(66,0,__PYX_ERR(0, 66, __pyx_L1_error))
    __pyx_L5_continue:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":89
 * 
 *     # validate order of editops
 *     if (result.size()):             # <<<<<<<<<<<<<<
 *         for i in range(0, result.size() - 1):
 *             if result[i + 1].src_pos < result[i].src_pos or result[i + 1].dest_pos < result[i].dest_pos:
 */
  __Pyx_TraceLine(89,0,__PYX_ERR(0, 89, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v_result.size() != 0);
  if (__pyx_t_2) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":90
 *     # validate order of editops
 *     if (result.size()):
 *         for i in range(0, result.size() - 1):             # <<<<<<<<<<<<<<
 *             if result[i + 1].src_pos < result[i].src_pos or result[i + 1].dest_pos < result[i].dest_pos:
 *                 raise ValueError("List of edit operations out of order")
 */
    __Pyx_TraceLine(90,0,__PYX_ERR(0, 90, __pyx_L1_error))
    __pyx_t_10 = (__pyx_v_result.size() - 1);
    __pyx_t_12 = __pyx_t_10;
    for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
      __pyx_v_i = __pyx_t_13;

      /* "rapidfuzz/distance/_initialize_cpp.pyx":91
 *     if (result.size()):
 *         for i in range(0, result.size() - 1):
 *             if result[i + 1].src_pos < result[i].src_pos or result[i + 1].dest_pos < result[i].dest_pos:             # <<<<<<<<<<<<<<
 *                 raise ValueError("List of edit operations out of order")
 *             if result[i + 1].src_pos == result[i].src_pos and result[i + 1].dest_pos == result[i].dest_pos:
 */
      __Pyx_TraceLine(91,0,__PYX_ERR(0, 91, __pyx_L1_error))
      try {
        __pyx_t_14 = __pyx_v_result[(__pyx_v_i + 1)];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 91, __pyx_L1_error)
      }
      try {
        __pyx_t_15 = __pyx_v_result[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 91, __pyx_L1_error)
      }
      __pyx_t_11 = (__pyx_t_14.src_pos < __pyx_t_15.src_pos);
      if (!__pyx_t_11) {
      } else {
        __pyx_t_2 = __pyx_t_11;
        goto __pyx_L22_bool_binop_done;
      }
      try {
        __pyx_t_15 = __pyx_v_result[(__pyx_v_i + 1)];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 91, __pyx_L1_error)
      }
      try {
        __pyx_t_14 = __pyx_v_result[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 91, __pyx_L1_error)
      }
      __pyx_t_11 = (__pyx_t_15.dest_pos < __pyx_t_14.dest_pos);
      __pyx_t_2 = __pyx_t_11;
      __pyx_L22_bool_binop_done:;
      if (unlikely(__pyx_t_2)) {

        /* "rapidfuzz/distance/_initialize_cpp.pyx":92
 *         for i in range(0, result.size() - 1):
 *             if result[i + 1].src_pos < result[i].src_pos or result[i + 1].dest_pos < result[i].dest_pos:
 *                 raise ValueError("List of edit operations out of order")             # <<<<<<<<<<<<<<
 *             if result[i + 1].src_pos == result[i].src_pos and result[i + 1].dest_pos == result[i].dest_pos:
 *                 raise ValueError("Duplicated edit operation")
 */
        __Pyx_TraceLine(92,0,__PYX_ERR(0, 92, __pyx_L1_error))
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 92, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 92, __pyx_L1_error)

        /* "rapidfuzz/distance/_initialize_cpp.pyx":91
 *     if (result.size()):
 *         for i in range(0, result.size() - 1):
 *             if result[i + 1].src_pos < result[i].src_pos or result[i + 1].dest_pos < result[i].dest_pos:             # <<<<<<<<<<<<<<
 *                 raise ValueError("List of edit operations out of order")
 *             if result[i + 1].src_pos == result[i].src_pos and result[i + 1].dest_pos == result[i].dest_pos:
 */
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":93
 *             if result[i + 1].src_pos < result[i].src_pos or result[i + 1].dest_pos < result[i].dest_pos:
 *                 raise ValueError("List of edit operations out of order")
 *             if result[i + 1].src_pos == result[i].src_pos and result[i + 1].dest_pos == result[i].dest_pos:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Duplicated edit operation")
 * 
 */
      __Pyx_TraceLine(93,0,__PYX_ERR(0, 93, __pyx_L1_error))
      try {
        __pyx_t_14 = __pyx_v_result[(__pyx_v_i + 1)];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 93, __pyx_L1_error)
      }
      try {
        __pyx_t_15 = __pyx_v_result[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 93, __pyx_L1_error)
      }
      __pyx_t_11 = (__pyx_t_14.src_pos == __pyx_t_15.src_pos);
      if (__pyx_t_11) {
      } else {
        __pyx_t_2 = __pyx_t_11;
        goto __pyx_L25_bool_binop_done;
      }
      try {
        __pyx_t_15 = __pyx_v_result[(__pyx_v_i + 1)];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 93, __pyx_L1_error)
      }
      try {
        __pyx_t_14 = __pyx_v_result[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 93, __pyx_L1_error)
      }
      __pyx_t_11 = (__pyx_t_15.dest_pos == __pyx_t_14.dest_pos);
      __pyx_t_2 = __pyx_t_11;
      __pyx_L25_bool_binop_done:;
      if (unlikely(__pyx_t_2)) {

        /* "rapidfuzz/distance/_initialize_cpp.pyx":94
 *                 raise ValueError("List of edit operations out of order")
 *             if result[i + 1].src_pos == result[i].src_pos and result[i + 1].dest_pos == result[i].dest_pos:
 *                 raise ValueError("Duplicated edit operation")             # <<<<<<<<<<<<<<
 * 
 *     result.shrink_to_fit()
 */
        __Pyx_TraceLine(94,0,__PYX_ERR(0, 94, __pyx_L1_error))
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 94, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 94, __pyx_L1_error)

        /* "rapidfuzz/distance/_initialize_cpp.pyx":93
 *             if result[i + 1].src_pos < result[i].src_pos or result[i + 1].dest_pos < result[i].dest_pos:
 *                 raise ValueError("List of edit operations out of order")
 *             if result[i + 1].src_pos == result[i].src_pos and result[i + 1].dest_pos == result[i].dest_pos:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Duplicated edit operation")
 * 
 */
      }
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":89
 * 
 *     # validate order of editops
 *     if (result.size()):             # <<<<<<<<<<<<<<
 *         for i in range(0, result.size() - 1):
 *             if result[i + 1].src_pos < result[i].src_pos or result[i + 1].dest_pos < result[i].dest_pos:
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":96
 *                 raise ValueError("Duplicated edit operation")
 * 
 *     result.shrink_to_fit()             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __Pyx_TraceLine(96,0,__PYX_ERR(0, 96, __pyx_L1_error))
  try {
    __pyx_v_result.shrink_to_fit();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 96, __pyx_L1_error)
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":97
 * 
 *     result.shrink_to_fit()
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cdef RfOpcodes list_to_opcodes(ops, size_t src_len, size_t dest_len) except *:
 */
  __Pyx_TraceLine(97,0,__PYX_ERR(0, 97, __pyx_L1_error))
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":50
 *         raise ValueError("Invalid Edit Type")
 * 
 * cdef RfEditops list_to_editops(ops, size_t src_len, size_t dest_len) except *:             # <<<<<<<<<<<<<<
 *     cdef RfEditops result
 *     cdef size_t i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.list_to_editops", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_op);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":99
 *     return result
 * 
 * cdef RfOpcodes list_to_opcodes(ops, size_t src_len, size_t dest_len) except *:             # <<<<<<<<<<<<<<
 *     cdef RfOpcodes result
 *     cdef size_t i
 */

static rapidfuzz::Opcodes __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_list_to_opcodes(PyObject *__pyx_v_ops, size_t __pyx_v_src_len, size_t __pyx_v_dest_len) {
  rapidfuzz::Opcodes __pyx_v_result;
  size_t __pyx_v_i;
  __PYX_ENUM_CLASS_DECL rapidfuzz::EditType __pyx_v_edit_type;
  size_t __pyx_v_src_start;
  size_t __pyx_v_src_end;
  size_t __pyx_v_dest_start;
  size_t __pyx_v_dest_end;
  size_t __pyx_v_ops_len;
  PyObject *__pyx_v_op = NULL;
  rapidfuzz::Opcodes __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  rapidfuzz::Editops __pyx_t_5;
  rapidfuzz::Opcodes __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  __PYX_ENUM_CLASS_DECL rapidfuzz::EditType __pyx_t_10;
  size_t __pyx_t_11;
  __Pyx_FakeReference<rapidfuzz::Opcode> __pyx_t_12;
  __Pyx_FakeReference<rapidfuzz::Opcode> __pyx_t_13;
  __Pyx_FakeReference<rapidfuzz::Opcode> __pyx_t_14;
  __Pyx_FakeReference<rapidfuzz::Opcode> __pyx_t_15;
  __Pyx_FakeReference<rapidfuzz::Opcode> __pyx_t_16;
  rapidfuzz::Opcode __pyx_t_17;
  __Pyx_FakeReference<rapidfuzz::Opcode> __pyx_t_18;
  __Pyx_FakeReference<rapidfuzz::Opcode> __pyx_t_19;
  size_t __pyx_t_20;
  size_t __pyx_t_21;
  rapidfuzz::Opcode __pyx_t_22;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_to_opcodes", 1);
  __Pyx_TraceCall("list_to_opcodes", __pyx_f[0], 99, 0, __PYX_ERR(0, 99, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":104
 *     cdef EditType edit_type
 *     cdef size_t src_start, src_end, dest_start, dest_end
 *     cdef size_t ops_len = len(ops)             # <<<<<<<<<<<<<<
 *     if not ops_len or len(ops[0]) == 3:
 *         return RfOpcodes(list_to_editops(ops, src_len, dest_len))
 */
  __Pyx_TraceLine(104,0,__PYX_ERR(0, 104, __pyx_L1_error))
  __pyx_t_1 = PyObject_Length(__pyx_v_ops); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 104, __pyx_L1_error)
  __pyx_v_ops_len = __pyx_t_1;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":105
 *     cdef size_t src_start, src_end, dest_start, dest_end
 *     cdef size_t ops_len = len(ops)
 *     if not ops_len or len(ops[0]) == 3:             # <<<<<<<<<<<<<<
 *         return RfOpcodes(list_to_editops(ops, src_len, dest_len))
 * 
 */
  __Pyx_TraceLine(105,0,__PYX_ERR(0, 105, __pyx_L1_error))
  __pyx_t_3 = (!(__pyx_v_ops_len != 0));
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_ops, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__pyx_t_1 == 3);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":106
 *     cdef size_t ops_len = len(ops)
 *     if not ops_len or len(ops[0]) == 3:
 *         return RfOpcodes(list_to_editops(ops, src_len, dest_len))             # <<<<<<<<<<<<<<
 * 
 *     result.set_src_len(src_len)
 */
    __Pyx_TraceLine(106,0,__PYX_ERR(0, 106, __pyx_L1_error))
    __pyx_t_5 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_list_to_editops(__pyx_v_ops, __pyx_v_src_len, __pyx_v_dest_len); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L1_error)
    try {
      __pyx_t_6 = rapidfuzz::Opcodes(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 106, __pyx_L1_error)
    }
    __pyx_r = __pyx_t_6;
    goto __pyx_L0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":105
 *     cdef size_t src_start, src_end, dest_start, dest_end
 *     cdef size_t ops_len = len(ops)
 *     if not ops_len or len(ops[0]) == 3:             # <<<<<<<<<<<<<<
 *         return RfOpcodes(list_to_editops(ops, src_len, dest_len))
 * 
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":108
 *         return RfOpcodes(list_to_editops(ops, src_len, dest_len))
 * 
 *     result.set_src_len(src_len)             # <<<<<<<<<<<<<<
 *     result.set_dest_len(dest_len)
 *     result.reserve(ops_len)
 */
  __Pyx_TraceLine(108,0,__PYX_ERR(0, 108, __pyx_L1_error))
  __pyx_v_result.set_src_len(__pyx_v_src_len);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":109
 * 
 *     result.set_src_len(src_len)
 *     result.set_dest_len(dest_len)             # <<<<<<<<<<<<<<
 *     result.reserve(ops_len)
 *     for op in ops:
 */
  __Pyx_TraceLine(109,0,__PYX_ERR(0, 109, __pyx_L1_error))
  __pyx_v_result.set_dest_len(__pyx_v_dest_len);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":110
 *     result.set_src_len(src_len)
 *     result.set_dest_len(dest_len)
 *     result.reserve(ops_len)             # <<<<<<<<<<<<<<
 *     for op in ops:
 *         if len(op) != 5:
 */
  __Pyx_TraceLine(110,0,__PYX_ERR(0, 110, __pyx_L1_error))
  try {
    __pyx_v_result.reserve(__pyx_v_ops_len);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 110, __pyx_L1_error)
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":111
 *     result.set_dest_len(dest_len)
 *     result.reserve(ops_len)
 *     for op in ops:             # <<<<<<<<<<<<<<
 *         if len(op) != 5:
 *             raise TypeError("Expected list of 3-tuples, or a list of 5-tuples")
 */
  __Pyx_TraceLine(111,0,__PYX_ERR(0, 111, __pyx_L1_error))
  if (likely(PyList_CheckExact(__pyx_v_ops)) || PyTuple_CheckExact(__pyx_v_ops)) {
    __pyx_t_4 = __pyx_v_ops; __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_ops); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 111, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 111, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_8); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 111, __pyx_L1_error)
        #else
        __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 111, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 111, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_8); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 111, __pyx_L1_error)
        #else
        __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 111, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 111, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XDECREF_SET(__pyx_v_op, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":112
 *     result.reserve(ops_len)
 *     for op in ops:
 *         if len(op) != 5:             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected list of 3-tuples, or a list of 5-tuples")
 * 
 */
    __Pyx_TraceLine(112,0,__PYX_ERR(0, 112, __pyx_L1_error))
    __pyx_t_9 = PyObject_Length(__pyx_v_op); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 112, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_9 != 5);
    if (unlikely(__pyx_t_2)) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":113
 *     for op in ops:
 *         if len(op) != 5:
 *             raise TypeError("Expected list of 3-tuples, or a list of 5-tuples")             # <<<<<<<<<<<<<<
 * 
 *         edit_type = str_to_edit_type(op[0])
 */
      __Pyx_TraceLine(113,0,__PYX_ERR(0, 113, __pyx_L1_error))
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(0, 113, __pyx_L1_error)

      /* "rapidfuzz/distance/_initialize_cpp.pyx":112
 *     result.reserve(ops_len)
 *     for op in ops:
 *         if len(op) != 5:             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected list of 3-tuples, or a list of 5-tuples")
 * 
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":115
 *             raise TypeError("Expected list of 3-tuples, or a list of 5-tuples")
 * 
 *         edit_type = str_to_edit_type(op[0])             # <<<<<<<<<<<<<<
 *         src_start = op[1]
 *         src_end = op[2]
 */
    __Pyx_TraceLine(115,0,__PYX_ERR(0, 115, __pyx_L1_error))
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_op, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_str_to_edit_type(__pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_edit_type = __pyx_t_10;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":116
 * 
 *         edit_type = str_to_edit_type(op[0])
 *         src_start = op[1]             # <<<<<<<<<<<<<<
 *         src_end = op[2]
 *         dest_start = op[3]
 */
    __Pyx_TraceLine(116,0,__PYX_ERR(0, 116, __pyx_L1_error))
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_op, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_11 = __Pyx_PyInt_As_size_t(__pyx_t_8); if (unlikely((__pyx_t_11 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_src_start = __pyx_t_11;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":117
 *         edit_type = str_to_edit_type(op[0])
 *         src_start = op[1]
 *         src_end = op[2]             # <<<<<<<<<<<<<<
 *         dest_start = op[3]
 *         dest_end = op[4]
 */
    __Pyx_TraceLine(117,0,__PYX_ERR(0, 117, __pyx_L1_error))
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_op, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_11 = __Pyx_PyInt_As_size_t(__pyx_t_8); if (unlikely((__pyx_t_11 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_src_end = __pyx_t_11;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":118
 *         src_start = op[1]
 *         src_end = op[2]
 *         dest_start = op[3]             # <<<<<<<<<<<<<<
 *         dest_end = op[4]
 * 
 */
    __Pyx_TraceLine(118,0,__PYX_ERR(0, 118, __pyx_L1_error))
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_op, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_11 = __Pyx_PyInt_As_size_t(__pyx_t_8); if (unlikely((__pyx_t_11 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 118, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_dest_start = __pyx_t_11;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":119
 *         src_end = op[2]
 *         dest_start = op[3]
 *         dest_end = op[4]             # <<<<<<<<<<<<<<
 * 
 *         if src_end > src_len or dest_end > dest_len:
 */
    __Pyx_TraceLine(119,0,__PYX_ERR(0, 119, __pyx_L1_error))
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_op, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_11 = __Pyx_PyInt_As_size_t(__pyx_t_8); if (unlikely((__pyx_t_11 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_dest_end = __pyx_t_11;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":121
 *         dest_end = op[4]
 * 
 *         if src_end > src_len or dest_end > dest_len:             # <<<<<<<<<<<<<<
 *             raise ValueError("List of edit operations invalid")
 *         elif src_end < src_start or dest_end < dest_start:
 */
    __Pyx_TraceLine(121,0,__PYX_ERR(0, 121, __pyx_L1_error))
    __pyx_t_3 = (__pyx_v_src_end > __pyx_v_src_len);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_dest_end > __pyx_v_dest_len);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L10_bool_binop_done:;
    if (unlikely(__pyx_t_2)) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":122
 * 
 *         if src_end > src_len or dest_end > dest_len:
 *             raise ValueError("List of edit operations invalid")             # <<<<<<<<<<<<<<
 *         elif src_end < src_start or dest_end < dest_start:
 *             raise ValueError("List of edit operations invalid")
 */
      __Pyx_TraceLine(122,0,__PYX_ERR(0, 122, __pyx_L1_error))
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 122, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(0, 122, __pyx_L1_error)

      /* "rapidfuzz/distance/_initialize_cpp.pyx":121
 *         dest_end = op[4]
 * 
 *         if src_end > src_len or dest_end > dest_len:             # <<<<<<<<<<<<<<
 *             raise ValueError("List of edit operations invalid")
 *         elif src_end < src_start or dest_end < dest_start:
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":123
 *         if src_end > src_len or dest_end > dest_len:
 *             raise ValueError("List of edit operations invalid")
 *         elif src_end < src_start or dest_end < dest_start:             # <<<<<<<<<<<<<<
 *             raise ValueError("List of edit operations invalid")
 * 
 */
    __Pyx_TraceLine(123,0,__PYX_ERR(0, 123, __pyx_L1_error))
    __pyx_t_3 = (__pyx_v_src_end < __pyx_v_src_start);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_dest_end < __pyx_v_dest_start);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L12_bool_binop_done:;
    if (unlikely(__pyx_t_2)) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":124
 *             raise ValueError("List of edit operations invalid")
 *         elif src_end < src_start or dest_end < dest_start:
 *             raise ValueError("List of edit operations invalid")             # <<<<<<<<<<<<<<
 * 
 *         if edit_type == EditType.None or edit_type == EditType.Replace:
 */
      __Pyx_TraceLine(124,0,__PYX_ERR(0, 124, __pyx_L1_error))
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(0, 124, __pyx_L1_error)

      /* "rapidfuzz/distance/_initialize_cpp.pyx":123
 *         if src_end > src_len or dest_end > dest_len:
 *             raise ValueError("List of edit operations invalid")
 *         elif src_end < src_start or dest_end < dest_start:             # <<<<<<<<<<<<<<
 *             raise ValueError("List of edit operations invalid")
 * 
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":126
 *             raise ValueError("List of edit operations invalid")
 * 
 *         if edit_type == EditType.None or edit_type == EditType.Replace:             # <<<<<<<<<<<<<<
 *             if src_end - src_start != dest_end - dest_start or src_start == src_end:
 *                 raise ValueError("List of edit operations invalid")
 */
    __Pyx_TraceLine(126,0,__PYX_ERR(0, 126, __pyx_L1_error))
    __pyx_t_3 = (__pyx_v_edit_type == rapidfuzz::EditType::None);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L15_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_edit_type == rapidfuzz::EditType::Replace);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L15_bool_binop_done:;
    if (__pyx_t_2) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":127
 * 
 *         if edit_type == EditType.None or edit_type == EditType.Replace:
 *             if src_end - src_start != dest_end - dest_start or src_start == src_end:             # <<<<<<<<<<<<<<
 *                 raise ValueError("List of edit operations invalid")
 *         if edit_type == EditType.Insert:
 */
      __Pyx_TraceLine(127,0,__PYX_ERR(0, 127, __pyx_L1_error))
      __pyx_t_3 = ((__pyx_v_src_end - __pyx_v_src_start) != (__pyx_v_dest_end - __pyx_v_dest_start));
      if (!__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L18_bool_binop_done;
      }
      __pyx_t_3 = (__pyx_v_src_start == __pyx_v_src_end);
      __pyx_t_2 = __pyx_t_3;
      __pyx_L18_bool_binop_done:;
      if (unlikely(__pyx_t_2)) {

        /* "rapidfuzz/distance/_initialize_cpp.pyx":128
 *         if edit_type == EditType.None or edit_type == EditType.Replace:
 *             if src_end - src_start != dest_end - dest_start or src_start == src_end:
 *                 raise ValueError("List of edit operations invalid")             # <<<<<<<<<<<<<<
 *         if edit_type == EditType.Insert:
 *             if src_start != src_end or dest_start == dest_end:
 */
        __Pyx_TraceLine(128,0,__PYX_ERR(0, 128, __pyx_L1_error))
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 128, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_Raise(__pyx_t_8, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __PYX_ERR(0, 128, __pyx_L1_error)

        /* "rapidfuzz/distance/_initialize_cpp.pyx":127
 * 
 *         if edit_type == EditType.None or edit_type == EditType.Replace:
 *             if src_end - src_start != dest_end - dest_start or src_start == src_end:             # <<<<<<<<<<<<<<
 *                 raise ValueError("List of edit operations invalid")
 *         if edit_type == EditType.Insert:
 */
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":126
 *             raise ValueError("List of edit operations invalid")
 * 
 *         if edit_type == EditType.None or edit_type == EditType.Replace:             # <<<<<<<<<<<<<<
 *             if src_end - src_start != dest_end - dest_start or src_start == src_end:
 *                 raise ValueError("List of edit operations invalid")
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":129
 *             if src_end - src_start != dest_end - dest_start or src_start == src_end:
 *                 raise ValueError("List of edit operations invalid")
 *         if edit_type == EditType.Insert:             # <<<<<<<<<<<<<<
 *             if src_start != src_end or dest_start == dest_end:
 *                 raise ValueError("List of edit operations invalid")
 */
    __Pyx_TraceLine(129,0,__PYX_ERR(0, 129, __pyx_L1_error))
    __pyx_t_2 = (__pyx_v_edit_type == rapidfuzz::EditType::Insert);
    if (__pyx_t_2) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":130
 *                 raise ValueError("List of edit operations invalid")
 *         if edit_type == EditType.Insert:
 *             if src_start != src_end or dest_start == dest_end:             # <<<<<<<<<<<<<<
 *                 raise ValueError("List of edit operations invalid")
 *         elif edit_type == EditType.Delete:
 */
      __Pyx_TraceLine(130,0,__PYX_ERR(0, 130, __pyx_L1_error))
      __pyx_t_3 = (__pyx_v_src_start != __pyx_v_src_end);
      if (!__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L22_bool_binop_done;
      }
      __pyx_t_3 = (__pyx_v_dest_start == __pyx_v_dest_end);
      __pyx_t_2 = __pyx_t_3;
      __pyx_L22_bool_binop_done:;
      if (unlikely(__pyx_t_2)) {

        /* "rapidfuzz/distance/_initialize_cpp.pyx":131
 *         if edit_type == EditType.Insert:
 *             if src_start != src_end or dest_start == dest_end:
 *                 raise ValueError("List of edit operations invalid")             # <<<<<<<<<<<<<<
 *         elif edit_type == EditType.Delete:
 *             if src_start == src_end or dest_start != dest_end:
 */
        __Pyx_TraceLine(131,0,__PYX_ERR(0, 131, __pyx_L1_error))
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 131, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_Raise(__pyx_t_8, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __PYX_ERR(0, 131, __pyx_L1_error)

        /* "rapidfuzz/distance/_initialize_cpp.pyx":130
 *                 raise ValueError("List of edit operations invalid")
 *         if edit_type == EditType.Insert:
 *             if src_start != src_end or dest_start == dest_end:             # <<<<<<<<<<<<<<
 *                 raise ValueError("List of edit operations invalid")
 *         elif edit_type == EditType.Delete:
 */
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":129
 *             if src_end - src_start != dest_end - dest_start or src_start == src_end:
 *                 raise ValueError("List of edit operations invalid")
 *         if edit_type == EditType.Insert:             # <<<<<<<<<<<<<<
 *             if src_start != src_end or dest_start == dest_end:
 *                 raise ValueError("List of edit operations invalid")
 */
      goto __pyx_L20;
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":132
 *             if src_start != src_end or dest_start == dest_end:
 *                 raise ValueError("List of edit operations invalid")
 *         elif edit_type == EditType.Delete:             # <<<<<<<<<<<<<<
 *             if src_start == src_end or dest_start != dest_end:
 *                 raise ValueError("List of edit operations invalid")
 */
    __Pyx_TraceLine(132,0,__PYX_ERR(0, 132, __pyx_L1_error))
    __pyx_t_2 = (__pyx_v_edit_type == rapidfuzz::EditType::Delete);
    if (__pyx_t_2) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":133
 *                 raise ValueError("List of edit operations invalid")
 *         elif edit_type == EditType.Delete:
 *             if src_start == src_end or dest_start != dest_end:             # <<<<<<<<<<<<<<
 *                 raise ValueError("List of edit operations invalid")
 * 
 */
      __Pyx_TraceLine(133,0,__PYX_ERR(0, 133, __pyx_L1_error))
      __pyx_t_3 = (__pyx_v_src_start == __pyx_v_src_end);
      if (!__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L25_bool_binop_done;
      }
      __pyx_t_3 = (__pyx_v_dest_start != __pyx_v_dest_end);
      __pyx_t_2 = __pyx_t_3;
      __pyx_L25_bool_binop_done:;
      if (unlikely(__pyx_t_2)) {

        /* "rapidfuzz/distance/_initialize_cpp.pyx":134
 *         elif edit_type == EditType.Delete:
 *             if src_start == src_end or dest_start != dest_end:
 *                 raise ValueError("List of edit operations invalid")             # <<<<<<<<<<<<<<
 * 
 *         # merge similar adjacent blocks
 */
        __Pyx_TraceLine(134,0,__PYX_ERR(0, 134, __pyx_L1_error))
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 134, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_Raise(__pyx_t_8, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __PYX_ERR(0, 134, __pyx_L1_error)

        /* "rapidfuzz/distance/_initialize_cpp.pyx":133
 *                 raise ValueError("List of edit operations invalid")
 *         elif edit_type == EditType.Delete:
 *             if src_start == src_end or dest_start != dest_end:             # <<<<<<<<<<<<<<
 *                 raise ValueError("List of edit operations invalid")
 * 
 */
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":132
 *             if src_start != src_end or dest_start == dest_end:
 *                 raise ValueError("List of edit operations invalid")
 *         elif edit_type == EditType.Delete:             # <<<<<<<<<<<<<<
 *             if src_start == src_end or dest_start != dest_end:
 *                 raise ValueError("List of edit operations invalid")
 */
    }
    __pyx_L20:;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":137
 * 
 *         # merge similar adjacent blocks
 *         if not result.empty():             # <<<<<<<<<<<<<<
 *             if result.back().type == edit_type and result.back().src_end == src_start and result.back().dest_end == dest_start:
 *                 result.back().src_end = src_end
 */
    __Pyx_TraceLine(137,0,__PYX_ERR(0, 137, __pyx_L1_error))
    __pyx_t_2 = (!__pyx_v_result.empty());
    if (__pyx_t_2) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":138
 *         # merge similar adjacent blocks
 *         if not result.empty():
 *             if result.back().type == edit_type and result.back().src_end == src_start and result.back().dest_end == dest_start:             # <<<<<<<<<<<<<<
 *                 result.back().src_end = src_end
 *                 result.back().dest_end = dest_end
 */
      __Pyx_TraceLine(138,0,__PYX_ERR(0, 138, __pyx_L1_error))
      try {
        __pyx_t_12 = __pyx_v_result.back();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 138, __pyx_L1_error)
      }
      __pyx_t_3 = (__pyx_t_12->type == __pyx_v_edit_type);
      if (__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L29_bool_binop_done;
      }
      try {
        __pyx_t_13 = __pyx_v_result.back();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 138, __pyx_L1_error)
      }
      __pyx_t_3 = (__pyx_t_13->src_end == __pyx_v_src_start);
      if (__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L29_bool_binop_done;
      }
      try {
        __pyx_t_14 = __pyx_v_result.back();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 138, __pyx_L1_error)
      }
      __pyx_t_3 = (__pyx_t_14->dest_end == __pyx_v_dest_start);
      __pyx_t_2 = __pyx_t_3;
      __pyx_L29_bool_binop_done:;
      if (__pyx_t_2) {

        /* "rapidfuzz/distance/_initialize_cpp.pyx":139
 *         if not result.empty():
 *             if result.back().type == edit_type and result.back().src_end == src_start and result.back().dest_end == dest_start:
 *                 result.back().src_end = src_end             # <<<<<<<<<<<<<<
 *                 result.back().dest_end = dest_end
 *                 continue
 */
        __Pyx_TraceLine(139,0,__PYX_ERR(0, 139, __pyx_L1_error))
        try {
          __pyx_t_15 = __pyx_v_result.back();
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 139, __pyx_L1_error)
        }
        __pyx_t_15->src_end = __pyx_v_src_end;

        /* "rapidfuzz/distance/_initialize_cpp.pyx":140
 *             if result.back().type == edit_type and result.back().src_end == src_start and result.back().dest_end == dest_start:
 *                 result.back().src_end = src_end
 *                 result.back().dest_end = dest_end             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
        __Pyx_TraceLine(140,0,__PYX_ERR(0, 140, __pyx_L1_error))
        try {
          __pyx_t_16 = __pyx_v_result.back();
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 140, __pyx_L1_error)
        }
        __pyx_t_16->dest_end = __pyx_v_dest_end;

        /* "rapidfuzz/distance/_initialize_cpp.pyx":141
 *                 result.back().src_end = src_end
 *                 result.back().dest_end = dest_end
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *         result.emplace_back(edit_type, src_start, src_end, dest_start, dest_end)
 */
        __Pyx_TraceLine(141,0,__PYX_ERR(0, 141, __pyx_L1_error))
        goto __pyx_L6_continue;

        /* "rapidfuzz/distance/_initialize_cpp.pyx":138
 *         # merge similar adjacent blocks
 *         if not result.empty():
 *             if result.back().type == edit_type and result.back().src_end == src_start and result.back().dest_end == dest_start:             # <<<<<<<<<<<<<<
 *                 result.back().src_end = src_end
 *                 result.back().dest_end = dest_end
 */
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":137
 * 
 *         # merge similar adjacent blocks
 *         if not result.empty():             # <<<<<<<<<<<<<<
 *             if result.back().type == edit_type and result.back().src_end == src_start and result.back().dest_end == dest_start:
 *                 result.back().src_end = src_end
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":143
 *                 continue
 * 
 *         result.emplace_back(edit_type, src_start, src_end, dest_start, dest_end)             # <<<<<<<<<<<<<<
 * 
 *     # check if edit operations span the complete string
 */
    __Pyx_TraceLine(143,0,__PYX_ERR(0, 143, __pyx_L1_error))
    __pyx_v_result.emplace_back(__pyx_v_edit_type, __pyx_v_src_start, __pyx_v_src_end, __pyx_v_dest_start, __pyx_v_dest_end);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":111
 *     result.set_dest_len(dest_len)
 *     result.reserve(ops_len)
 *     for op in ops:             # <<<<<<<<<<<<<<
 *         if len(op) != 5:
 *             raise TypeError("Expected list of 3-tuples, or a list of 5-tuples")
 */
    __Pyx_TraceLine(111,0,__PYX_ERR(0, 111, __pyx_L1_error))
    __pyx_L6_continue:;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":146
 * 
 *     # check if edit operations span the complete string
 *     if result[0].src_begin != 0 or result[0].dest_begin != 0:             # <<<<<<<<<<<<<<
 *         raise ValueError("List of edit operations does not start at position 0")
 *     if result.back().src_end != src_len or result.back().dest_end != dest_len:
 */
  __Pyx_TraceLine(146,0,__PYX_ERR(0, 146, __pyx_L1_error))
  try {
    __pyx_t_17 = __pyx_v_result[0];
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 146, __pyx_L1_error)
  }
  __pyx_t_3 = (__pyx_t_17.src_begin != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L34_bool_binop_done;
  }
  try {
    __pyx_t_17 = __pyx_v_result[0];
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 146, __pyx_L1_error)
  }
  __pyx_t_3 = (__pyx_t_17.dest_begin != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L34_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":147
 *     # check if edit operations span the complete string
 *     if result[0].src_begin != 0 or result[0].dest_begin != 0:
 *         raise ValueError("List of edit operations does not start at position 0")             # <<<<<<<<<<<<<<
 *     if result.back().src_end != src_len or result.back().dest_end != dest_len:
 *         raise ValueError("List of edit operations does not end at the string ends")
 */
    __Pyx_TraceLine(147,0,__PYX_ERR(0, 147, __pyx_L1_error))
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 147, __pyx_L1_error)

    /* "rapidfuzz/distance/_initialize_cpp.pyx":146
 * 
 *     # check if edit operations span the complete string
 *     if result[0].src_begin != 0 or result[0].dest_begin != 0:             # <<<<<<<<<<<<<<
 *         raise ValueError("List of edit operations does not start at position 0")
 *     if result.back().src_end != src_len or result.back().dest_end != dest_len:
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":148
 *     if result[0].src_begin != 0 or result[0].dest_begin != 0:
 *         raise ValueError("List of edit operations does not start at position 0")
 *     if result.back().src_end != src_len or result.back().dest_end != dest_len:             # <<<<<<<<<<<<<<
 *         raise ValueError("List of edit operations does not end at the string ends")
 *     for i in range(0, result.size() - 1):
 */
  __Pyx_TraceLine(148,0,__PYX_ERR(0, 148, __pyx_L1_error))
  try {
    __pyx_t_18 = __pyx_v_result.back();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 148, __pyx_L1_error)
  }
  __pyx_t_3 = (__pyx_t_18->src_end != __pyx_v_src_len);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L37_bool_binop_done;
  }
  try {
    __pyx_t_19 = __pyx_v_result.back();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 148, __pyx_L1_error)
  }
  __pyx_t_3 = (__pyx_t_19->dest_end != __pyx_v_dest_len);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L37_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":149
 *         raise ValueError("List of edit operations does not start at position 0")
 *     if result.back().src_end != src_len or result.back().dest_end != dest_len:
 *         raise ValueError("List of edit operations does not end at the string ends")             # <<<<<<<<<<<<<<
 *     for i in range(0, result.size() - 1):
 *         if result[i + 1].src_begin != result[i].src_end or result[i + 1].dest_begin != result[i].dest_end:
 */
    __Pyx_TraceLine(149,0,__PYX_ERR(0, 149, __pyx_L1_error))
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 149, __pyx_L1_error)

    /* "rapidfuzz/distance/_initialize_cpp.pyx":148
 *     if result[0].src_begin != 0 or result[0].dest_begin != 0:
 *         raise ValueError("List of edit operations does not start at position 0")
 *     if result.back().src_end != src_len or result.back().dest_end != dest_len:             # <<<<<<<<<<<<<<
 *         raise ValueError("List of edit operations does not end at the string ends")
 *     for i in range(0, result.size() - 1):
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":150
 *     if result.back().src_end != src_len or result.back().dest_end != dest_len:
 *         raise ValueError("List of edit operations does not end at the string ends")
 *     for i in range(0, result.size() - 1):             # <<<<<<<<<<<<<<
 *         if result[i + 1].src_begin != result[i].src_end or result[i + 1].dest_begin != result[i].dest_end:
 *             raise ValueError("List of edit operations is not continuous")
 */
  __Pyx_TraceLine(150,0,__PYX_ERR(0, 150, __pyx_L1_error))
  __pyx_t_11 = (__pyx_v_result.size() - 1);
  __pyx_t_20 = __pyx_t_11;
  for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
    __pyx_v_i = __pyx_t_21;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":151
 *         raise ValueError("List of edit operations does not end at the string ends")
 *     for i in range(0, result.size() - 1):
 *         if result[i + 1].src_begin != result[i].src_end or result[i + 1].dest_begin != result[i].dest_end:             # <<<<<<<<<<<<<<
 *             raise ValueError("List of edit operations is not continuous")
 * 
 */
    __Pyx_TraceLine(151,0,__PYX_ERR(0, 151, __pyx_L1_error))
    try {
      __pyx_t_17 = __pyx_v_result[(__pyx_v_i + 1)];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 151, __pyx_L1_error)
    }
    try {
      __pyx_t_22 = __pyx_v_result[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 151, __pyx_L1_error)
    }
    __pyx_t_3 = (__pyx_t_17.src_begin != __pyx_t_22.src_end);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L42_bool_binop_done;
    }
    try {
      __pyx_t_22 = __pyx_v_result[(__pyx_v_i + 1)];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 151, __pyx_L1_error)
    }
    try {
      __pyx_t_17 = __pyx_v_result[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 151, __pyx_L1_error)
    }
    __pyx_t_3 = (__pyx_t_22.dest_begin != __pyx_t_17.dest_end);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L42_bool_binop_done:;
    if (unlikely(__pyx_t_2)) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":152
 *     for i in range(0, result.size() - 1):
 *         if result[i + 1].src_begin != result[i].src_end or result[i + 1].dest_begin != result[i].dest_end:
 *             raise ValueError("List of edit operations is not continuous")             # <<<<<<<<<<<<<<
 * 
 *     result.shrink_to_fit()
 */
      __Pyx_TraceLine(152,0,__PYX_ERR(0, 152, __pyx_L1_error))
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 152, __pyx_L1_error)

      /* "rapidfuzz/distance/_initialize_cpp.pyx":151
 *         raise ValueError("List of edit operations does not end at the string ends")
 *     for i in range(0, result.size() - 1):
 *         if result[i + 1].src_begin != result[i].src_end or result[i + 1].dest_begin != result[i].dest_end:             # <<<<<<<<<<<<<<
 *             raise ValueError("List of edit operations is not continuous")
 * 
 */
    }
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":154
 *             raise ValueError("List of edit operations is not continuous")
 * 
 *     result.shrink_to_fit()             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __Pyx_TraceLine(154,0,__PYX_ERR(0, 154, __pyx_L1_error))
  try {
    __pyx_v_result.shrink_to_fit();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 154, __pyx_L1_error)
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":155
 * 
 *     result.shrink_to_fit()
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cdef list editops_to_list(const RfEditops& ops):
 */
  __Pyx_TraceLine(155,0,__PYX_ERR(0, 155, __pyx_L1_error))
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":99
 *     return result
 * 
 * cdef RfOpcodes list_to_opcodes(ops, size_t src_len, size_t dest_len) except *:             # <<<<<<<<<<<<<<
 *     cdef RfOpcodes result
 *     cdef size_t i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.list_to_opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_op);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":157
 *     return result
 * 
 * cdef list editops_to_list(const RfEditops& ops):             # <<<<<<<<<<<<<<
 *     cdef size_t op_count = ops.size()
 *     cdef list result_list = PyList_New(<Py_ssize_t>op_count)
 */

static PyObject *__pyx_f_9rapidfuzz_8distance_15_initialize_cpp_editops_to_list(rapidfuzz::Editops const &__pyx_v_ops) {
  size_t __pyx_v_op_count;
  PyObject *__pyx_v_result_list = 0;
  size_t __pyx_v_i;
  PyObject *__pyx_v_result_item = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  rapidfuzz::EditOp __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("editops_to_list", 1);
  __Pyx_TraceCall("editops_to_list", __pyx_f[0], 157, 0, __PYX_ERR(0, 157, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":158
 * 
 * cdef list editops_to_list(const RfEditops& ops):
 *     cdef size_t op_count = ops.size()             # <<<<<<<<<<<<<<
 *     cdef list result_list = PyList_New(<Py_ssize_t>op_count)
 *     for i in range(op_count):
 */
  __Pyx_TraceLine(158,0,__PYX_ERR(0, 158, __pyx_L1_error))
  __pyx_v_op_count = __pyx_v_ops.size();

  /* "rapidfuzz/distance/_initialize_cpp.pyx":159
 * cdef list editops_to_list(const RfEditops& ops):
 *     cdef size_t op_count = ops.size()
 *     cdef list result_list = PyList_New(<Py_ssize_t>op_count)             # <<<<<<<<<<<<<<
 *     for i in range(op_count):
 *         result_item = (edit_type_to_str(ops[i].type), ops[i].src_pos, ops[i].dest_pos)
 */
  __Pyx_TraceLine(159,0,__PYX_ERR(0, 159, __pyx_L1_error))
  __pyx_t_1 = PyList_New(((Py_ssize_t)__pyx_v_op_count)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":160
 *     cdef size_t op_count = ops.size()
 *     cdef list result_list = PyList_New(<Py_ssize_t>op_count)
 *     for i in range(op_count):             # <<<<<<<<<<<<<<
 *         result_item = (edit_type_to_str(ops[i].type), ops[i].src_pos, ops[i].dest_pos)
 *         Py_INCREF(result_item)
 */
  __Pyx_TraceLine(160,0,__PYX_ERR(0, 160, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_op_count;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":161
 *     cdef list result_list = PyList_New(<Py_ssize_t>op_count)
 *     for i in range(op_count):
 *         result_item = (edit_type_to_str(ops[i].type), ops[i].src_pos, ops[i].dest_pos)             # <<<<<<<<<<<<<<
 *         Py_INCREF(result_item)
 *         PyList_SET_ITEM(result_list, <Py_ssize_t>i, result_item)
 */
    __Pyx_TraceLine(161,0,__PYX_ERR(0, 161, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 161, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_edit_type_to_str(__pyx_t_5.type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 161, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_FromSize_t(__pyx_t_5.src_pos); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 161, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyInt_FromSize_t(__pyx_t_5.dest_pos); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6)) __PYX_ERR(0, 161, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_7);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7)) __PYX_ERR(0, 161, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_result_item, ((PyObject*)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":162
 *     for i in range(op_count):
 *         result_item = (edit_type_to_str(ops[i].type), ops[i].src_pos, ops[i].dest_pos)
 *         Py_INCREF(result_item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(result_list, <Py_ssize_t>i, result_item)
 * 
 */
    __Pyx_TraceLine(162,0,__PYX_ERR(0, 162, __pyx_L1_error))
    Py_INCREF(__pyx_v_result_item);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":163
 *         result_item = (edit_type_to_str(ops[i].type), ops[i].src_pos, ops[i].dest_pos)
 *         Py_INCREF(result_item)
 *         PyList_SET_ITEM(result_list, <Py_ssize_t>i, result_item)             # <<<<<<<<<<<<<<
 * 
 *     return result_list
 */
    __Pyx_TraceLine(163,0,__PYX_ERR(0, 163, __pyx_L1_error))
    PyList_SET_ITEM(__pyx_v_result_list, ((Py_ssize_t)__pyx_v_i), __pyx_v_result_item);
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":165
 *         PyList_SET_ITEM(result_list, <Py_ssize_t>i, result_item)
 * 
 *     return result_list             # <<<<<<<<<<<<<<
 * 
 * cdef list opcodes_to_list(const RfOpcodes& ops):
 */
  __Pyx_TraceLine(165,0,__PYX_ERR(0, 165, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result_list);
  __pyx_r = __pyx_v_result_list;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":157
 *     return result
 * 
 * cdef list editops_to_list(const RfEditops& ops):             # <<<<<<<<<<<<<<
 *     cdef size_t op_count = ops.size()
 *     cdef list result_list = PyList_New(<Py_ssize_t>op_count)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.editops_to_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result_list);
  __Pyx_XDECREF(__pyx_v_result_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":167
 *     return result_list
 * 
 * cdef list opcodes_to_list(const RfOpcodes& ops):             # <<<<<<<<<<<<<<
 *     cdef size_t op_count = ops.size()
 *     cdef list result_list = PyList_New(<Py_ssize_t>op_count)
 */

static PyObject *__pyx_f_9rapidfuzz_8distance_15_initialize_cpp_opcodes_to_list(rapidfuzz::Opcodes const &__pyx_v_ops) {
  size_t __pyx_v_op_count;
  PyObject *__pyx_v_result_list = 0;
  size_t __pyx_v_i;
  PyObject *__pyx_v_result_item = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  rapidfuzz::Opcode __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("opcodes_to_list", 1);
  __Pyx_TraceCall("opcodes_to_list", __pyx_f[0], 167, 0, __PYX_ERR(0, 167, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":168
 * 
 * cdef list opcodes_to_list(const RfOpcodes& ops):
 *     cdef size_t op_count = ops.size()             # <<<<<<<<<<<<<<
 *     cdef list result_list = PyList_New(<Py_ssize_t>op_count)
 *     for i in range(op_count):
 */
  __Pyx_TraceLine(168,0,__PYX_ERR(0, 168, __pyx_L1_error))
  __pyx_v_op_count = __pyx_v_ops.size();

  /* "rapidfuzz/distance/_initialize_cpp.pyx":169
 * cdef list opcodes_to_list(const RfOpcodes& ops):
 *     cdef size_t op_count = ops.size()
 *     cdef list result_list = PyList_New(<Py_ssize_t>op_count)             # <<<<<<<<<<<<<<
 *     for i in range(op_count):
 *         result_item = (
 */
  __Pyx_TraceLine(169,0,__PYX_ERR(0, 169, __pyx_L1_error))
  __pyx_t_1 = PyList_New(((Py_ssize_t)__pyx_v_op_count)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":170
 *     cdef size_t op_count = ops.size()
 *     cdef list result_list = PyList_New(<Py_ssize_t>op_count)
 *     for i in range(op_count):             # <<<<<<<<<<<<<<
 *         result_item = (
 *             edit_type_to_str(ops[i].type),
 */
  __Pyx_TraceLine(170,0,__PYX_ERR(0, 170, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_op_count;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":172
 *     for i in range(op_count):
 *         result_item = (
 *             edit_type_to_str(ops[i].type),             # <<<<<<<<<<<<<<
 *             ops[i].src_begin, ops[i].src_end,
 *             ops[i].dest_begin, ops[i].dest_end)
 */
    __Pyx_TraceLine(172,0,__PYX_ERR(0, 172, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 172, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_edit_type_to_str(__pyx_t_5.type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":173
 *         result_item = (
 *             edit_type_to_str(ops[i].type),
 *             ops[i].src_begin, ops[i].src_end,             # <<<<<<<<<<<<<<
 *             ops[i].dest_begin, ops[i].dest_end)
 *         Py_INCREF(result_item)
 */
    __Pyx_TraceLine(173,0,__PYX_ERR(0, 173, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 173, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_FromSize_t(__pyx_t_5.src_begin); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 173, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyInt_FromSize_t(__pyx_t_5.src_end); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":174
 *             edit_type_to_str(ops[i].type),
 *             ops[i].src_begin, ops[i].src_end,
 *             ops[i].dest_begin, ops[i].dest_end)             # <<<<<<<<<<<<<<
 *         Py_INCREF(result_item)
 *         PyList_SET_ITEM(result_list, <Py_ssize_t>i, result_item)
 */
    __Pyx_TraceLine(174,0,__PYX_ERR(0, 174, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 174, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_t_5.dest_begin); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 174, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_PyInt_FromSize_t(__pyx_t_5.dest_end); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":172
 *     for i in range(op_count):
 *         result_item = (
 *             edit_type_to_str(ops[i].type),             # <<<<<<<<<<<<<<
 *             ops[i].src_begin, ops[i].src_end,
 *             ops[i].dest_begin, ops[i].dest_end)
 */
    __Pyx_TraceLine(172,0,__PYX_ERR(0, 172, __pyx_L1_error))
    __pyx_t_10 = PyTuple_New(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6)) __PYX_ERR(0, 172, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_7);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_7)) __PYX_ERR(0, 172, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_8);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_8)) __PYX_ERR(0, 172, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_9);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_t_9)) __PYX_ERR(0, 172, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_result_item, ((PyObject*)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":175
 *             ops[i].src_begin, ops[i].src_end,
 *             ops[i].dest_begin, ops[i].dest_end)
 *         Py_INCREF(result_item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(result_list, <Py_ssize_t>i, result_item)
 * 
 */
    __Pyx_TraceLine(175,0,__PYX_ERR(0, 175, __pyx_L1_error))
    Py_INCREF(__pyx_v_result_item);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":176
 *             ops[i].dest_begin, ops[i].dest_end)
 *         Py_INCREF(result_item)
 *         PyList_SET_ITEM(result_list, <Py_ssize_t>i, result_item)             # <<<<<<<<<<<<<<
 * 
 *     return result_list
 */
    __Pyx_TraceLine(176,0,__PYX_ERR(0, 176, __pyx_L1_error))
    PyList_SET_ITEM(__pyx_v_result_list, ((Py_ssize_t)__pyx_v_i), __pyx_v_result_item);
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":178
 *         PyList_SET_ITEM(result_list, <Py_ssize_t>i, result_item)
 * 
 *     return result_list             # <<<<<<<<<<<<<<
 * 
 * cdef class MatchingBlock:
 */
  __Pyx_TraceLine(178,0,__PYX_ERR(0, 178, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result_list);
  __pyx_r = __pyx_v_result_list;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":167
 *     return result_list
 * 
 * cdef list opcodes_to_list(const RfOpcodes& ops):             # <<<<<<<<<<<<<<
 *     cdef size_t op_count = ops.size()
 *     cdef list result_list = PyList_New(<Py_ssize_t>op_count)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.opcodes_to_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result_list);
  __Pyx_XDECREF(__pyx_v_result_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":189
 *     cdef public size_t size
 * 
 *     def __cinit__(self, size_t a, size_t b, size_t size):             # <<<<<<<<<<<<<<
 *         self.a = a
 *         self.b = b
 */

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_a;
  size_t __pyx_v_b;
  size_t __pyx_v_size;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_size,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 189, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 189, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 189, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_size)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 189, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 189, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 189, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
      values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
    }
    __pyx_v_a = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_a == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 189, __pyx_L3_error)
    __pyx_v_b = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_b == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 189, __pyx_L3_error)
    __pyx_v_size = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 189, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 189, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock___cinit__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_size);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock___cinit__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self, size_t __pyx_v_a, size_t __pyx_v_b, size_t __pyx_v_size) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 189, 0, __PYX_ERR(0, 189, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":190
 * 
 *     def __cinit__(self, size_t a, size_t b, size_t size):
 *         self.a = a             # <<<<<<<<<<<<<<
 *         self.b = b
 *         self.size = size
 */
  __Pyx_TraceLine(190,0,__PYX_ERR(0, 190, __pyx_L1_error))
  __pyx_v_self->a = __pyx_v_a;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":191
 *     def __cinit__(self, size_t a, size_t b, size_t size):
 *         self.a = a
 *         self.b = b             # <<<<<<<<<<<<<<
 *         self.size = size
 * 
 */
  __Pyx_TraceLine(191,0,__PYX_ERR(0, 191, __pyx_L1_error))
  __pyx_v_self->b = __pyx_v_b;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":192
 *         self.a = a
 *         self.b = b
 *         self.size = size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_TraceLine(192,0,__PYX_ERR(0, 192, __pyx_L1_error))
  __pyx_v_self->size = __pyx_v_size;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":189
 *     cdef public size_t size
 * 
 *     def __cinit__(self, size_t a, size_t b, size_t size):             # <<<<<<<<<<<<<<
 *         self.a = a
 *         self.b = b
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":194
 *         self.size = size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return 3
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_3__len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_2__len__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_2__len__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__len__", __pyx_f[0], 194, 0, __PYX_ERR(0, 194, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":195
 * 
 *     def __len__(self):
 *         return 3             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, other):
 */
  __Pyx_TraceLine(195,0,__PYX_ERR(0, 195, __pyx_L1_error))
  __pyx_r = 3;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":194
 *         self.size = size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return 3
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":197
 *         return 3
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         try:
 *             if len(other) != 3:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_5__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_5__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_4__eq__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_4__eq__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 1);
  __Pyx_TraceCall("__eq__", __pyx_f[0], 197, 0, __PYX_ERR(0, 197, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":198
 * 
 *     def __eq__(self, other):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(other) != 3:
 *                 return False
 */
  __Pyx_TraceLine(198,0,__PYX_ERR(0, 198, __pyx_L1_error))
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":199
 *     def __eq__(self, other):
 *         try:
 *             if len(other) != 3:             # <<<<<<<<<<<<<<
 *                 return False
 * 
 */
      __Pyx_TraceLine(199,0,__PYX_ERR(0, 199, __pyx_L3_error))
      __pyx_t_4 = PyObject_Length(__pyx_v_other); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 199, __pyx_L3_error)
      __pyx_t_5 = (__pyx_t_4 != 3);
      if (__pyx_t_5) {

        /* "rapidfuzz/distance/_initialize_cpp.pyx":200
 *         try:
 *             if len(other) != 3:
 *                 return False             # <<<<<<<<<<<<<<
 * 
 *             return (other[0] == self.a
 */
        __Pyx_TraceLine(200,0,__PYX_ERR(0, 200, __pyx_L3_error))
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_False);
        __pyx_r = Py_False;
        goto __pyx_L7_try_return;

        /* "rapidfuzz/distance/_initialize_cpp.pyx":199
 *     def __eq__(self, other):
 *         try:
 *             if len(other) != 3:             # <<<<<<<<<<<<<<
 *                 return False
 * 
 */
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":202
 *                 return False
 * 
 *             return (other[0] == self.a             # <<<<<<<<<<<<<<
 *                 and other[1] == self.b
 *                 and other[2] == self.size)
 */
      __Pyx_TraceLine(202,0,__PYX_ERR(0, 202, __pyx_L3_error))
      __Pyx_XDECREF(__pyx_r);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":203
 * 
 *             return (other[0] == self.a
 *                 and other[1] == self.b             # <<<<<<<<<<<<<<
 *                 and other[2] == self.size)
 *         except:
 */
      __Pyx_TraceLine(203,0,__PYX_ERR(0, 203, __pyx_L3_error))
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_other, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 202, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":202
 *                 return False
 * 
 *             return (other[0] == self.a             # <<<<<<<<<<<<<<
 *                 and other[1] == self.b
 *                 and other[2] == self.size)
 */
      __Pyx_TraceLine(202,0,__PYX_ERR(0, 202, __pyx_L3_error))
      __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_v_self->a); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 202, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyObject_RichCompare(__pyx_t_7, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 202, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 202, __pyx_L3_error)
      if (__pyx_t_5) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_6 = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L10_bool_binop_done;
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":203
 * 
 *             return (other[0] == self.a
 *                 and other[1] == self.b             # <<<<<<<<<<<<<<
 *                 and other[2] == self.size)
 *         except:
 */
      __Pyx_TraceLine(203,0,__PYX_ERR(0, 203, __pyx_L3_error))
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_other, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 203, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_v_self->b); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 203, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyObject_RichCompare(__pyx_t_9, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 203, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 203, __pyx_L3_error)
      if (__pyx_t_5) {
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        __Pyx_INCREF(__pyx_t_7);
        __pyx_t_6 = __pyx_t_7;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L10_bool_binop_done;
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":204
 *             return (other[0] == self.a
 *                 and other[1] == self.b
 *                 and other[2] == self.size)             # <<<<<<<<<<<<<<
 *         except:
 *             return False
 */
      __Pyx_TraceLine(204,0,__PYX_ERR(0, 204, __pyx_L3_error))
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_other, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 204, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_v_self->size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 204, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyObject_RichCompare(__pyx_t_7, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 204, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_INCREF(__pyx_t_9);
      __pyx_t_6 = __pyx_t_9;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_L10_bool_binop_done:;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L7_try_return;

      /* "rapidfuzz/distance/_initialize_cpp.pyx":198
 * 
 *     def __eq__(self, other):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(other) != 3:
 *                 return False
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":205
 *                 and other[1] == self.b
 *                 and other[2] == self.size)
 *         except:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    __Pyx_TraceLine(205,0,__PYX_ERR(0, 205, __pyx_L5_except_error))
    /*except:*/ {
      __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 205, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":206
 *                 and other[2] == self.size)
 *         except:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Py_ssize_t i):
 */
      __Pyx_TraceLine(206,0,__PYX_ERR(0, 206, __pyx_L5_except_error))
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L6_except_return;
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":198
 * 
 *     def __eq__(self, other):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(other) != 3:
 *                 return False
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":197
 *         return 3
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         try:
 *             if len(other) != 3:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":208
 *             return False
 * 
 *     def __getitem__(self, Py_ssize_t i):             # <<<<<<<<<<<<<<
 *         if i==0 or i==-3: return self.a
 *         if i==1 or i==-2: return self.b
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyIndex_AsSsize_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_6__getitem__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_v_self), ((Py_ssize_t)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_6__getitem__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self, Py_ssize_t __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 1);
  __Pyx_TraceCall("__getitem__", __pyx_f[0], 208, 0, __PYX_ERR(0, 208, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":209
 * 
 *     def __getitem__(self, Py_ssize_t i):
 *         if i==0 or i==-3: return self.a             # <<<<<<<<<<<<<<
 *         if i==1 or i==-2: return self.b
 *         if i==2 or i==-1: return self.size
 */
  __Pyx_TraceLine(209,0,__PYX_ERR(0, 209, __pyx_L1_error))
  switch (__pyx_v_i) {
    case 0:
    CYTHON_FALLTHROUGH;
    case -3L:
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
    default: break;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":210
 *     def __getitem__(self, Py_ssize_t i):
 *         if i==0 or i==-3: return self.a
 *         if i==1 or i==-2: return self.b             # <<<<<<<<<<<<<<
 *         if i==2 or i==-1: return self.size
 * 
 */
  __Pyx_TraceLine(210,0,__PYX_ERR(0, 210, __pyx_L1_error))
  switch (__pyx_v_i) {
    case 1:
    CYTHON_FALLTHROUGH;
    case -2L:
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
    default: break;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":211
 *         if i==0 or i==-3: return self.a
 *         if i==1 or i==-2: return self.b
 *         if i==2 or i==-1: return self.size             # <<<<<<<<<<<<<<
 * 
 *         raise IndexError('MatchingBlock index out of range')
 */
  __Pyx_TraceLine(211,0,__PYX_ERR(0, 211, __pyx_L1_error))
  switch (__pyx_v_i) {
    case 2:
    CYTHON_FALLTHROUGH;
    case -1L:
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
    default: break;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":213
 *         if i==2 or i==-1: return self.size
 * 
 *         raise IndexError('MatchingBlock index out of range')             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_TraceLine(213,0,__PYX_ERR(0, 213, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 213, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":208
 *             return False
 * 
 *     def __getitem__(self, Py_ssize_t i):             # <<<<<<<<<<<<<<
 *         if i==0 or i==-3: return self.a
 *         if i==1 or i==-2: return self.b
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_10generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "rapidfuzz/distance/_initialize_cpp.pyx":215
 *         raise IndexError('MatchingBlock index out of range')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         yield self.a
 *         yield self.b
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_9__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_9__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_8__iter__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_8__iter__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 215, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_10generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_MatchingBlock___iter, __pyx_n_s_rapidfuzz_distance__initialize_c); if (unlikely(!gen)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_10generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ *__pyx_cur_scope = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  __Pyx_TraceCall("__iter__", __pyx_f[0], 215, 0, __PYX_ERR(0, 215, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    case 2: goto __pyx_L5_resume_from_yield;
    case 3: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 215, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":216
 * 
 *     def __iter__(self):
 *         yield self.a             # <<<<<<<<<<<<<<
 *         yield self.b
 *         yield self.size
 */
  __Pyx_TraceLine(216,0,__PYX_ERR(0, 216, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_cur_scope->__pyx_v_self->a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 216, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":217
 *     def __iter__(self):
 *         yield self.a
 *         yield self.b             # <<<<<<<<<<<<<<
 *         yield self.size
 * 
 */
  __Pyx_TraceLine(217,0,__PYX_ERR(0, 217, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_cur_scope->__pyx_v_self->b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 2;
  return __pyx_r;
  __pyx_L5_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 217, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":218
 *         yield self.a
 *         yield self.b
 *         yield self.size             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_TraceLine(218,0,__PYX_ERR(0, 218, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_cur_scope->__pyx_v_self->size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 3;
  return __pyx_r;
  __pyx_L6_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 218, __pyx_L1_error)
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":215
 *         raise IndexError('MatchingBlock index out of range')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         yield self.a
 *         yield self.b
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":220
 *         yield self.size
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"MatchingBlock(a={self.a}, b={self.b}, size={self.size})"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_12__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_12__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_11__repr__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_11__repr__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);
  __Pyx_TraceCall("__repr__", __pyx_f[0], 220, 0, __PYX_ERR(0, 220, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":221
 * 
 *     def __repr__(self):
 *         return f"MatchingBlock(a={self.a}, b={self.b}, size={self.size})"             # <<<<<<<<<<<<<<
 * 
 * cdef list editops_to_matching_blocks(const RfEditops& ops):
 */
  __Pyx_TraceLine(221,0,__PYX_ERR(0, 221, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_MatchingBlock_a);
  __pyx_t_2 += 16;
  __Pyx_GIVEREF(__pyx_kp_u_MatchingBlock_a);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_MatchingBlock_a);
  __pyx_t_4 = __Pyx_PyUnicode_From_size_t(__pyx_v_self->a, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_b_2);
  __pyx_t_2 += 4;
  __Pyx_GIVEREF(__pyx_kp_u_b_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_b_2);
  __pyx_t_4 = __Pyx_PyUnicode_From_size_t(__pyx_v_self->b, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_size_2);
  __pyx_t_2 += 7;
  __Pyx_GIVEREF(__pyx_kp_u_size_2);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_size_2);
  __pyx_t_4 = __Pyx_PyUnicode_From_size_t(__pyx_v_self->size, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__12);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__12);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__12);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":220
 *         yield self.size
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"MatchingBlock(a={self.a}, b={self.b}, size={self.size})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":185
 *     """
 * 
 *     cdef public size_t a             # <<<<<<<<<<<<<<
 *     cdef public size_t b
 *     cdef public size_t size
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1a_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1a_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1a___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1a___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 185, 0, __PYX_ERR(0, 185, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.a.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1a_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1a_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1a_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1a_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__set__", __pyx_f[0], 185, 0, __PYX_ERR(0, 185, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 185, __pyx_L1_error)
  __pyx_v_self->a = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.a.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":186
 * 
 *     cdef public size_t a
 *     cdef public size_t b             # <<<<<<<<<<<<<<
 *     cdef public size_t size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1b_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1b_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1b___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1b___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 186, 0, __PYX_ERR(0, 186, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.b.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1b_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1b_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1b_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1b_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__set__", __pyx_f[0], 186, 0, __PYX_ERR(0, 186, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 186, __pyx_L1_error)
  __pyx_v_self->b = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.b.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":187
 *     cdef public size_t a
 *     cdef public size_t b
 *     cdef public size_t size             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, size_t a, size_t b, size_t size):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_4size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_4size___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_4size___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 187, 0, __PYX_ERR(0, 187, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_4size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_4size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_4size_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_4size_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__set__", __pyx_f[0], 187, 0, __PYX_ERR(0, 187, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 187, __pyx_L1_error)
  __pyx_v_self->size = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_14__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_14__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_14__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_14__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_13__reduce_cython__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_13__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__13)
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(2, 2, __pyx_L1_error))
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_16__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_16__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_16__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_16__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_15__setstate_cython__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_15__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__14)
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[2], 3, 0, __PYX_ERR(2, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(2, 4, __pyx_L1_error))
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.MatchingBlock.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":223
 *         return f"MatchingBlock(a={self.a}, b={self.b}, size={self.size})"
 * 
 * cdef list editops_to_matching_blocks(const RfEditops& ops):             # <<<<<<<<<<<<<<
 *     cdef MatchingBlock result_item
 *     cdef Py_ssize_t block_num = 0
 */

static PyObject *__pyx_f_9rapidfuzz_8distance_15_initialize_cpp_editops_to_matching_blocks(rapidfuzz::Editops const &__pyx_v_ops) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_result_item = 0;
  Py_ssize_t __pyx_v_block_num;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  size_t __pyx_v_src_pos;
  size_t __pyx_v_dest_pos;
  PyObject *__pyx_v_result_list = 0;
  size_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  rapidfuzz::EditOp __pyx_t_5;
  int __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("editops_to_matching_blocks", 1);
  __Pyx_TraceCall("editops_to_matching_blocks", __pyx_f[0], 223, 0, __PYX_ERR(0, 223, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":225
 * cdef list editops_to_matching_blocks(const RfEditops& ops):
 *     cdef MatchingBlock result_item
 *     cdef Py_ssize_t block_num = 0             # <<<<<<<<<<<<<<
 *     cdef size_t i = 0
 *     cdef size_t j = 0
 */
  __Pyx_TraceLine(225,0,__PYX_ERR(0, 225, __pyx_L1_error))
  __pyx_v_block_num = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":226
 *     cdef MatchingBlock result_item
 *     cdef Py_ssize_t block_num = 0
 *     cdef size_t i = 0             # <<<<<<<<<<<<<<
 *     cdef size_t j = 0
 *     cdef size_t src_pos = 0
 */
  __Pyx_TraceLine(226,0,__PYX_ERR(0, 226, __pyx_L1_error))
  __pyx_v_i = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":227
 *     cdef Py_ssize_t block_num = 0
 *     cdef size_t i = 0
 *     cdef size_t j = 0             # <<<<<<<<<<<<<<
 *     cdef size_t src_pos = 0
 *     cdef size_t dest_pos = 0
 */
  __Pyx_TraceLine(227,0,__PYX_ERR(0, 227, __pyx_L1_error))
  __pyx_v_j = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":228
 *     cdef size_t i = 0
 *     cdef size_t j = 0
 *     cdef size_t src_pos = 0             # <<<<<<<<<<<<<<
 *     cdef size_t dest_pos = 0
 *     for i in range(ops.size()):
 */
  __Pyx_TraceLine(228,0,__PYX_ERR(0, 228, __pyx_L1_error))
  __pyx_v_src_pos = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":229
 *     cdef size_t j = 0
 *     cdef size_t src_pos = 0
 *     cdef size_t dest_pos = 0             # <<<<<<<<<<<<<<
 *     for i in range(ops.size()):
 *         if src_pos < ops[i].src_pos or dest_pos < ops[i].dest_pos:
 */
  __Pyx_TraceLine(229,0,__PYX_ERR(0, 229, __pyx_L1_error))
  __pyx_v_dest_pos = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":230
 *     cdef size_t src_pos = 0
 *     cdef size_t dest_pos = 0
 *     for i in range(ops.size()):             # <<<<<<<<<<<<<<
 *         if src_pos < ops[i].src_pos or dest_pos < ops[i].dest_pos:
 *             if min(ops[i].src_pos - src_pos, ops[i].dest_pos - dest_pos) > 0:
 */
  __Pyx_TraceLine(230,0,__PYX_ERR(0, 230, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_ops.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":231
 *     cdef size_t dest_pos = 0
 *     for i in range(ops.size()):
 *         if src_pos < ops[i].src_pos or dest_pos < ops[i].dest_pos:             # <<<<<<<<<<<<<<
 *             if min(ops[i].src_pos - src_pos, ops[i].dest_pos - dest_pos) > 0:
 *                 block_num += 1
 */
    __Pyx_TraceLine(231,0,__PYX_ERR(0, 231, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 231, __pyx_L1_error)
    }
    __pyx_t_6 = (__pyx_v_src_pos < __pyx_t_5.src_pos);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L6_bool_binop_done;
    }
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 231, __pyx_L1_error)
    }
    __pyx_t_6 = (__pyx_v_dest_pos < __pyx_t_5.dest_pos);
    __pyx_t_4 = __pyx_t_6;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_4) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":232
 *     for i in range(ops.size()):
 *         if src_pos < ops[i].src_pos or dest_pos < ops[i].dest_pos:
 *             if min(ops[i].src_pos - src_pos, ops[i].dest_pos - dest_pos) > 0:             # <<<<<<<<<<<<<<
 *                 block_num += 1
 *             src_pos = ops[i].src_pos
 */
      __Pyx_TraceLine(232,0,__PYX_ERR(0, 232, __pyx_L1_error))
      try {
        __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 232, __pyx_L1_error)
      }
      __pyx_t_7 = (__pyx_t_5.dest_pos - __pyx_v_dest_pos);
      try {
        __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 232, __pyx_L1_error)
      }
      __pyx_t_8 = (__pyx_t_5.src_pos - __pyx_v_src_pos);
      __pyx_t_4 = (__pyx_t_7 < __pyx_t_8);
      if (__pyx_t_4) {
        __pyx_t_9 = __pyx_t_7;
      } else {
        __pyx_t_9 = __pyx_t_8;
      }
      __pyx_t_4 = (__pyx_t_9 > 0);
      if (__pyx_t_4) {

        /* "rapidfuzz/distance/_initialize_cpp.pyx":233
 *         if src_pos < ops[i].src_pos or dest_pos < ops[i].dest_pos:
 *             if min(ops[i].src_pos - src_pos, ops[i].dest_pos - dest_pos) > 0:
 *                 block_num += 1             # <<<<<<<<<<<<<<
 *             src_pos = ops[i].src_pos
 *             dest_pos = ops[i].dest_pos
 */
        __Pyx_TraceLine(233,0,__PYX_ERR(0, 233, __pyx_L1_error))
        __pyx_v_block_num = (__pyx_v_block_num + 1);

        /* "rapidfuzz/distance/_initialize_cpp.pyx":232
 *     for i in range(ops.size()):
 *         if src_pos < ops[i].src_pos or dest_pos < ops[i].dest_pos:
 *             if min(ops[i].src_pos - src_pos, ops[i].dest_pos - dest_pos) > 0:             # <<<<<<<<<<<<<<
 *                 block_num += 1
 *             src_pos = ops[i].src_pos
 */
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":234
 *             if min(ops[i].src_pos - src_pos, ops[i].dest_pos - dest_pos) > 0:
 *                 block_num += 1
 *             src_pos = ops[i].src_pos             # <<<<<<<<<<<<<<
 *             dest_pos = ops[i].dest_pos
 * 
 */
      __Pyx_TraceLine(234,0,__PYX_ERR(0, 234, __pyx_L1_error))
      try {
        __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 234, __pyx_L1_error)
      }
      __pyx_t_9 = __pyx_t_5.src_pos;
      __pyx_v_src_pos = __pyx_t_9;

      /* "rapidfuzz/distance/_initialize_cpp.pyx":235
 *                 block_num += 1
 *             src_pos = ops[i].src_pos
 *             dest_pos = ops[i].dest_pos             # <<<<<<<<<<<<<<
 * 
 *         if ops[i].type == EditType.Replace:
 */
      __Pyx_TraceLine(235,0,__PYX_ERR(0, 235, __pyx_L1_error))
      try {
        __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 235, __pyx_L1_error)
      }
      __pyx_t_9 = __pyx_t_5.dest_pos;
      __pyx_v_dest_pos = __pyx_t_9;

      /* "rapidfuzz/distance/_initialize_cpp.pyx":231
 *     cdef size_t dest_pos = 0
 *     for i in range(ops.size()):
 *         if src_pos < ops[i].src_pos or dest_pos < ops[i].dest_pos:             # <<<<<<<<<<<<<<
 *             if min(ops[i].src_pos - src_pos, ops[i].dest_pos - dest_pos) > 0:
 *                 block_num += 1
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":237
 *             dest_pos = ops[i].dest_pos
 * 
 *         if ops[i].type == EditType.Replace:             # <<<<<<<<<<<<<<
 *             src_pos += 1
 *             dest_pos += 1
 */
    __Pyx_TraceLine(237,0,__PYX_ERR(0, 237, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 237, __pyx_L1_error)
    }
    __pyx_t_4 = (__pyx_t_5.type == rapidfuzz::EditType::Replace);
    if (__pyx_t_4) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":238
 * 
 *         if ops[i].type == EditType.Replace:
 *             src_pos += 1             # <<<<<<<<<<<<<<
 *             dest_pos += 1
 *         elif ops[i].type == EditType.Delete:
 */
      __Pyx_TraceLine(238,0,__PYX_ERR(0, 238, __pyx_L1_error))
      __pyx_v_src_pos = (__pyx_v_src_pos + 1);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":239
 *         if ops[i].type == EditType.Replace:
 *             src_pos += 1
 *             dest_pos += 1             # <<<<<<<<<<<<<<
 *         elif ops[i].type == EditType.Delete:
 *             src_pos += 1
 */
      __Pyx_TraceLine(239,0,__PYX_ERR(0, 239, __pyx_L1_error))
      __pyx_v_dest_pos = (__pyx_v_dest_pos + 1);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":237
 *             dest_pos = ops[i].dest_pos
 * 
 *         if ops[i].type == EditType.Replace:             # <<<<<<<<<<<<<<
 *             src_pos += 1
 *             dest_pos += 1
 */
      goto __pyx_L9;
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":240
 *             src_pos += 1
 *             dest_pos += 1
 *         elif ops[i].type == EditType.Delete:             # <<<<<<<<<<<<<<
 *             src_pos += 1
 *         elif ops[i].type == EditType.Insert:
 */
    __Pyx_TraceLine(240,0,__PYX_ERR(0, 240, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 240, __pyx_L1_error)
    }
    __pyx_t_4 = (__pyx_t_5.type == rapidfuzz::EditType::Delete);
    if (__pyx_t_4) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":241
 *             dest_pos += 1
 *         elif ops[i].type == EditType.Delete:
 *             src_pos += 1             # <<<<<<<<<<<<<<
 *         elif ops[i].type == EditType.Insert:
 *             dest_pos += 1
 */
      __Pyx_TraceLine(241,0,__PYX_ERR(0, 241, __pyx_L1_error))
      __pyx_v_src_pos = (__pyx_v_src_pos + 1);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":240
 *             src_pos += 1
 *             dest_pos += 1
 *         elif ops[i].type == EditType.Delete:             # <<<<<<<<<<<<<<
 *             src_pos += 1
 *         elif ops[i].type == EditType.Insert:
 */
      goto __pyx_L9;
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":242
 *         elif ops[i].type == EditType.Delete:
 *             src_pos += 1
 *         elif ops[i].type == EditType.Insert:             # <<<<<<<<<<<<<<
 *             dest_pos += 1
 * 
 */
    __Pyx_TraceLine(242,0,__PYX_ERR(0, 242, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 242, __pyx_L1_error)
    }
    __pyx_t_4 = (__pyx_t_5.type == rapidfuzz::EditType::Insert);
    if (__pyx_t_4) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":243
 *             src_pos += 1
 *         elif ops[i].type == EditType.Insert:
 *             dest_pos += 1             # <<<<<<<<<<<<<<
 * 
 *     if src_pos < ops.get_src_len() or dest_pos < ops.get_dest_len():
 */
      __Pyx_TraceLine(243,0,__PYX_ERR(0, 243, __pyx_L1_error))
      __pyx_v_dest_pos = (__pyx_v_dest_pos + 1);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":242
 *         elif ops[i].type == EditType.Delete:
 *             src_pos += 1
 *         elif ops[i].type == EditType.Insert:             # <<<<<<<<<<<<<<
 *             dest_pos += 1
 * 
 */
    }
    __pyx_L9:;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":245
 *             dest_pos += 1
 * 
 *     if src_pos < ops.get_src_len() or dest_pos < ops.get_dest_len():             # <<<<<<<<<<<<<<
 *         if min(ops.get_src_len() - src_pos, ops.get_dest_len() - dest_pos) > 0:
 *             block_num += 1
 */
  __Pyx_TraceLine(245,0,__PYX_ERR(0, 245, __pyx_L1_error))
  __pyx_t_6 = (__pyx_v_src_pos < __pyx_v_ops.get_src_len());
  if (!__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_6 = (__pyx_v_dest_pos < __pyx_v_ops.get_dest_len());
  __pyx_t_4 = __pyx_t_6;
  __pyx_L11_bool_binop_done:;
  if (__pyx_t_4) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":246
 * 
 *     if src_pos < ops.get_src_len() or dest_pos < ops.get_dest_len():
 *         if min(ops.get_src_len() - src_pos, ops.get_dest_len() - dest_pos) > 0:             # <<<<<<<<<<<<<<
 *             block_num += 1
 * 
 */
    __Pyx_TraceLine(246,0,__PYX_ERR(0, 246, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_ops.get_dest_len() - __pyx_v_dest_pos);
    __pyx_t_2 = (__pyx_v_ops.get_src_len() - __pyx_v_src_pos);
    __pyx_t_4 = (__pyx_t_1 < __pyx_t_2);
    if (__pyx_t_4) {
      __pyx_t_3 = __pyx_t_1;
    } else {
      __pyx_t_3 = __pyx_t_2;
    }
    __pyx_t_4 = (__pyx_t_3 > 0);
    if (__pyx_t_4) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":247
 *     if src_pos < ops.get_src_len() or dest_pos < ops.get_dest_len():
 *         if min(ops.get_src_len() - src_pos, ops.get_dest_len() - dest_pos) > 0:
 *             block_num += 1             # <<<<<<<<<<<<<<
 * 
 *     cdef list result_list = PyList_New(block_num + 1)
 */
      __Pyx_TraceLine(247,0,__PYX_ERR(0, 247, __pyx_L1_error))
      __pyx_v_block_num = (__pyx_v_block_num + 1);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":246
 * 
 *     if src_pos < ops.get_src_len() or dest_pos < ops.get_dest_len():
 *         if min(ops.get_src_len() - src_pos, ops.get_dest_len() - dest_pos) > 0:             # <<<<<<<<<<<<<<
 *             block_num += 1
 * 
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":245
 *             dest_pos += 1
 * 
 *     if src_pos < ops.get_src_len() or dest_pos < ops.get_dest_len():             # <<<<<<<<<<<<<<
 *         if min(ops.get_src_len() - src_pos, ops.get_dest_len() - dest_pos) > 0:
 *             block_num += 1
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":249
 *             block_num += 1
 * 
 *     cdef list result_list = PyList_New(block_num + 1)             # <<<<<<<<<<<<<<
 *     src_pos = 0
 *     dest_pos = 0
 */
  __Pyx_TraceLine(249,0,__PYX_ERR(0, 249, __pyx_L1_error))
  __pyx_t_10 = PyList_New((__pyx_v_block_num + 1)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_v_result_list = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":250
 * 
 *     cdef list result_list = PyList_New(block_num + 1)
 *     src_pos = 0             # <<<<<<<<<<<<<<
 *     dest_pos = 0
 *     for i in range(ops.size()):
 */
  __Pyx_TraceLine(250,0,__PYX_ERR(0, 250, __pyx_L1_error))
  __pyx_v_src_pos = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":251
 *     cdef list result_list = PyList_New(block_num + 1)
 *     src_pos = 0
 *     dest_pos = 0             # <<<<<<<<<<<<<<
 *     for i in range(ops.size()):
 *         if src_pos < ops[i].src_pos or dest_pos < ops[i].dest_pos:
 */
  __Pyx_TraceLine(251,0,__PYX_ERR(0, 251, __pyx_L1_error))
  __pyx_v_dest_pos = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":252
 *     src_pos = 0
 *     dest_pos = 0
 *     for i in range(ops.size()):             # <<<<<<<<<<<<<<
 *         if src_pos < ops[i].src_pos or dest_pos < ops[i].dest_pos:
 *             length = min(ops[i].src_pos - src_pos, ops[i].dest_pos - dest_pos)
 */
  __Pyx_TraceLine(252,0,__PYX_ERR(0, 252, __pyx_L1_error))
  __pyx_t_3 = __pyx_v_ops.size();
  __pyx_t_1 = __pyx_t_3;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":253
 *     dest_pos = 0
 *     for i in range(ops.size()):
 *         if src_pos < ops[i].src_pos or dest_pos < ops[i].dest_pos:             # <<<<<<<<<<<<<<
 *             length = min(ops[i].src_pos - src_pos, ops[i].dest_pos - dest_pos)
 *             if length > 0:
 */
    __Pyx_TraceLine(253,0,__PYX_ERR(0, 253, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 253, __pyx_L1_error)
    }
    __pyx_t_6 = (__pyx_v_src_pos < __pyx_t_5.src_pos);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L17_bool_binop_done;
    }
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 253, __pyx_L1_error)
    }
    __pyx_t_6 = (__pyx_v_dest_pos < __pyx_t_5.dest_pos);
    __pyx_t_4 = __pyx_t_6;
    __pyx_L17_bool_binop_done:;
    if (__pyx_t_4) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":254
 *     for i in range(ops.size()):
 *         if src_pos < ops[i].src_pos or dest_pos < ops[i].dest_pos:
 *             length = min(ops[i].src_pos - src_pos, ops[i].dest_pos - dest_pos)             # <<<<<<<<<<<<<<
 *             if length > 0:
 *                 result_item = MatchingBlock(src_pos, dest_pos, length)
 */
      __Pyx_TraceLine(254,0,__PYX_ERR(0, 254, __pyx_L1_error))
      try {
        __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 254, __pyx_L1_error)
      }
      __pyx_t_9 = (__pyx_t_5.dest_pos - __pyx_v_dest_pos);
      try {
        __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 254, __pyx_L1_error)
      }
      __pyx_t_7 = (__pyx_t_5.src_pos - __pyx_v_src_pos);
      __pyx_t_4 = (__pyx_t_9 < __pyx_t_7);
      if (__pyx_t_4) {
        __pyx_t_8 = __pyx_t_9;
      } else {
        __pyx_t_8 = __pyx_t_7;
      }
      __pyx_v_length = __pyx_t_8;

      /* "rapidfuzz/distance/_initialize_cpp.pyx":255
 *         if src_pos < ops[i].src_pos or dest_pos < ops[i].dest_pos:
 *             length = min(ops[i].src_pos - src_pos, ops[i].dest_pos - dest_pos)
 *             if length > 0:             # <<<<<<<<<<<<<<
 *                 result_item = MatchingBlock(src_pos, dest_pos, length)
 *                 Py_INCREF(result_item)
 */
      __Pyx_TraceLine(255,0,__PYX_ERR(0, 255, __pyx_L1_error))
      __pyx_t_4 = (__pyx_v_length > 0);
      if (__pyx_t_4) {

        /* "rapidfuzz/distance/_initialize_cpp.pyx":256
 *             length = min(ops[i].src_pos - src_pos, ops[i].dest_pos - dest_pos)
 *             if length > 0:
 *                 result_item = MatchingBlock(src_pos, dest_pos, length)             # <<<<<<<<<<<<<<
 *                 Py_INCREF(result_item)
 *                 PyList_SET_ITEM(result_list, <Py_ssize_t>j, result_item)
 */
        __Pyx_TraceLine(256,0,__PYX_ERR(0, 256, __pyx_L1_error))
        __pyx_t_10 = __Pyx_PyInt_FromSize_t(__pyx_v_src_pos); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 256, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_PyInt_FromSize_t(__pyx_v_dest_pos); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 256, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyInt_FromSize_t(__pyx_v_length); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 256, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 256, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_10);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_10)) __PYX_ERR(0, 256, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_11);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_11)) __PYX_ERR(0, 256, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_12);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_12)) __PYX_ERR(0, 256, __pyx_L1_error);
        __pyx_t_10 = 0;
        __pyx_t_11 = 0;
        __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock), __pyx_t_13, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 256, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF_SET(__pyx_v_result_item, ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_t_12));
        __pyx_t_12 = 0;

        /* "rapidfuzz/distance/_initialize_cpp.pyx":257
 *             if length > 0:
 *                 result_item = MatchingBlock(src_pos, dest_pos, length)
 *                 Py_INCREF(result_item)             # <<<<<<<<<<<<<<
 *                 PyList_SET_ITEM(result_list, <Py_ssize_t>j, result_item)
 *                 j += 1
 */
        __Pyx_TraceLine(257,0,__PYX_ERR(0, 257, __pyx_L1_error))
        Py_INCREF(((PyObject *)__pyx_v_result_item));

        /* "rapidfuzz/distance/_initialize_cpp.pyx":258
 *                 result_item = MatchingBlock(src_pos, dest_pos, length)
 *                 Py_INCREF(result_item)
 *                 PyList_SET_ITEM(result_list, <Py_ssize_t>j, result_item)             # <<<<<<<<<<<<<<
 *                 j += 1
 *             src_pos = ops[i].src_pos
 */
        __Pyx_TraceLine(258,0,__PYX_ERR(0, 258, __pyx_L1_error))
        PyList_SET_ITEM(__pyx_v_result_list, ((Py_ssize_t)__pyx_v_j), ((PyObject *)__pyx_v_result_item));

        /* "rapidfuzz/distance/_initialize_cpp.pyx":259
 *                 Py_INCREF(result_item)
 *                 PyList_SET_ITEM(result_list, <Py_ssize_t>j, result_item)
 *                 j += 1             # <<<<<<<<<<<<<<
 *             src_pos = ops[i].src_pos
 *             dest_pos = ops[i].dest_pos
 */
        __Pyx_TraceLine(259,0,__PYX_ERR(0, 259, __pyx_L1_error))
        __pyx_v_j = (__pyx_v_j + 1);

        /* "rapidfuzz/distance/_initialize_cpp.pyx":255
 *         if src_pos < ops[i].src_pos or dest_pos < ops[i].dest_pos:
 *             length = min(ops[i].src_pos - src_pos, ops[i].dest_pos - dest_pos)
 *             if length > 0:             # <<<<<<<<<<<<<<
 *                 result_item = MatchingBlock(src_pos, dest_pos, length)
 *                 Py_INCREF(result_item)
 */
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":260
 *                 PyList_SET_ITEM(result_list, <Py_ssize_t>j, result_item)
 *                 j += 1
 *             src_pos = ops[i].src_pos             # <<<<<<<<<<<<<<
 *             dest_pos = ops[i].dest_pos
 * 
 */
      __Pyx_TraceLine(260,0,__PYX_ERR(0, 260, __pyx_L1_error))
      try {
        __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 260, __pyx_L1_error)
      }
      __pyx_t_8 = __pyx_t_5.src_pos;
      __pyx_v_src_pos = __pyx_t_8;

      /* "rapidfuzz/distance/_initialize_cpp.pyx":261
 *                 j += 1
 *             src_pos = ops[i].src_pos
 *             dest_pos = ops[i].dest_pos             # <<<<<<<<<<<<<<
 * 
 *         if ops[i].type == EditType.Replace:
 */
      __Pyx_TraceLine(261,0,__PYX_ERR(0, 261, __pyx_L1_error))
      try {
        __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 261, __pyx_L1_error)
      }
      __pyx_t_8 = __pyx_t_5.dest_pos;
      __pyx_v_dest_pos = __pyx_t_8;

      /* "rapidfuzz/distance/_initialize_cpp.pyx":253
 *     dest_pos = 0
 *     for i in range(ops.size()):
 *         if src_pos < ops[i].src_pos or dest_pos < ops[i].dest_pos:             # <<<<<<<<<<<<<<
 *             length = min(ops[i].src_pos - src_pos, ops[i].dest_pos - dest_pos)
 *             if length > 0:
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":263
 *             dest_pos = ops[i].dest_pos
 * 
 *         if ops[i].type == EditType.Replace:             # <<<<<<<<<<<<<<
 *             src_pos += 1
 *             dest_pos += 1
 */
    __Pyx_TraceLine(263,0,__PYX_ERR(0, 263, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 263, __pyx_L1_error)
    }
    __pyx_t_4 = (__pyx_t_5.type == rapidfuzz::EditType::Replace);
    if (__pyx_t_4) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":264
 * 
 *         if ops[i].type == EditType.Replace:
 *             src_pos += 1             # <<<<<<<<<<<<<<
 *             dest_pos += 1
 *         elif ops[i].type == EditType.Delete:
 */
      __Pyx_TraceLine(264,0,__PYX_ERR(0, 264, __pyx_L1_error))
      __pyx_v_src_pos = (__pyx_v_src_pos + 1);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":265
 *         if ops[i].type == EditType.Replace:
 *             src_pos += 1
 *             dest_pos += 1             # <<<<<<<<<<<<<<
 *         elif ops[i].type == EditType.Delete:
 *             src_pos += 1
 */
      __Pyx_TraceLine(265,0,__PYX_ERR(0, 265, __pyx_L1_error))
      __pyx_v_dest_pos = (__pyx_v_dest_pos + 1);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":263
 *             dest_pos = ops[i].dest_pos
 * 
 *         if ops[i].type == EditType.Replace:             # <<<<<<<<<<<<<<
 *             src_pos += 1
 *             dest_pos += 1
 */
      goto __pyx_L20;
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":266
 *             src_pos += 1
 *             dest_pos += 1
 *         elif ops[i].type == EditType.Delete:             # <<<<<<<<<<<<<<
 *             src_pos += 1
 *         elif ops[i].type == EditType.Insert:
 */
    __Pyx_TraceLine(266,0,__PYX_ERR(0, 266, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 266, __pyx_L1_error)
    }
    __pyx_t_4 = (__pyx_t_5.type == rapidfuzz::EditType::Delete);
    if (__pyx_t_4) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":267
 *             dest_pos += 1
 *         elif ops[i].type == EditType.Delete:
 *             src_pos += 1             # <<<<<<<<<<<<<<
 *         elif ops[i].type == EditType.Insert:
 *             dest_pos += 1
 */
      __Pyx_TraceLine(267,0,__PYX_ERR(0, 267, __pyx_L1_error))
      __pyx_v_src_pos = (__pyx_v_src_pos + 1);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":266
 *             src_pos += 1
 *             dest_pos += 1
 *         elif ops[i].type == EditType.Delete:             # <<<<<<<<<<<<<<
 *             src_pos += 1
 *         elif ops[i].type == EditType.Insert:
 */
      goto __pyx_L20;
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":268
 *         elif ops[i].type == EditType.Delete:
 *             src_pos += 1
 *         elif ops[i].type == EditType.Insert:             # <<<<<<<<<<<<<<
 *             dest_pos += 1
 * 
 */
    __Pyx_TraceLine(268,0,__PYX_ERR(0, 268, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 268, __pyx_L1_error)
    }
    __pyx_t_4 = (__pyx_t_5.type == rapidfuzz::EditType::Insert);
    if (__pyx_t_4) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":269
 *             src_pos += 1
 *         elif ops[i].type == EditType.Insert:
 *             dest_pos += 1             # <<<<<<<<<<<<<<
 * 
 *     if src_pos < ops.get_src_len() or dest_pos < ops.get_dest_len():
 */
      __Pyx_TraceLine(269,0,__PYX_ERR(0, 269, __pyx_L1_error))
      __pyx_v_dest_pos = (__pyx_v_dest_pos + 1);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":268
 *         elif ops[i].type == EditType.Delete:
 *             src_pos += 1
 *         elif ops[i].type == EditType.Insert:             # <<<<<<<<<<<<<<
 *             dest_pos += 1
 * 
 */
    }
    __pyx_L20:;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":271
 *             dest_pos += 1
 * 
 *     if src_pos < ops.get_src_len() or dest_pos < ops.get_dest_len():             # <<<<<<<<<<<<<<
 *         length = min(ops.get_src_len() - src_pos, ops.get_dest_len() - dest_pos)
 *         if length > 0:
 */
  __Pyx_TraceLine(271,0,__PYX_ERR(0, 271, __pyx_L1_error))
  __pyx_t_6 = (__pyx_v_src_pos < __pyx_v_ops.get_src_len());
  if (!__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L22_bool_binop_done;
  }
  __pyx_t_6 = (__pyx_v_dest_pos < __pyx_v_ops.get_dest_len());
  __pyx_t_4 = __pyx_t_6;
  __pyx_L22_bool_binop_done:;
  if (__pyx_t_4) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":272
 * 
 *     if src_pos < ops.get_src_len() or dest_pos < ops.get_dest_len():
 *         length = min(ops.get_src_len() - src_pos, ops.get_dest_len() - dest_pos)             # <<<<<<<<<<<<<<
 *         if length > 0:
 *             result_item = MatchingBlock(src_pos, dest_pos, length)
 */
    __Pyx_TraceLine(272,0,__PYX_ERR(0, 272, __pyx_L1_error))
    __pyx_t_3 = (__pyx_v_ops.get_dest_len() - __pyx_v_dest_pos);
    __pyx_t_1 = (__pyx_v_ops.get_src_len() - __pyx_v_src_pos);
    __pyx_t_4 = (__pyx_t_3 < __pyx_t_1);
    if (__pyx_t_4) {
      __pyx_t_2 = __pyx_t_3;
    } else {
      __pyx_t_2 = __pyx_t_1;
    }
    __pyx_v_length = __pyx_t_2;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":273
 *     if src_pos < ops.get_src_len() or dest_pos < ops.get_dest_len():
 *         length = min(ops.get_src_len() - src_pos, ops.get_dest_len() - dest_pos)
 *         if length > 0:             # <<<<<<<<<<<<<<
 *             result_item = MatchingBlock(src_pos, dest_pos, length)
 *             Py_INCREF(result_item)
 */
    __Pyx_TraceLine(273,0,__PYX_ERR(0, 273, __pyx_L1_error))
    __pyx_t_4 = (__pyx_v_length > 0);
    if (__pyx_t_4) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":274
 *         length = min(ops.get_src_len() - src_pos, ops.get_dest_len() - dest_pos)
 *         if length > 0:
 *             result_item = MatchingBlock(src_pos, dest_pos, length)             # <<<<<<<<<<<<<<
 *             Py_INCREF(result_item)
 *             PyList_SET_ITEM(result_list, <Py_ssize_t>j, result_item)
 */
      __Pyx_TraceLine(274,0,__PYX_ERR(0, 274, __pyx_L1_error))
      __pyx_t_12 = __Pyx_PyInt_FromSize_t(__pyx_v_src_pos); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = __Pyx_PyInt_FromSize_t(__pyx_v_dest_pos); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_11 = __Pyx_PyInt_FromSize_t(__pyx_v_length); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_12);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_12)) __PYX_ERR(0, 274, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_13);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_13)) __PYX_ERR(0, 274, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_11);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_11)) __PYX_ERR(0, 274, __pyx_L1_error);
      __pyx_t_12 = 0;
      __pyx_t_13 = 0;
      __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock), __pyx_t_10, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF_SET(__pyx_v_result_item, ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_t_11));
      __pyx_t_11 = 0;

      /* "rapidfuzz/distance/_initialize_cpp.pyx":275
 *         if length > 0:
 *             result_item = MatchingBlock(src_pos, dest_pos, length)
 *             Py_INCREF(result_item)             # <<<<<<<<<<<<<<
 *             PyList_SET_ITEM(result_list, <Py_ssize_t>j, result_item)
 *             j += 1
 */
      __Pyx_TraceLine(275,0,__PYX_ERR(0, 275, __pyx_L1_error))
      Py_INCREF(((PyObject *)__pyx_v_result_item));

      /* "rapidfuzz/distance/_initialize_cpp.pyx":276
 *             result_item = MatchingBlock(src_pos, dest_pos, length)
 *             Py_INCREF(result_item)
 *             PyList_SET_ITEM(result_list, <Py_ssize_t>j, result_item)             # <<<<<<<<<<<<<<
 *             j += 1
 * 
 */
      __Pyx_TraceLine(276,0,__PYX_ERR(0, 276, __pyx_L1_error))
      PyList_SET_ITEM(__pyx_v_result_list, ((Py_ssize_t)__pyx_v_j), ((PyObject *)__pyx_v_result_item));

      /* "rapidfuzz/distance/_initialize_cpp.pyx":277
 *             Py_INCREF(result_item)
 *             PyList_SET_ITEM(result_list, <Py_ssize_t>j, result_item)
 *             j += 1             # <<<<<<<<<<<<<<
 * 
 *     result_item = MatchingBlock(ops.get_src_len(), ops.get_dest_len(), 0)
 */
      __Pyx_TraceLine(277,0,__PYX_ERR(0, 277, __pyx_L1_error))
      __pyx_v_j = (__pyx_v_j + 1);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":273
 *     if src_pos < ops.get_src_len() or dest_pos < ops.get_dest_len():
 *         length = min(ops.get_src_len() - src_pos, ops.get_dest_len() - dest_pos)
 *         if length > 0:             # <<<<<<<<<<<<<<
 *             result_item = MatchingBlock(src_pos, dest_pos, length)
 *             Py_INCREF(result_item)
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":271
 *             dest_pos += 1
 * 
 *     if src_pos < ops.get_src_len() or dest_pos < ops.get_dest_len():             # <<<<<<<<<<<<<<
 *         length = min(ops.get_src_len() - src_pos, ops.get_dest_len() - dest_pos)
 *         if length > 0:
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":279
 *             j += 1
 * 
 *     result_item = MatchingBlock(ops.get_src_len(), ops.get_dest_len(), 0)             # <<<<<<<<<<<<<<
 *     Py_INCREF(result_item)
 *     PyList_SET_ITEM(result_list, <Py_ssize_t>block_num, result_item)
 */
  __Pyx_TraceLine(279,0,__PYX_ERR(0, 279, __pyx_L1_error))
  __pyx_t_11 = __Pyx_PyInt_FromSize_t(__pyx_v_ops.get_src_len()); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_10 = __Pyx_PyInt_FromSize_t(__pyx_v_ops.get_dest_len()); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_11)) __PYX_ERR(0, 279, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_10)) __PYX_ERR(0, 279, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_int_0)) __PYX_ERR(0, 279, __pyx_L1_error);
  __pyx_t_11 = 0;
  __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock), __pyx_t_13, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_XDECREF_SET(__pyx_v_result_item, ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_t_10));
  __pyx_t_10 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":280
 * 
 *     result_item = MatchingBlock(ops.get_src_len(), ops.get_dest_len(), 0)
 *     Py_INCREF(result_item)             # <<<<<<<<<<<<<<
 *     PyList_SET_ITEM(result_list, <Py_ssize_t>block_num, result_item)
 *     return result_list
 */
  __Pyx_TraceLine(280,0,__PYX_ERR(0, 280, __pyx_L1_error))
  Py_INCREF(((PyObject *)__pyx_v_result_item));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":281
 *     result_item = MatchingBlock(ops.get_src_len(), ops.get_dest_len(), 0)
 *     Py_INCREF(result_item)
 *     PyList_SET_ITEM(result_list, <Py_ssize_t>block_num, result_item)             # <<<<<<<<<<<<<<
 *     return result_list
 * 
 */
  __Pyx_TraceLine(281,0,__PYX_ERR(0, 281, __pyx_L1_error))
  PyList_SET_ITEM(__pyx_v_result_list, ((Py_ssize_t)__pyx_v_block_num), ((PyObject *)__pyx_v_result_item));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":282
 *     Py_INCREF(result_item)
 *     PyList_SET_ITEM(result_list, <Py_ssize_t>block_num, result_item)
 *     return result_list             # <<<<<<<<<<<<<<
 * 
 * cdef list opcodes_to_matching_blocks(const RfOpcodes& ops):
 */
  __Pyx_TraceLine(282,0,__PYX_ERR(0, 282, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result_list);
  __pyx_r = __pyx_v_result_list;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":223
 *         return f"MatchingBlock(a={self.a}, b={self.b}, size={self.size})"
 * 
 * cdef list editops_to_matching_blocks(const RfEditops& ops):             # <<<<<<<<<<<<<<
 *     cdef MatchingBlock result_item
 *     cdef Py_ssize_t block_num = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.editops_to_matching_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result_item);
  __Pyx_XDECREF(__pyx_v_result_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":284
 *     return result_list
 * 
 * cdef list opcodes_to_matching_blocks(const RfOpcodes& ops):             # <<<<<<<<<<<<<<
 *     cdef MatchingBlock result_item
 *     cdef Py_ssize_t block_num = 0
 */

static PyObject *__pyx_f_9rapidfuzz_8distance_15_initialize_cpp_opcodes_to_matching_blocks(rapidfuzz::Opcodes const &__pyx_v_ops) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *__pyx_v_result_item = 0;
  Py_ssize_t __pyx_v_block_num;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  PyObject *__pyx_v_result_list = 0;
  size_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  rapidfuzz::Opcode __pyx_t_4;
  int __pyx_t_5;
  rapidfuzz::Opcode __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("opcodes_to_matching_blocks", 1);
  __Pyx_TraceCall("opcodes_to_matching_blocks", __pyx_f[0], 284, 0, __PYX_ERR(0, 284, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":286
 * cdef list opcodes_to_matching_blocks(const RfOpcodes& ops):
 *     cdef MatchingBlock result_item
 *     cdef Py_ssize_t block_num = 0             # <<<<<<<<<<<<<<
 *     cdef size_t i = 0
 *     cdef size_t j = 0
 */
  __Pyx_TraceLine(286,0,__PYX_ERR(0, 286, __pyx_L1_error))
  __pyx_v_block_num = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":287
 *     cdef MatchingBlock result_item
 *     cdef Py_ssize_t block_num = 0
 *     cdef size_t i = 0             # <<<<<<<<<<<<<<
 *     cdef size_t j = 0
 *     for i in range(ops.size()):
 */
  __Pyx_TraceLine(287,0,__PYX_ERR(0, 287, __pyx_L1_error))
  __pyx_v_i = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":288
 *     cdef Py_ssize_t block_num = 0
 *     cdef size_t i = 0
 *     cdef size_t j = 0             # <<<<<<<<<<<<<<
 *     for i in range(ops.size()):
 *         if ops[i].type == EditType.None:
 */
  __Pyx_TraceLine(288,0,__PYX_ERR(0, 288, __pyx_L1_error))
  __pyx_v_j = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":289
 *     cdef size_t i = 0
 *     cdef size_t j = 0
 *     for i in range(ops.size()):             # <<<<<<<<<<<<<<
 *         if ops[i].type == EditType.None:
 *             if min(ops[i].src_end - ops[i].src_begin, ops[i].dest_end - ops[i].dest_begin) > 0:
 */
  __Pyx_TraceLine(289,0,__PYX_ERR(0, 289, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_ops.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":290
 *     cdef size_t j = 0
 *     for i in range(ops.size()):
 *         if ops[i].type == EditType.None:             # <<<<<<<<<<<<<<
 *             if min(ops[i].src_end - ops[i].src_begin, ops[i].dest_end - ops[i].dest_begin) > 0:
 *                 block_num += 1
 */
    __Pyx_TraceLine(290,0,__PYX_ERR(0, 290, __pyx_L1_error))
    try {
      __pyx_t_4 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 290, __pyx_L1_error)
    }
    __pyx_t_5 = (__pyx_t_4.type == rapidfuzz::EditType::None);
    if (__pyx_t_5) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":291
 *     for i in range(ops.size()):
 *         if ops[i].type == EditType.None:
 *             if min(ops[i].src_end - ops[i].src_begin, ops[i].dest_end - ops[i].dest_begin) > 0:             # <<<<<<<<<<<<<<
 *                 block_num += 1
 * 
 */
      __Pyx_TraceLine(291,0,__PYX_ERR(0, 291, __pyx_L1_error))
      try {
        __pyx_t_4 = __pyx_v_ops[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 291, __pyx_L1_error)
      }
      try {
        __pyx_t_6 = __pyx_v_ops[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 291, __pyx_L1_error)
      }
      __pyx_t_7 = (__pyx_t_4.dest_end - __pyx_t_6.dest_begin);
      try {
        __pyx_t_6 = __pyx_v_ops[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 291, __pyx_L1_error)
      }
      try {
        __pyx_t_4 = __pyx_v_ops[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 291, __pyx_L1_error)
      }
      __pyx_t_8 = (__pyx_t_6.src_end - __pyx_t_4.src_begin);
      __pyx_t_5 = (__pyx_t_7 < __pyx_t_8);
      if (__pyx_t_5) {
        __pyx_t_9 = __pyx_t_7;
      } else {
        __pyx_t_9 = __pyx_t_8;
      }
      __pyx_t_5 = (__pyx_t_9 > 0);
      if (__pyx_t_5) {

        /* "rapidfuzz/distance/_initialize_cpp.pyx":292
 *         if ops[i].type == EditType.None:
 *             if min(ops[i].src_end - ops[i].src_begin, ops[i].dest_end - ops[i].dest_begin) > 0:
 *                 block_num += 1             # <<<<<<<<<<<<<<
 * 
 *     cdef list result_list = PyList_New(block_num + 1)
 */
        __Pyx_TraceLine(292,0,__PYX_ERR(0, 292, __pyx_L1_error))
        __pyx_v_block_num = (__pyx_v_block_num + 1);

        /* "rapidfuzz/distance/_initialize_cpp.pyx":291
 *     for i in range(ops.size()):
 *         if ops[i].type == EditType.None:
 *             if min(ops[i].src_end - ops[i].src_begin, ops[i].dest_end - ops[i].dest_begin) > 0:             # <<<<<<<<<<<<<<
 *                 block_num += 1
 * 
 */
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":290
 *     cdef size_t j = 0
 *     for i in range(ops.size()):
 *         if ops[i].type == EditType.None:             # <<<<<<<<<<<<<<
 *             if min(ops[i].src_end - ops[i].src_begin, ops[i].dest_end - ops[i].dest_begin) > 0:
 *                 block_num += 1
 */
    }
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":294
 *                 block_num += 1
 * 
 *     cdef list result_list = PyList_New(block_num + 1)             # <<<<<<<<<<<<<<
 *     for i in range(ops.size()):
 *         if ops[i].type == EditType.None:
 */
  __Pyx_TraceLine(294,0,__PYX_ERR(0, 294, __pyx_L1_error))
  __pyx_t_10 = PyList_New((__pyx_v_block_num + 1)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_v_result_list = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":295
 * 
 *     cdef list result_list = PyList_New(block_num + 1)
 *     for i in range(ops.size()):             # <<<<<<<<<<<<<<
 *         if ops[i].type == EditType.None:
 *             length = min(ops[i].src_end - ops[i].src_begin, ops[i].dest_end - ops[i].dest_begin)
 */
  __Pyx_TraceLine(295,0,__PYX_ERR(0, 295, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_ops.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":296
 *     cdef list result_list = PyList_New(block_num + 1)
 *     for i in range(ops.size()):
 *         if ops[i].type == EditType.None:             # <<<<<<<<<<<<<<
 *             length = min(ops[i].src_end - ops[i].src_begin, ops[i].dest_end - ops[i].dest_begin)
 *             if length > 0:
 */
    __Pyx_TraceLine(296,0,__PYX_ERR(0, 296, __pyx_L1_error))
    try {
      __pyx_t_4 = __pyx_v_ops[__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 296, __pyx_L1_error)
    }
    __pyx_t_5 = (__pyx_t_4.type == rapidfuzz::EditType::None);
    if (__pyx_t_5) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":297
 *     for i in range(ops.size()):
 *         if ops[i].type == EditType.None:
 *             length = min(ops[i].src_end - ops[i].src_begin, ops[i].dest_end - ops[i].dest_begin)             # <<<<<<<<<<<<<<
 *             if length > 0:
 *                 result_item = MatchingBlock(ops[i].src_begin, ops[i].dest_begin, length)
 */
      __Pyx_TraceLine(297,0,__PYX_ERR(0, 297, __pyx_L1_error))
      try {
        __pyx_t_4 = __pyx_v_ops[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 297, __pyx_L1_error)
      }
      try {
        __pyx_t_6 = __pyx_v_ops[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 297, __pyx_L1_error)
      }
      __pyx_t_9 = (__pyx_t_4.dest_end - __pyx_t_6.dest_begin);
      try {
        __pyx_t_6 = __pyx_v_ops[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 297, __pyx_L1_error)
      }
      try {
        __pyx_t_4 = __pyx_v_ops[__pyx_v_i];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 297, __pyx_L1_error)
      }
      __pyx_t_7 = (__pyx_t_6.src_end - __pyx_t_4.src_begin);
      __pyx_t_5 = (__pyx_t_9 < __pyx_t_7);
      if (__pyx_t_5) {
        __pyx_t_8 = __pyx_t_9;
      } else {
        __pyx_t_8 = __pyx_t_7;
      }
      __pyx_v_length = __pyx_t_8;

      /* "rapidfuzz/distance/_initialize_cpp.pyx":298
 *         if ops[i].type == EditType.None:
 *             length = min(ops[i].src_end - ops[i].src_begin, ops[i].dest_end - ops[i].dest_begin)
 *             if length > 0:             # <<<<<<<<<<<<<<
 *                 result_item = MatchingBlock(ops[i].src_begin, ops[i].dest_begin, length)
 *                 Py_INCREF(result_item)
 */
      __Pyx_TraceLine(298,0,__PYX_ERR(0, 298, __pyx_L1_error))
      __pyx_t_5 = (__pyx_v_length > 0);
      if (__pyx_t_5) {

        /* "rapidfuzz/distance/_initialize_cpp.pyx":299
 *             length = min(ops[i].src_end - ops[i].src_begin, ops[i].dest_end - ops[i].dest_begin)
 *             if length > 0:
 *                 result_item = MatchingBlock(ops[i].src_begin, ops[i].dest_begin, length)             # <<<<<<<<<<<<<<
 *                 Py_INCREF(result_item)
 *                 PyList_SET_ITEM(result_list, <Py_ssize_t>j, result_item)
 */
        __Pyx_TraceLine(299,0,__PYX_ERR(0, 299, __pyx_L1_error))
        try {
          __pyx_t_4 = __pyx_v_ops[__pyx_v_i];
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 299, __pyx_L1_error)
        }
        __pyx_t_10 = __Pyx_PyInt_FromSize_t(__pyx_t_4.src_begin); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 299, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        try {
          __pyx_t_4 = __pyx_v_ops[__pyx_v_i];
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 299, __pyx_L1_error)
        }
        __pyx_t_11 = __Pyx_PyInt_FromSize_t(__pyx_t_4.dest_begin); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 299, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyInt_FromSize_t(__pyx_v_length); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 299, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 299, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_10);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_10)) __PYX_ERR(0, 299, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_11);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_11)) __PYX_ERR(0, 299, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_12);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_12)) __PYX_ERR(0, 299, __pyx_L1_error);
        __pyx_t_10 = 0;
        __pyx_t_11 = 0;
        __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock), __pyx_t_13, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 299, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF_SET(__pyx_v_result_item, ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_t_12));
        __pyx_t_12 = 0;

        /* "rapidfuzz/distance/_initialize_cpp.pyx":300
 *             if length > 0:
 *                 result_item = MatchingBlock(ops[i].src_begin, ops[i].dest_begin, length)
 *                 Py_INCREF(result_item)             # <<<<<<<<<<<<<<
 *                 PyList_SET_ITEM(result_list, <Py_ssize_t>j, result_item)
 *                 j += 1
 */
        __Pyx_TraceLine(300,0,__PYX_ERR(0, 300, __pyx_L1_error))
        Py_INCREF(((PyObject *)__pyx_v_result_item));

        /* "rapidfuzz/distance/_initialize_cpp.pyx":301
 *                 result_item = MatchingBlock(ops[i].src_begin, ops[i].dest_begin, length)
 *                 Py_INCREF(result_item)
 *                 PyList_SET_ITEM(result_list, <Py_ssize_t>j, result_item)             # <<<<<<<<<<<<<<
 *                 j += 1
 * 
 */
        __Pyx_TraceLine(301,0,__PYX_ERR(0, 301, __pyx_L1_error))
        PyList_SET_ITEM(__pyx_v_result_list, ((Py_ssize_t)__pyx_v_j), ((PyObject *)__pyx_v_result_item));

        /* "rapidfuzz/distance/_initialize_cpp.pyx":302
 *                 Py_INCREF(result_item)
 *                 PyList_SET_ITEM(result_list, <Py_ssize_t>j, result_item)
 *                 j += 1             # <<<<<<<<<<<<<<
 * 
 *     result_item = MatchingBlock(ops.get_src_len(), ops.get_dest_len(), 0)
 */
        __Pyx_TraceLine(302,0,__PYX_ERR(0, 302, __pyx_L1_error))
        __pyx_v_j = (__pyx_v_j + 1);

        /* "rapidfuzz/distance/_initialize_cpp.pyx":298
 *         if ops[i].type == EditType.None:
 *             length = min(ops[i].src_end - ops[i].src_begin, ops[i].dest_end - ops[i].dest_begin)
 *             if length > 0:             # <<<<<<<<<<<<<<
 *                 result_item = MatchingBlock(ops[i].src_begin, ops[i].dest_begin, length)
 *                 Py_INCREF(result_item)
 */
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":296
 *     cdef list result_list = PyList_New(block_num + 1)
 *     for i in range(ops.size()):
 *         if ops[i].type == EditType.None:             # <<<<<<<<<<<<<<
 *             length = min(ops[i].src_end - ops[i].src_begin, ops[i].dest_end - ops[i].dest_begin)
 *             if length > 0:
 */
    }
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":304
 *                 j += 1
 * 
 *     result_item = MatchingBlock(ops.get_src_len(), ops.get_dest_len(), 0)             # <<<<<<<<<<<<<<
 *     Py_INCREF(result_item)
 *     PyList_SET_ITEM(result_list, <Py_ssize_t>block_num, result_item)
 */
  __Pyx_TraceLine(304,0,__PYX_ERR(0, 304, __pyx_L1_error))
  __pyx_t_12 = __Pyx_PyInt_FromSize_t(__pyx_v_ops.get_src_len()); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = __Pyx_PyInt_FromSize_t(__pyx_v_ops.get_dest_len()); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_11 = PyTuple_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_12)) __PYX_ERR(0, 304, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_13)) __PYX_ERR(0, 304, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_int_0)) __PYX_ERR(0, 304, __pyx_L1_error);
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_13 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock), __pyx_t_11, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_XDECREF_SET(__pyx_v_result_item, ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock *)__pyx_t_13));
  __pyx_t_13 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":305
 * 
 *     result_item = MatchingBlock(ops.get_src_len(), ops.get_dest_len(), 0)
 *     Py_INCREF(result_item)             # <<<<<<<<<<<<<<
 *     PyList_SET_ITEM(result_list, <Py_ssize_t>block_num, result_item)
 *     return result_list
 */
  __Pyx_TraceLine(305,0,__PYX_ERR(0, 305, __pyx_L1_error))
  Py_INCREF(((PyObject *)__pyx_v_result_item));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":306
 *     result_item = MatchingBlock(ops.get_src_len(), ops.get_dest_len(), 0)
 *     Py_INCREF(result_item)
 *     PyList_SET_ITEM(result_list, <Py_ssize_t>block_num, result_item)             # <<<<<<<<<<<<<<
 *     return result_list
 * 
 */
  __Pyx_TraceLine(306,0,__PYX_ERR(0, 306, __pyx_L1_error))
  PyList_SET_ITEM(__pyx_v_result_list, ((Py_ssize_t)__pyx_v_block_num), ((PyObject *)__pyx_v_result_item));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":307
 *     Py_INCREF(result_item)
 *     PyList_SET_ITEM(result_list, <Py_ssize_t>block_num, result_item)
 *     return result_list             # <<<<<<<<<<<<<<
 * 
 * cdef class Editop:
 */
  __Pyx_TraceLine(307,0,__PYX_ERR(0, 307, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result_list);
  __pyx_r = __pyx_v_result_list;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":284
 *     return result_list
 * 
 * cdef list opcodes_to_matching_blocks(const RfOpcodes& ops):             # <<<<<<<<<<<<<<
 *     cdef MatchingBlock result_item
 *     cdef Py_ssize_t block_num = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.opcodes_to_matching_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result_item);
  __Pyx_XDECREF(__pyx_v_result_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":330
 *     cdef public Py_ssize_t dest_pos
 * 
 *     def __init__(self, tag, src_pos, dest_pos):             # <<<<<<<<<<<<<<
 *         self.tag = tag
 *         self.src_pos = src_pos
 */

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tag = 0;
  PyObject *__pyx_v_src_pos = 0;
  PyObject *__pyx_v_dest_pos = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tag,&__pyx_n_s_src_pos,&__pyx_n_s_dest_pos,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tag)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 330, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_src_pos)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 330, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 330, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dest_pos)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 330, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 330, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 330, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
      values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
    }
    __pyx_v_tag = values[0];
    __pyx_v_src_pos = values[1];
    __pyx_v_dest_pos = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 330, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop___init__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)__pyx_v_self), __pyx_v_tag, __pyx_v_src_pos, __pyx_v_dest_pos);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop___init__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self, PyObject *__pyx_v_tag, PyObject *__pyx_v_src_pos, PyObject *__pyx_v_dest_pos) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);
  __Pyx_TraceCall("__init__", __pyx_f[0], 330, 0, __PYX_ERR(0, 330, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":331
 * 
 *     def __init__(self, tag, src_pos, dest_pos):
 *         self.tag = tag             # <<<<<<<<<<<<<<
 *         self.src_pos = src_pos
 *         self.dest_pos = dest_pos
 */
  __Pyx_TraceLine(331,0,__PYX_ERR(0, 331, __pyx_L1_error))
  if (!(likely(PyUnicode_CheckExact(__pyx_v_tag))||((__pyx_v_tag) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_v_tag))) __PYX_ERR(0, 331, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_tag;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tag);
  __Pyx_DECREF(__pyx_v_self->tag);
  __pyx_v_self->tag = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":332
 *     def __init__(self, tag, src_pos, dest_pos):
 *         self.tag = tag
 *         self.src_pos = src_pos             # <<<<<<<<<<<<<<
 *         self.dest_pos = dest_pos
 * 
 */
  __Pyx_TraceLine(332,0,__PYX_ERR(0, 332, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_v_src_pos); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 332, __pyx_L1_error)
  __pyx_v_self->src_pos = __pyx_t_2;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":333
 *         self.tag = tag
 *         self.src_pos = src_pos
 *         self.dest_pos = dest_pos             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_TraceLine(333,0,__PYX_ERR(0, 333, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_v_dest_pos); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 333, __pyx_L1_error)
  __pyx_v_self->dest_pos = __pyx_t_2;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":330
 *     cdef public Py_ssize_t dest_pos
 * 
 *     def __init__(self, tag, src_pos, dest_pos):             # <<<<<<<<<<<<<<
 *         self.tag = tag
 *         self.src_pos = src_pos
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":335
 *         self.dest_pos = dest_pos
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return 3
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3__len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_2__len__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_2__len__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__len__", __pyx_f[0], 335, 0, __PYX_ERR(0, 335, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":336
 * 
 *     def __len__(self):
 *         return 3             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, other):
 */
  __Pyx_TraceLine(336,0,__PYX_ERR(0, 336, __pyx_L1_error))
  __pyx_r = 3;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":335
 *         self.dest_pos = dest_pos
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return 3
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":338
 *         return 3
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         try:
 *             if len(other) != 3:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_5__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_5__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_4__eq__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_4__eq__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 1);
  __Pyx_TraceCall("__eq__", __pyx_f[0], 338, 0, __PYX_ERR(0, 338, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":339
 * 
 *     def __eq__(self, other):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(other) != 3:
 *                 return False
 */
  __Pyx_TraceLine(339,0,__PYX_ERR(0, 339, __pyx_L1_error))
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":340
 *     def __eq__(self, other):
 *         try:
 *             if len(other) != 3:             # <<<<<<<<<<<<<<
 *                 return False
 * 
 */
      __Pyx_TraceLine(340,0,__PYX_ERR(0, 340, __pyx_L3_error))
      __pyx_t_4 = PyObject_Length(__pyx_v_other); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 340, __pyx_L3_error)
      __pyx_t_5 = (__pyx_t_4 != 3);
      if (__pyx_t_5) {

        /* "rapidfuzz/distance/_initialize_cpp.pyx":341
 *         try:
 *             if len(other) != 3:
 *                 return False             # <<<<<<<<<<<<<<
 * 
 *             return (other[0] == self.tag
 */
        __Pyx_TraceLine(341,0,__PYX_ERR(0, 341, __pyx_L3_error))
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_False);
        __pyx_r = Py_False;
        goto __pyx_L7_try_return;

        /* "rapidfuzz/distance/_initialize_cpp.pyx":340
 *     def __eq__(self, other):
 *         try:
 *             if len(other) != 3:             # <<<<<<<<<<<<<<
 *                 return False
 * 
 */
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":343
 *                 return False
 * 
 *             return (other[0] == self.tag             # <<<<<<<<<<<<<<
 *                 and other[1] == self.src_pos
 *                 and other[2] == self.dest_pos)
 */
      __Pyx_TraceLine(343,0,__PYX_ERR(0, 343, __pyx_L3_error))
      __Pyx_XDECREF(__pyx_r);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":344
 * 
 *             return (other[0] == self.tag
 *                 and other[1] == self.src_pos             # <<<<<<<<<<<<<<
 *                 and other[2] == self.dest_pos)
 *         except:
 */
      __Pyx_TraceLine(344,0,__PYX_ERR(0, 344, __pyx_L3_error))
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_other, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 343, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":343
 *                 return False
 * 
 *             return (other[0] == self.tag             # <<<<<<<<<<<<<<
 *                 and other[1] == self.src_pos
 *                 and other[2] == self.dest_pos)
 */
      __Pyx_TraceLine(343,0,__PYX_ERR(0, 343, __pyx_L3_error))
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_v_self->tag, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 343, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 343, __pyx_L3_error)
      if (__pyx_t_5) {
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __Pyx_INCREF(__pyx_t_8);
        __pyx_t_6 = __pyx_t_8;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L10_bool_binop_done;
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":344
 * 
 *             return (other[0] == self.tag
 *                 and other[1] == self.src_pos             # <<<<<<<<<<<<<<
 *                 and other[2] == self.dest_pos)
 *         except:
 */
      __Pyx_TraceLine(344,0,__PYX_ERR(0, 344, __pyx_L3_error))
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_other, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 344, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_v_self->src_pos); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 344, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 344, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 344, __pyx_L3_error)
      if (__pyx_t_5) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_6 = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L10_bool_binop_done;
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":345
 *             return (other[0] == self.tag
 *                 and other[1] == self.src_pos
 *                 and other[2] == self.dest_pos)             # <<<<<<<<<<<<<<
 *         except:
 *             return False
 */
      __Pyx_TraceLine(345,0,__PYX_ERR(0, 345, __pyx_L3_error))
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_other, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 345, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_v_self->dest_pos); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 345, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_9, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 345, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_INCREF(__pyx_t_8);
      __pyx_t_6 = __pyx_t_8;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_L10_bool_binop_done:;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L7_try_return;

      /* "rapidfuzz/distance/_initialize_cpp.pyx":339
 * 
 *     def __eq__(self, other):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(other) != 3:
 *                 return False
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":346
 *                 and other[1] == self.src_pos
 *                 and other[2] == self.dest_pos)
 *         except:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    __Pyx_TraceLine(346,0,__PYX_ERR(0, 346, __pyx_L5_except_error))
    /*except:*/ {
      __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_8, &__pyx_t_7) < 0) __PYX_ERR(0, 346, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":347
 *                 and other[2] == self.dest_pos)
 *         except:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Py_ssize_t i):
 */
      __Pyx_TraceLine(347,0,__PYX_ERR(0, 347, __pyx_L5_except_error))
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_except_return;
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":339
 * 
 *     def __eq__(self, other):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(other) != 3:
 *                 return False
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":338
 *         return 3
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         try:
 *             if len(other) != 3:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":349
 *             return False
 * 
 *     def __getitem__(self, Py_ssize_t i):             # <<<<<<<<<<<<<<
 *         if i==0 or i==-3: return self.tag
 *         if i==1 or i==-2: return self.src_pos
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyIndex_AsSsize_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 349, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_6__getitem__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)__pyx_v_self), ((Py_ssize_t)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_6__getitem__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self, Py_ssize_t __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 1);
  __Pyx_TraceCall("__getitem__", __pyx_f[0], 349, 0, __PYX_ERR(0, 349, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":350
 * 
 *     def __getitem__(self, Py_ssize_t i):
 *         if i==0 or i==-3: return self.tag             # <<<<<<<<<<<<<<
 *         if i==1 or i==-2: return self.src_pos
 *         if i==2 or i==-1: return self.dest_pos
 */
  __Pyx_TraceLine(350,0,__PYX_ERR(0, 350, __pyx_L1_error))
  switch (__pyx_v_i) {
    case 0:
    CYTHON_FALLTHROUGH;
    case -3L:
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->tag);
    __pyx_r = __pyx_v_self->tag;
    goto __pyx_L0;
    break;
    default: break;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":351
 *     def __getitem__(self, Py_ssize_t i):
 *         if i==0 or i==-3: return self.tag
 *         if i==1 or i==-2: return self.src_pos             # <<<<<<<<<<<<<<
 *         if i==2 or i==-1: return self.dest_pos
 * 
 */
  __Pyx_TraceLine(351,0,__PYX_ERR(0, 351, __pyx_L1_error))
  switch (__pyx_v_i) {
    case 1:
    CYTHON_FALLTHROUGH;
    case -2L:
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->src_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
    default: break;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":352
 *         if i==0 or i==-3: return self.tag
 *         if i==1 or i==-2: return self.src_pos
 *         if i==2 or i==-1: return self.dest_pos             # <<<<<<<<<<<<<<
 * 
 *         raise IndexError('Editop index out of range')
 */
  __Pyx_TraceLine(352,0,__PYX_ERR(0, 352, __pyx_L1_error))
  switch (__pyx_v_i) {
    case 2:
    CYTHON_FALLTHROUGH;
    case -1L:
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->dest_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
    default: break;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":354
 *         if i==2 or i==-1: return self.dest_pos
 * 
 *         raise IndexError('Editop index out of range')             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_TraceLine(354,0,__PYX_ERR(0, 354, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 354, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":349
 *             return False
 * 
 *     def __getitem__(self, Py_ssize_t i):             # <<<<<<<<<<<<<<
 *         if i==0 or i==-3: return self.tag
 *         if i==1 or i==-2: return self.src_pos
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_6Editop_10generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "rapidfuzz/distance/_initialize_cpp.pyx":356
 *         raise IndexError('Editop index out of range')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         yield self.tag
 *         yield self.src_pos
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_9__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_9__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_8__iter__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_8__iter__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 356, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_6Editop_10generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_Editop___iter, __pyx_n_s_rapidfuzz_distance__initialize_c); if (unlikely(!gen)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_6Editop_10generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ *__pyx_cur_scope = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  __Pyx_TraceCall("__iter__", __pyx_f[0], 356, 0, __PYX_ERR(0, 356, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    case 2: goto __pyx_L5_resume_from_yield;
    case 3: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 356, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":357
 * 
 *     def __iter__(self):
 *         yield self.tag             # <<<<<<<<<<<<<<
 *         yield self.src_pos
 *         yield self.dest_pos
 */
  __Pyx_TraceLine(357,0,__PYX_ERR(0, 357, __pyx_L1_error))
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self->tag);
  __pyx_r = __pyx_cur_scope->__pyx_v_self->tag;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 357, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":358
 *     def __iter__(self):
 *         yield self.tag
 *         yield self.src_pos             # <<<<<<<<<<<<<<
 *         yield self.dest_pos
 * 
 */
  __Pyx_TraceLine(358,0,__PYX_ERR(0, 358, __pyx_L1_error))
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_self->src_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 2;
  return __pyx_r;
  __pyx_L5_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 358, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":359
 *         yield self.tag
 *         yield self.src_pos
 *         yield self.dest_pos             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_TraceLine(359,0,__PYX_ERR(0, 359, __pyx_L1_error))
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_self->dest_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 3;
  return __pyx_r;
  __pyx_L6_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 359, __pyx_L1_error)
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":356
 *         raise IndexError('Editop index out of range')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         yield self.tag
 *         yield self.src_pos
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":361
 *         yield self.dest_pos
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"Editop(tag='{self.tag}', src_pos={self.src_pos}, dest_pos={self.dest_pos})"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_12__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_12__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_11__repr__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_11__repr__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);
  __Pyx_TraceCall("__repr__", __pyx_f[0], 361, 0, __PYX_ERR(0, 361, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":362
 * 
 *     def __repr__(self):
 *         return f"Editop(tag='{self.tag}', src_pos={self.src_pos}, dest_pos={self.dest_pos})"             # <<<<<<<<<<<<<<
 * 
 * cdef class Editops:
 */
  __Pyx_TraceLine(362,0,__PYX_ERR(0, 362, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Editop_tag);
  __pyx_t_2 += 12;
  __Pyx_GIVEREF(__pyx_kp_u_Editop_tag);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Editop_tag);
  __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_v_self->tag); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_src_pos_2);
  __pyx_t_2 += 11;
  __Pyx_GIVEREF(__pyx_kp_u_src_pos_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_src_pos_2);
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_self->src_pos, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_dest_pos_2);
  __pyx_t_2 += 11;
  __Pyx_GIVEREF(__pyx_kp_u_dest_pos_2);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_dest_pos_2);
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_self->dest_pos, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__12);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__12);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__12);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":361
 *         yield self.dest_pos
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"Editop(tag='{self.tag}', src_pos={self.src_pos}, dest_pos={self.dest_pos})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":326
 *     +-----------+---------------------------------------------------+
 *     """
 *     cdef public str tag             # <<<<<<<<<<<<<<
 *     cdef public Py_ssize_t src_pos
 *     cdef public Py_ssize_t dest_pos
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 326, 0, __PYX_ERR(0, 326, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->tag);
  __pyx_r = __pyx_v_self->tag;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.tag.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 1);
  __Pyx_TraceCall("__set__", __pyx_f[0], 326, 0, __PYX_ERR(0, 326, __pyx_L1_error));
  if (!(likely(PyUnicode_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_v_value))) __PYX_ERR(0, 326, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tag);
  __Pyx_DECREF(__pyx_v_self->tag);
  __pyx_v_self->tag = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.tag.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag_4__del__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag_4__del__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_TraceCall("__del__", __pyx_f[0], 326, 0, __PYX_ERR(0, 326, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->tag);
  __Pyx_DECREF(__pyx_v_self->tag);
  __pyx_v_self->tag = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.tag.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":327
 *     """
 *     cdef public str tag
 *     cdef public Py_ssize_t src_pos             # <<<<<<<<<<<<<<
 *     cdef public Py_ssize_t dest_pos
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_7src_pos_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_7src_pos_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_7src_pos___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_7src_pos___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 327, 0, __PYX_ERR(0, 327, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->src_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.src_pos.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_7src_pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_7src_pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_7src_pos_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_7src_pos_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__set__", __pyx_f[0], 327, 0, __PYX_ERR(0, 327, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 327, __pyx_L1_error)
  __pyx_v_self->src_pos = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.src_pos.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":328
 *     cdef public str tag
 *     cdef public Py_ssize_t src_pos
 *     cdef public Py_ssize_t dest_pos             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, tag, src_pos, dest_pos):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_8dest_pos_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_8dest_pos_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_8dest_pos___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_8dest_pos___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 328, 0, __PYX_ERR(0, 328, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->dest_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.dest_pos.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_8dest_pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_8dest_pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_8dest_pos_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_8dest_pos_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__set__", __pyx_f[0], 328, 0, __PYX_ERR(0, 328, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L1_error)
  __pyx_v_self->dest_pos = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.dest_pos.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_14__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_6Editop_14__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_14__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_14__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_13__reduce_cython__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_13__reduce_cython__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__16)
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.dest_pos, self.src_pos, self.tag)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(2, 5, __pyx_L1_error))
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->dest_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->src_pos); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->tag);
  __Pyx_GIVEREF(__pyx_v_self->tag);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_self->tag)) __PYX_ERR(2, 5, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.dest_pos, self.src_pos, self.tag)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(2, 6, __pyx_L1_error))
  __pyx_t_3 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v__dict = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":7
 *     state = (self.dest_pos, self.src_pos, self.tag)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(2, 7, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v__dict != Py_None);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(2, 8, __pyx_L1_error))
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v__dict)) __PYX_ERR(2, 8, __pyx_L1_error);
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.tag is not None
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(2, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.dest_pos, self.src_pos, self.tag)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.tag is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Editop, (type(self), 0xd03a775, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(2, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_t_4 = (__pyx_v_self->tag != ((PyObject*)Py_None));
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.tag is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Editop, (type(self), 0xd03a775, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(2, 12, __pyx_L1_error))
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self.tag is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Editop, (type(self), 0xd03a775, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Editop, (type(self), 0xd03a775, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(2, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_Editop); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(2, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_218343285);
    __Pyx_GIVEREF(__pyx_int_218343285);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_218343285)) __PYX_ERR(2, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, Py_None)) __PYX_ERR(2, 13, __pyx_L1_error);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2)) __PYX_ERR(2, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(2, 13, __pyx_L1_error);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.tag is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Editop, (type(self), 0xd03a775, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Editop, (type(self), 0xd03a775, None), state
 *     else:
 *         return __pyx_unpickle_Editop, (type(self), 0xd03a775, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Editop__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(2, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_Editop); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(2, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_218343285);
    __Pyx_GIVEREF(__pyx_int_218343285);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_218343285)) __PYX_ERR(2, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state)) __PYX_ERR(2, 15, __pyx_L1_error);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1)) __PYX_ERR(2, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Editop, (type(self), 0xd03a775, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Editop__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_16__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_6Editop_16__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_16__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_16__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_15__setstate_cython__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Editop_15__setstate_cython__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__17)
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[2], 16, 0, __PYX_ERR(2, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Editop, (type(self), 0xd03a775, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Editop__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(2, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp___pyx_unpickle_Editop__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Editop, (type(self), 0xd03a775, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Editop__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editop.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":369
 *     """
 * 
 *     def __init__(self, editops=None, src_len=0, dest_len=0):             # <<<<<<<<<<<<<<
 *         if editops is not None:
 *             self.editops = list_to_editops(editops, src_len, dest_len)
 */

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_editops = 0;
  PyObject *__pyx_v_src_len = 0;
  PyObject *__pyx_v_dest_len = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_editops,&__pyx_n_s_src_len,&__pyx_n_s_dest_len,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_editops);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 369, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_src_len);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 369, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dest_len);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 369, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 369, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_editops = values[0];
    __pyx_v_src_len = values[1];
    __pyx_v_dest_len = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 3, __pyx_nargs); __PYX_ERR(0, 369, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops___init__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self), __pyx_v_editops, __pyx_v_src_len, __pyx_v_dest_len);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops___init__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, PyObject *__pyx_v_editops, PyObject *__pyx_v_src_len, PyObject *__pyx_v_dest_len) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  rapidfuzz::Editops __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__init__", __pyx_f[0], 369, 0, __PYX_ERR(0, 369, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":370
 * 
 *     def __init__(self, editops=None, src_len=0, dest_len=0):
 *         if editops is not None:             # <<<<<<<<<<<<<<
 *             self.editops = list_to_editops(editops, src_len, dest_len)
 * 
 */
  __Pyx_TraceLine(370,0,__PYX_ERR(0, 370, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_editops != Py_None);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":371
 *     def __init__(self, editops=None, src_len=0, dest_len=0):
 *         if editops is not None:
 *             self.editops = list_to_editops(editops, src_len, dest_len)             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
    __Pyx_TraceLine(371,0,__PYX_ERR(0, 371, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_v_src_len); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 371, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_v_dest_len); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 371, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_list_to_editops(__pyx_v_editops, __pyx_t_2, __pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 371, __pyx_L1_error)
    __pyx_v_self->editops = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":370
 * 
 *     def __init__(self, editops=None, src_len=0, dest_len=0):
 *         if editops is not None:             # <<<<<<<<<<<<<<
 *             self.editops = list_to_editops(editops, src_len, dest_len)
 * 
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":369
 *     """
 * 
 *     def __init__(self, editops=None, src_len=0, dest_len=0):             # <<<<<<<<<<<<<<
 *         if editops is not None:
 *             self.editops = list_to_editops(editops, src_len, dest_len)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":373
 *             self.editops = list_to_editops(editops, src_len, dest_len)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_opcodes(cls, Opcodes opcodes):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_3from_opcodes(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_2from_opcodes, "\n        Create Editops from Opcodes\n\n        Parameters\n        ----------\n        opcodes : Opcodes\n            opcodes to convert to editops\n\n        Returns\n        -------\n        editops : Editops\n            Opcodes converted to Editops\n        ");
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_3from_opcodes = {"from_opcodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_3from_opcodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_2from_opcodes};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_3from_opcodes(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_opcodes = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_opcodes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_opcodes,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_opcodes)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 373, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "from_opcodes") < 0)) __PYX_ERR(0, 373, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_opcodes = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_opcodes", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 373, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.from_opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_opcodes), __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes, 1, "opcodes", 0))) __PYX_ERR(0, 374, __pyx_L1_error)
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_2from_opcodes(((PyTypeObject*)__pyx_v_cls), __pyx_v_opcodes);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_2from_opcodes(PyTypeObject *__pyx_v_cls, struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_opcodes) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  rapidfuzz::Editops __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__18)
  __Pyx_RefNannySetupContext("from_opcodes", 1);
  __Pyx_TraceCall("from_opcodes", __pyx_f[0], 373, 0, __PYX_ERR(0, 373, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":388
 *             Opcodes converted to Editops
 *         """
 *         cdef Editops self = cls.__new__(cls)             # <<<<<<<<<<<<<<
 *         self.editops = RfEditops(opcodes.opcodes)
 *         return self
 */
  __Pyx_TraceLine(388,0,__PYX_ERR(0, 388, __pyx_L1_error))
  if (unlikely(((PyObject *)__pyx_v_cls) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object.__new__(X): X is not a type object (NoneType)");
    __PYX_ERR(0, 388, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_v_cls), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops)))) __PYX_ERR(0, 388, __pyx_L1_error)
  __pyx_v_self = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":389
 *         """
 *         cdef Editops self = cls.__new__(cls)
 *         self.editops = RfEditops(opcodes.opcodes)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_TraceLine(389,0,__PYX_ERR(0, 389, __pyx_L1_error))
  try {
    __pyx_t_2 = rapidfuzz::Editops(__pyx_v_opcodes->opcodes);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 389, __pyx_L1_error)
  }
  __pyx_v_self->editops = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":390
 *         cdef Editops self = cls.__new__(cls)
 *         self.editops = RfEditops(opcodes.opcodes)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def as_opcodes(self):
 */
  __Pyx_TraceLine(390,0,__PYX_ERR(0, 390, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":373
 *             self.editops = list_to_editops(editops, src_len, dest_len)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_opcodes(cls, Opcodes opcodes):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.from_opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":392
 *         return self
 * 
 *     def as_opcodes(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert to Opcodes
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_5as_opcodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_4as_opcodes, "\n        Convert to Opcodes\n\n        Returns\n        -------\n        opcodes : Opcodes\n            Editops converted to Opcodes\n        ");
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_5as_opcodes = {"as_opcodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_5as_opcodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_4as_opcodes};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_5as_opcodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_opcodes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("as_opcodes", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "as_opcodes", 0))) return NULL;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_4as_opcodes(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_4as_opcodes(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_opcodes = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  rapidfuzz::Opcodes __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__19)
  __Pyx_RefNannySetupContext("as_opcodes", 1);
  __Pyx_TraceCall("as_opcodes", __pyx_f[0], 392, 0, __PYX_ERR(0, 392, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":401
 *             Editops converted to Opcodes
 *         """
 *         cdef Opcodes opcodes = Opcodes.__new__(Opcodes)             # <<<<<<<<<<<<<<
 *         opcodes.opcodes = RfOpcodes(self.editops)
 *         return opcodes
 */
  __Pyx_TraceLine(401,0,__PYX_ERR(0, 401, __pyx_L1_error))
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Opcodes(((PyTypeObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_opcodes = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":402
 *         """
 *         cdef Opcodes opcodes = Opcodes.__new__(Opcodes)
 *         opcodes.opcodes = RfOpcodes(self.editops)             # <<<<<<<<<<<<<<
 *         return opcodes
 * 
 */
  __Pyx_TraceLine(402,0,__PYX_ERR(0, 402, __pyx_L1_error))
  try {
    __pyx_t_2 = rapidfuzz::Opcodes(__pyx_v_self->editops);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 402, __pyx_L1_error)
  }
  __pyx_v_opcodes->opcodes = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":403
 *         cdef Opcodes opcodes = Opcodes.__new__(Opcodes)
 *         opcodes.opcodes = RfOpcodes(self.editops)
 *         return opcodes             # <<<<<<<<<<<<<<
 * 
 *     def as_matching_blocks(self):
 */
  __Pyx_TraceLine(403,0,__PYX_ERR(0, 403, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_opcodes);
  __pyx_r = ((PyObject *)__pyx_v_opcodes);
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":392
 *         return self
 * 
 *     def as_opcodes(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert to Opcodes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.as_opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_opcodes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":405
 *         return opcodes
 * 
 *     def as_matching_blocks(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert to matching blocks
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7as_matching_blocks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_6as_matching_blocks, "\n        Convert to matching blocks\n\n        Returns\n        -------\n        matching blocks : list[MatchingBlock]\n            Editops converted to matching blocks\n        ");
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7as_matching_blocks = {"as_matching_blocks", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7as_matching_blocks, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_6as_matching_blocks};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7as_matching_blocks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_matching_blocks (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("as_matching_blocks", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "as_matching_blocks", 0))) return NULL;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_6as_matching_blocks(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_6as_matching_blocks(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__20)
  __Pyx_RefNannySetupContext("as_matching_blocks", 1);
  __Pyx_TraceCall("as_matching_blocks", __pyx_f[0], 405, 0, __PYX_ERR(0, 405, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":414
 *             Editops converted to matching blocks
 *         """
 *         return editops_to_matching_blocks(self.editops)             # <<<<<<<<<<<<<<
 * 
 *     def as_list(self):
 */
  __Pyx_TraceLine(414,0,__PYX_ERR(0, 414, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_editops_to_matching_blocks(__pyx_v_self->editops); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":405
 *         return opcodes
 * 
 *     def as_matching_blocks(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert to matching blocks
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.as_matching_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":416
 *         return editops_to_matching_blocks(self.editops)
 * 
 *     def as_list(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert Editops to a list of tuples.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_9as_list(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8as_list, "\n        Convert Editops to a list of tuples.\n\n        This is the equivalent of ``[x for x in editops]``\n        ");
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_9as_list = {"as_list", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_9as_list, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8as_list};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_9as_list(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_list (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("as_list", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "as_list", 0))) return NULL;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8as_list(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8as_list(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__21)
  __Pyx_RefNannySetupContext("as_list", 1);
  __Pyx_TraceCall("as_list", __pyx_f[0], 416, 0, __PYX_ERR(0, 416, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":422
 *         This is the equivalent of ``[x for x in editops]``
 *         """
 *         return editops_to_list(self.editops)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_TraceLine(422,0,__PYX_ERR(0, 422, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_editops_to_list(__pyx_v_self->editops); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":416
 *         return editops_to_matching_blocks(self.editops)
 * 
 *     def as_list(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert Editops to a list of tuples.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.as_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":424
 *         return editops_to_list(self.editops)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         performs copy of Editops
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_11copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_10copy, "\n        performs copy of Editops\n        ");
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_11copy = {"copy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_11copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_10copy};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_11copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("copy", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "copy", 0))) return NULL;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_10copy(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_10copy(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_x = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  rapidfuzz::Editops __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__22)
  __Pyx_RefNannySetupContext("copy", 1);
  __Pyx_TraceCall("copy", __pyx_f[0], 424, 0, __PYX_ERR(0, 424, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":428
 *         performs copy of Editops
 *         """
 *         cdef Editops x = Editops.__new__(Editops)             # <<<<<<<<<<<<<<
 *         x.editops = self.editops
 *         return x
 */
  __Pyx_TraceLine(428,0,__PYX_ERR(0, 428, __pyx_L1_error))
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Editops(((PyTypeObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_x = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":429
 *         """
 *         cdef Editops x = Editops.__new__(Editops)
 *         x.editops = self.editops             # <<<<<<<<<<<<<<
 *         return x
 * 
 */
  __Pyx_TraceLine(429,0,__PYX_ERR(0, 429, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_self->editops;
  __pyx_v_x->editops = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":430
 *         cdef Editops x = Editops.__new__(Editops)
 *         x.editops = self.editops
 *         return x             # <<<<<<<<<<<<<<
 * 
 *     def inverse(self):
 */
  __Pyx_TraceLine(430,0,__PYX_ERR(0, 430, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_x);
  __pyx_r = ((PyObject *)__pyx_v_x);
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":424
 *         return editops_to_list(self.editops)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         performs copy of Editops
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":432
 *         return x
 * 
 *     def inverse(self):             # <<<<<<<<<<<<<<
 *         """
 *         Invert Editops, so it describes how to transform the destination string to
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_13inverse(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_12inverse, "\n        Invert Editops, so it describes how to transform the destination string to\n        the source string.\n\n        Returns\n        -------\n        editops : Editops\n            inverted Editops\n\n        Examples\n        --------\n        >>> from rapidfuzz.distance import Levenshtein\n        >>> Levenshtein.editops('spam', 'park')\n        [Editop(tag=delete, src_pos=0, dest_pos=0),\n         Editop(tag=replace, src_pos=3, dest_pos=2),\n         Editop(tag=insert, src_pos=4, dest_pos=3)]\n\n        >>> Levenshtein.editops('spam', 'park').inverse()\n        [Editop(tag=insert, src_pos=0, dest_pos=0),\n         Editop(tag=replace, src_pos=2, dest_pos=3),\n         Editop(tag=delete, src_pos=3, dest_pos=4)]\n        ");
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_13inverse = {"inverse", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_13inverse, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_12inverse};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_13inverse(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inverse (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("inverse", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "inverse", 0))) return NULL;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_12inverse(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_12inverse(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_x = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  rapidfuzz::Editops __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__23)
  __Pyx_RefNannySetupContext("inverse", 1);
  __Pyx_TraceCall("inverse", __pyx_f[0], 432, 0, __PYX_ERR(0, 432, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":455
 *          Editop(tag=delete, src_pos=3, dest_pos=4)]
 *         """
 *         cdef Editops x = Editops.__new__(Editops)             # <<<<<<<<<<<<<<
 *         x.editops = self.editops.inverse()
 *         return x
 */
  __Pyx_TraceLine(455,0,__PYX_ERR(0, 455, __pyx_L1_error))
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Editops(((PyTypeObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_x = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":456
 *         """
 *         cdef Editops x = Editops.__new__(Editops)
 *         x.editops = self.editops.inverse()             # <<<<<<<<<<<<<<
 *         return x
 * 
 */
  __Pyx_TraceLine(456,0,__PYX_ERR(0, 456, __pyx_L1_error))
  try {
    __pyx_t_2 = __pyx_v_self->editops.inverse();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 456, __pyx_L1_error)
  }
  __pyx_v_x->editops = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":457
 *         cdef Editops x = Editops.__new__(Editops)
 *         x.editops = self.editops.inverse()
 *         return x             # <<<<<<<<<<<<<<
 * 
 *     def apply(self, source_string, destination_string):
 */
  __Pyx_TraceLine(457,0,__PYX_ERR(0, 457, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_x);
  __pyx_r = ((PyObject *)__pyx_v_x);
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":432
 *         return x
 * 
 *     def inverse(self):             # <<<<<<<<<<<<<<
 *         """
 *         Invert Editops, so it describes how to transform the destination string to
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.inverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":459
 *         return x
 * 
 *     def apply(self, source_string, destination_string):             # <<<<<<<<<<<<<<
 *         """
 *         apply editops to source_string
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_15apply(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_14apply, "\n        apply editops to source_string\n\n        Parameters\n        ----------\n        source_string : str | bytes\n            string to apply editops to\n        destination_string : str | bytes\n            string to use for replacements / insertions into source_string\n\n        Returns\n        -------\n        mod_string : str\n            modified source_string\n\n        ");
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_15apply = {"apply", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_15apply, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_14apply};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_15apply(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_source_string = 0;
  PyObject *__pyx_v_destination_string = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("apply (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_string,&__pyx_n_s_destination_string,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_source_string)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 459, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_destination_string)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 459, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("apply", 1, 2, 2, 1); __PYX_ERR(0, 459, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "apply") < 0)) __PYX_ERR(0, 459, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_source_string = values[0];
    __pyx_v_destination_string = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("apply", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 459, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.apply", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_14apply(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self), __pyx_v_source_string, __pyx_v_destination_string);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_14apply(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, PyObject *__pyx_v_source_string, PyObject *__pyx_v_destination_string) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__24)
  __Pyx_RefNannySetupContext("apply", 1);
  __Pyx_TraceCall("apply", __pyx_f[0], 459, 0, __PYX_ERR(0, 459, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":476
 * 
 *         """
 *         if not (is_valid_string(source_string) and is_valid_string(destination_string)):             # <<<<<<<<<<<<<<
 *             raise TypeError("expected strings or bytes object")
 * 
 */
  __Pyx_TraceLine(476,0,__PYX_ERR(0, 476, __pyx_L1_error))
  try {
    __pyx_t_2 = is_valid_string(__pyx_v_source_string);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 476, __pyx_L1_error)
  }
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  try {
    __pyx_t_2 = is_valid_string(__pyx_v_destination_string);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 476, __pyx_L1_error)
  }
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  __pyx_t_3 = (!__pyx_t_1);
  if (unlikely(__pyx_t_3)) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":477
 *         """
 *         if not (is_valid_string(source_string) and is_valid_string(destination_string)):
 *             raise TypeError("expected strings or bytes object")             # <<<<<<<<<<<<<<
 * 
 *         return editops_apply(self.editops, convert_string(source_string), convert_string(destination_string))
 */
    __Pyx_TraceLine(477,0,__PYX_ERR(0, 477, __pyx_L1_error))
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 477, __pyx_L1_error)

    /* "rapidfuzz/distance/_initialize_cpp.pyx":476
 * 
 *         """
 *         if not (is_valid_string(source_string) and is_valid_string(destination_string)):             # <<<<<<<<<<<<<<
 *             raise TypeError("expected strings or bytes object")
 * 
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":479
 *             raise TypeError("expected strings or bytes object")
 * 
 *         return editops_apply(self.editops, convert_string(source_string), convert_string(destination_string))             # <<<<<<<<<<<<<<
 * 
 *     def remove_subsequence(self, Editops subsequence):
 */
  __Pyx_TraceLine(479,0,__PYX_ERR(0, 479, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_4 = editops_apply(__pyx_v_self->editops, convert_string(__pyx_v_source_string), convert_string(__pyx_v_destination_string));
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 479, __pyx_L1_error)
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 479, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":459
 *         return x
 * 
 *     def apply(self, source_string, destination_string):             # <<<<<<<<<<<<<<
 *         """
 *         apply editops to source_string
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.apply", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":481
 *         return editops_apply(self.editops, convert_string(source_string), convert_string(destination_string))
 * 
 *     def remove_subsequence(self, Editops subsequence):             # <<<<<<<<<<<<<<
 *         """
 *         remove a subsequence
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_17remove_subsequence(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_16remove_subsequence, "\n        remove a subsequence\n\n        Parameters\n        ----------\n        subsequence : Editops\n            subsequence to remove (has to be a subset of editops)\n\n        Returns\n        -------\n        sequence : Editops\n            a copy of the editops without the subsequence\n        ");
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_17remove_subsequence = {"remove_subsequence", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_17remove_subsequence, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_16remove_subsequence};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_17remove_subsequence(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_subsequence = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_subsequence (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_subsequence,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_subsequence)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 481, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "remove_subsequence") < 0)) __PYX_ERR(0, 481, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_subsequence = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("remove_subsequence", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 481, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.remove_subsequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_subsequence), __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops, 1, "subsequence", 0))) __PYX_ERR(0, 481, __pyx_L1_error)
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_16remove_subsequence(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self), __pyx_v_subsequence);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_16remove_subsequence(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_subsequence) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_x = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  rapidfuzz::Editops __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__26)
  __Pyx_RefNannySetupContext("remove_subsequence", 1);
  __Pyx_TraceCall("remove_subsequence", __pyx_f[0], 481, 0, __PYX_ERR(0, 481, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":495
 *             a copy of the editops without the subsequence
 *         """
 *         cdef Editops x = Editops.__new__(Editops)             # <<<<<<<<<<<<<<
 *         x.editops = self.editops.remove_subsequence(subsequence.editops)
 *         return x
 */
  __Pyx_TraceLine(495,0,__PYX_ERR(0, 495, __pyx_L1_error))
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Editops(((PyTypeObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_x = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":496
 *         """
 *         cdef Editops x = Editops.__new__(Editops)
 *         x.editops = self.editops.remove_subsequence(subsequence.editops)             # <<<<<<<<<<<<<<
 *         return x
 * 
 */
  __Pyx_TraceLine(496,0,__PYX_ERR(0, 496, __pyx_L1_error))
  try {
    __pyx_t_2 = __pyx_v_self->editops.remove_subsequence(__pyx_v_subsequence->editops);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 496, __pyx_L1_error)
  }
  __pyx_v_x->editops = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":497
 *         cdef Editops x = Editops.__new__(Editops)
 *         x.editops = self.editops.remove_subsequence(subsequence.editops)
 *         return x             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(497,0,__PYX_ERR(0, 497, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_x);
  __pyx_r = ((PyObject *)__pyx_v_x);
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":481
 *         return editops_apply(self.editops, convert_string(source_string), convert_string(destination_string))
 * 
 *     def remove_subsequence(self, Editops subsequence):             # <<<<<<<<<<<<<<
 *         """
 *         remove a subsequence
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.remove_subsequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":499
 *         return x
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def src_len(self):
 *         return self.editops.get_src_len()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7src_len_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7src_len_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7src_len___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7src_len___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 499, 0, __PYX_ERR(0, 499, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":501
 *     @property
 *     def src_len(self):
 *         return self.editops.get_src_len()             # <<<<<<<<<<<<<<
 * 
 *     @src_len.setter
 */
  __Pyx_TraceLine(501,0,__PYX_ERR(0, 501, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->editops.get_src_len()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":499
 *         return x
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def src_len(self):
 *         return self.editops.get_src_len()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.src_len.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":503
 *         return self.editops.get_src_len()
 * 
 *     @src_len.setter             # <<<<<<<<<<<<<<
 *     def src_len(self, value):
 *         self.editops.set_src_len(value)
 */

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7src_len_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7src_len_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7src_len_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7src_len_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__set__", __pyx_f[0], 503, 0, __PYX_ERR(0, 503, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":505
 *     @src_len.setter
 *     def src_len(self, value):
 *         self.editops.set_src_len(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(505,0,__PYX_ERR(0, 505, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 505, __pyx_L1_error)
  __pyx_v_self->editops.set_src_len(__pyx_t_1);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":503
 *         return self.editops.get_src_len()
 * 
 *     @src_len.setter             # <<<<<<<<<<<<<<
 *     def src_len(self, value):
 *         self.editops.set_src_len(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.src_len.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":507
 *         self.editops.set_src_len(value)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def dest_len(self):
 *         return self.editops.get_dest_len()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8dest_len_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8dest_len_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8dest_len___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8dest_len___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 507, 0, __PYX_ERR(0, 507, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":509
 *     @property
 *     def dest_len(self):
 *         return self.editops.get_dest_len()             # <<<<<<<<<<<<<<
 * 
 *     @dest_len.setter
 */
  __Pyx_TraceLine(509,0,__PYX_ERR(0, 509, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->editops.get_dest_len()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":507
 *         self.editops.set_src_len(value)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def dest_len(self):
 *         return self.editops.get_dest_len()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.dest_len.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":511
 *         return self.editops.get_dest_len()
 * 
 *     @dest_len.setter             # <<<<<<<<<<<<<<
 *     def dest_len(self, value):
 *         self.editops.set_dest_len(value)
 */

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8dest_len_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8dest_len_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8dest_len_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8dest_len_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__set__", __pyx_f[0], 511, 0, __PYX_ERR(0, 511, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":513
 *     @dest_len.setter
 *     def dest_len(self, value):
 *         self.editops.set_dest_len(value)             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, other):
 */
  __Pyx_TraceLine(513,0,__PYX_ERR(0, 513, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 513, __pyx_L1_error)
  __pyx_v_self->editops.set_dest_len(__pyx_t_1);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":511
 *         return self.editops.get_dest_len()
 * 
 *     @dest_len.setter             # <<<<<<<<<<<<<<
 *     def dest_len(self, value):
 *         self.editops.set_dest_len(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.dest_len.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":515
 *         self.editops.set_dest_len(value)
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Editops):
 *             return self.editops == (<Editops>other).editops
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_19__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_19__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_18__eq__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_18__eq__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 1);
  __Pyx_TraceCall("__eq__", __pyx_f[0], 515, 0, __PYX_ERR(0, 515, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":516
 * 
 *     def __eq__(self, other):
 *         if isinstance(other, Editops):             # <<<<<<<<<<<<<<
 *             return self.editops == (<Editops>other).editops
 * 
 */
  __Pyx_TraceLine(516,0,__PYX_ERR(0, 516, __pyx_L1_error))
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops); 
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":517
 *     def __eq__(self, other):
 *         if isinstance(other, Editops):
 *             return self.editops == (<Editops>other).editops             # <<<<<<<<<<<<<<
 * 
 *         return False
 */
    __Pyx_TraceLine(517,0,__PYX_ERR(0, 517, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_self->editops == ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_other)->editops)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":516
 * 
 *     def __eq__(self, other):
 *         if isinstance(other, Editops):             # <<<<<<<<<<<<<<
 *             return self.editops == (<Editops>other).editops
 * 
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":519
 *             return self.editops == (<Editops>other).editops
 * 
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_TraceLine(519,0,__PYX_ERR(0, 519, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":515
 *         self.editops.set_dest_len(value)
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Editops):
 *             return self.editops == (<Editops>other).editops
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":521
 *         return False
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.editops.size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_21__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_21__len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_20__len__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_20__len__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__len__", __pyx_f[0], 521, 0, __PYX_ERR(0, 521, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":522
 * 
 *     def __len__(self):
 *         return self.editops.size()             # <<<<<<<<<<<<<<
 * 
 *     def __delitem__(self, key):
 */
  __Pyx_TraceLine(522,0,__PYX_ERR(0, 522, __pyx_L1_error))
  __pyx_r = __pyx_v_self->editops.size();
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":521
 *         return False
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.editops.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":524
 *         return self.editops.size()
 * 
 *     def __delitem__(self, key):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t index
 *         cdef Py_ssize_t start, stop, step
 */

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_23__delitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_23__delitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__delitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_22__delitem__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_22__delitem__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, PyObject *__pyx_v_key) {
  Py_ssize_t __pyx_v_index;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__delitem__", 1);
  __Pyx_TraceCall("__delitem__", __pyx_f[0], 524, 0, __PYX_ERR(0, 524, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":528
 *         cdef Py_ssize_t start, stop, step
 * 
 *         if isinstance(key, int):             # <<<<<<<<<<<<<<
 *             index = key
 *             if index < 0:
 */
  __Pyx_TraceLine(528,0,__PYX_ERR(0, 528, __pyx_L1_error))
  __pyx_t_1 = PyInt_Check(__pyx_v_key); 
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":529
 * 
 *         if isinstance(key, int):
 *             index = key             # <<<<<<<<<<<<<<
 *             if index < 0:
 *                 index += <Py_ssize_t>self.editops.size()
 */
    __Pyx_TraceLine(529,0,__PYX_ERR(0, 529, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_v_key); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 529, __pyx_L1_error)
    __pyx_v_index = __pyx_t_2;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":530
 *         if isinstance(key, int):
 *             index = key
 *             if index < 0:             # <<<<<<<<<<<<<<
 *                 index += <Py_ssize_t>self.editops.size()
 * 
 */
    __Pyx_TraceLine(530,0,__PYX_ERR(0, 530, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_index < 0);
    if (__pyx_t_1) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":531
 *             index = key
 *             if index < 0:
 *                 index += <Py_ssize_t>self.editops.size()             # <<<<<<<<<<<<<<
 * 
 *             if index < 0 or index >= <Py_ssize_t>self.editops.size():
 */
      __Pyx_TraceLine(531,0,__PYX_ERR(0, 531, __pyx_L1_error))
      __pyx_v_index = (__pyx_v_index + ((Py_ssize_t)__pyx_v_self->editops.size()));

      /* "rapidfuzz/distance/_initialize_cpp.pyx":530
 *         if isinstance(key, int):
 *             index = key
 *             if index < 0:             # <<<<<<<<<<<<<<
 *                 index += <Py_ssize_t>self.editops.size()
 * 
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":533
 *                 index += <Py_ssize_t>self.editops.size()
 * 
 *             if index < 0 or index >= <Py_ssize_t>self.editops.size():             # <<<<<<<<<<<<<<
 *                 raise IndexError("Editops index out of range")
 * 
 */
    __Pyx_TraceLine(533,0,__PYX_ERR(0, 533, __pyx_L1_error))
    __pyx_t_3 = (__pyx_v_index < 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_index >= ((Py_ssize_t)__pyx_v_self->editops.size()));
    __pyx_t_1 = __pyx_t_3;
    __pyx_L6_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":534
 * 
 *             if index < 0 or index >= <Py_ssize_t>self.editops.size():
 *                 raise IndexError("Editops index out of range")             # <<<<<<<<<<<<<<
 * 
 *             self.editops.erase(self.editops.begin() + index)
 */
      __Pyx_TraceLine(534,0,__PYX_ERR(0, 534, __pyx_L1_error))
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 534, __pyx_L1_error)

      /* "rapidfuzz/distance/_initialize_cpp.pyx":533
 *                 index += <Py_ssize_t>self.editops.size()
 * 
 *             if index < 0 or index >= <Py_ssize_t>self.editops.size():             # <<<<<<<<<<<<<<
 *                 raise IndexError("Editops index out of range")
 * 
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":536
 *                 raise IndexError("Editops index out of range")
 * 
 *             self.editops.erase(self.editops.begin() + index)             # <<<<<<<<<<<<<<
 *         elif isinstance(key, slice):
 *             start, stop, step = key.indices(<Py_ssize_t>self.editops.size())
 */
    __Pyx_TraceLine(536,0,__PYX_ERR(0, 536, __pyx_L1_error))
    (void)(__pyx_v_self->editops.erase((__pyx_v_self->editops.begin() + __pyx_v_index)));

    /* "rapidfuzz/distance/_initialize_cpp.pyx":528
 *         cdef Py_ssize_t start, stop, step
 * 
 *         if isinstance(key, int):             # <<<<<<<<<<<<<<
 *             index = key
 *             if index < 0:
 */
    goto __pyx_L3;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":537
 * 
 *             self.editops.erase(self.editops.begin() + index)
 *         elif isinstance(key, slice):             # <<<<<<<<<<<<<<
 *             start, stop, step = key.indices(<Py_ssize_t>self.editops.size())
 *             if step < 0:
 */
  __Pyx_TraceLine(537,0,__PYX_ERR(0, 537, __pyx_L1_error))
  __pyx_t_1 = PySlice_Check(__pyx_v_key); 
  if (likely(__pyx_t_1)) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":538
 *             self.editops.erase(self.editops.begin() + index)
 *         elif isinstance(key, slice):
 *             start, stop, step = key.indices(<Py_ssize_t>self.editops.size())             # <<<<<<<<<<<<<<
 *             if step < 0:
 *                 raise ValueError("step sizes below 0 lead to an invalid order of editops")
 */
    __Pyx_TraceLine(538,0,__PYX_ERR(0, 538, __pyx_L1_error))
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_indices); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyInt_FromSsize_t(((Py_ssize_t)__pyx_v_self->editops.size())); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_6};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 538, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_9);
      index = 0; __pyx_t_5 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_5)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 2; __pyx_t_7 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 3) < 0) __PYX_ERR(0, 538, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L9_unpacking_done;
      __pyx_L8_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 538, __pyx_L1_error)
      __pyx_L9_unpacking_done:;
    }
    __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 538, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_6); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 538, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_7); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 538, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_start = __pyx_t_2;
    __pyx_v_stop = __pyx_t_11;
    __pyx_v_step = __pyx_t_12;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":539
 *         elif isinstance(key, slice):
 *             start, stop, step = key.indices(<Py_ssize_t>self.editops.size())
 *             if step < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("step sizes below 0 lead to an invalid order of editops")
 * 
 */
    __Pyx_TraceLine(539,0,__PYX_ERR(0, 539, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_step < 0);
    if (unlikely(__pyx_t_1)) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":540
 *             start, stop, step = key.indices(<Py_ssize_t>self.editops.size())
 *             if step < 0:
 *                 raise ValueError("step sizes below 0 lead to an invalid order of editops")             # <<<<<<<<<<<<<<
 * 
 *             self.editops.remove_slice(start, stop, step)
 */
      __Pyx_TraceLine(540,0,__PYX_ERR(0, 540, __pyx_L1_error))
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 540, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 540, __pyx_L1_error)

      /* "rapidfuzz/distance/_initialize_cpp.pyx":539
 *         elif isinstance(key, slice):
 *             start, stop, step = key.indices(<Py_ssize_t>self.editops.size())
 *             if step < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("step sizes below 0 lead to an invalid order of editops")
 * 
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":542
 *                 raise ValueError("step sizes below 0 lead to an invalid order of editops")
 * 
 *             self.editops.remove_slice(start, stop, step)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Expected index or slice")
 */
    __Pyx_TraceLine(542,0,__PYX_ERR(0, 542, __pyx_L1_error))
    try {
      __pyx_v_self->editops.remove_slice(__pyx_v_start, __pyx_v_stop, __pyx_v_step);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 542, __pyx_L1_error)
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":537
 * 
 *             self.editops.erase(self.editops.begin() + index)
 *         elif isinstance(key, slice):             # <<<<<<<<<<<<<<
 *             start, stop, step = key.indices(<Py_ssize_t>self.editops.size())
 *             if step < 0:
 */
    goto __pyx_L3;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":544
 *             self.editops.remove_slice(start, stop, step)
 *         else:
 *             raise TypeError("Expected index or slice")             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, key):
 */
  __Pyx_TraceLine(544,0,__PYX_ERR(0, 544, __pyx_L1_error))
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 544, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":524
 *         return self.editops.size()
 * 
 *     def __delitem__(self, key):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t index
 *         cdef Py_ssize_t start, stop, step
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.__delitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":546
 *             raise TypeError("Expected index or slice")
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t index
 *         cdef Py_ssize_t start, stop, step
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_25__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_25__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_24__getitem__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_24__getitem__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, PyObject *__pyx_v_key) {
  Py_ssize_t __pyx_v_index;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  rapidfuzz::EditOp __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  unsigned int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  rapidfuzz::Editops __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 1);
  __Pyx_TraceCall("__getitem__", __pyx_f[0], 546, 0, __PYX_ERR(0, 546, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":550
 *         cdef Py_ssize_t start, stop, step
 * 
 *         if isinstance(key, int):             # <<<<<<<<<<<<<<
 *             index = key
 *             if index < 0:
 */
  __Pyx_TraceLine(550,0,__PYX_ERR(0, 550, __pyx_L1_error))
  __pyx_t_1 = PyInt_Check(__pyx_v_key); 
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":551
 * 
 *         if isinstance(key, int):
 *             index = key             # <<<<<<<<<<<<<<
 *             if index < 0:
 *                 index += <Py_ssize_t>self.editops.size()
 */
    __Pyx_TraceLine(551,0,__PYX_ERR(0, 551, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_v_key); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 551, __pyx_L1_error)
    __pyx_v_index = __pyx_t_2;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":552
 *         if isinstance(key, int):
 *             index = key
 *             if index < 0:             # <<<<<<<<<<<<<<
 *                 index += <Py_ssize_t>self.editops.size()
 * 
 */
    __Pyx_TraceLine(552,0,__PYX_ERR(0, 552, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_index < 0);
    if (__pyx_t_1) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":553
 *             index = key
 *             if index < 0:
 *                 index += <Py_ssize_t>self.editops.size()             # <<<<<<<<<<<<<<
 * 
 *             if index < 0 or index >= <Py_ssize_t>self.editops.size():
 */
      __Pyx_TraceLine(553,0,__PYX_ERR(0, 553, __pyx_L1_error))
      __pyx_v_index = (__pyx_v_index + ((Py_ssize_t)__pyx_v_self->editops.size()));

      /* "rapidfuzz/distance/_initialize_cpp.pyx":552
 *         if isinstance(key, int):
 *             index = key
 *             if index < 0:             # <<<<<<<<<<<<<<
 *                 index += <Py_ssize_t>self.editops.size()
 * 
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":555
 *                 index += <Py_ssize_t>self.editops.size()
 * 
 *             if index < 0 or index >= <Py_ssize_t>self.editops.size():             # <<<<<<<<<<<<<<
 *                 raise IndexError("Editops index out of range")
 * 
 */
    __Pyx_TraceLine(555,0,__PYX_ERR(0, 555, __pyx_L1_error))
    __pyx_t_3 = (__pyx_v_index < 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_index >= ((Py_ssize_t)__pyx_v_self->editops.size()));
    __pyx_t_1 = __pyx_t_3;
    __pyx_L6_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":556
 * 
 *             if index < 0 or index >= <Py_ssize_t>self.editops.size():
 *                 raise IndexError("Editops index out of range")             # <<<<<<<<<<<<<<
 * 
 *             return Editop(
 */
      __Pyx_TraceLine(556,0,__PYX_ERR(0, 556, __pyx_L1_error))
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 556, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 556, __pyx_L1_error)

      /* "rapidfuzz/distance/_initialize_cpp.pyx":555
 *                 index += <Py_ssize_t>self.editops.size()
 * 
 *             if index < 0 or index >= <Py_ssize_t>self.editops.size():             # <<<<<<<<<<<<<<
 *                 raise IndexError("Editops index out of range")
 * 
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":558
 *                 raise IndexError("Editops index out of range")
 * 
 *             return Editop(             # <<<<<<<<<<<<<<
 *                 edit_type_to_str(self.editops[index].type),
 *                 self.editops[index].src_pos,
 */
    __Pyx_TraceLine(558,0,__PYX_ERR(0, 558, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":559
 * 
 *             return Editop(
 *                 edit_type_to_str(self.editops[index].type),             # <<<<<<<<<<<<<<
 *                 self.editops[index].src_pos,
 *                 self.editops[index].dest_pos
 */
    __Pyx_TraceLine(559,0,__PYX_ERR(0, 559, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_self->editops[__pyx_v_index];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 559, __pyx_L1_error)
    }
    __pyx_t_4 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_edit_type_to_str(__pyx_t_5.type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":560
 *             return Editop(
 *                 edit_type_to_str(self.editops[index].type),
 *                 self.editops[index].src_pos,             # <<<<<<<<<<<<<<
 *                 self.editops[index].dest_pos
 *             )
 */
    __Pyx_TraceLine(560,0,__PYX_ERR(0, 560, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_self->editops[__pyx_v_index];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 560, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_FromSize_t(__pyx_t_5.src_pos); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":561
 *                 edit_type_to_str(self.editops[index].type),
 *                 self.editops[index].src_pos,
 *                 self.editops[index].dest_pos             # <<<<<<<<<<<<<<
 *             )
 *         elif isinstance(key, slice):
 */
    __Pyx_TraceLine(561,0,__PYX_ERR(0, 561, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_self->editops[__pyx_v_index];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 561, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyInt_FromSize_t(__pyx_t_5.dest_pos); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":558
 *                 raise IndexError("Editops index out of range")
 * 
 *             return Editop(             # <<<<<<<<<<<<<<
 *                 edit_type_to_str(self.editops[index].type),
 *                 self.editops[index].src_pos,
 */
    __Pyx_TraceLine(558,0,__PYX_ERR(0, 558, __pyx_L1_error))
    __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4)) __PYX_ERR(0, 558, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6)) __PYX_ERR(0, 558, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_7);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7)) __PYX_ERR(0, 558, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":550
 *         cdef Py_ssize_t start, stop, step
 * 
 *         if isinstance(key, int):             # <<<<<<<<<<<<<<
 *             index = key
 *             if index < 0:
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":563
 *                 self.editops[index].dest_pos
 *             )
 *         elif isinstance(key, slice):             # <<<<<<<<<<<<<<
 *             start, stop, step = key.indices(<Py_ssize_t>self.editops.size())
 *             if step < 0:
 */
  __Pyx_TraceLine(563,0,__PYX_ERR(0, 563, __pyx_L1_error))
  __pyx_t_1 = PySlice_Check(__pyx_v_key); 
  if (likely(__pyx_t_1)) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":564
 *             )
 *         elif isinstance(key, slice):
 *             start, stop, step = key.indices(<Py_ssize_t>self.editops.size())             # <<<<<<<<<<<<<<
 *             if step < 0:
 *                 raise ValueError("step sizes below 0 lead to an invalid order of editops")
 */
    __Pyx_TraceLine(564,0,__PYX_ERR(0, 564, __pyx_L1_error))
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_indices); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = PyInt_FromSsize_t(((Py_ssize_t)__pyx_v_self->editops.size())); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = NULL;
    __pyx_t_9 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_9 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_6};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 564, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
      PyObject* sequence = __pyx_t_7;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 564, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 564, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 564, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 564, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 564, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10);
      index = 0; __pyx_t_8 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_8)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      index = 1; __pyx_t_6 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 2; __pyx_t_4 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_4)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 3) < 0) __PYX_ERR(0, 564, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L9_unpacking_done;
      __pyx_L8_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 564, __pyx_L1_error)
      __pyx_L9_unpacking_done:;
    }
    __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_8); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_6); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_start = __pyx_t_2;
    __pyx_v_stop = __pyx_t_12;
    __pyx_v_step = __pyx_t_13;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":565
 *         elif isinstance(key, slice):
 *             start, stop, step = key.indices(<Py_ssize_t>self.editops.size())
 *             if step < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("step sizes below 0 lead to an invalid order of editops")
 *             x = Editops.__new__(Editops)
 */
    __Pyx_TraceLine(565,0,__PYX_ERR(0, 565, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_step < 0);
    if (unlikely(__pyx_t_1)) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":566
 *             start, stop, step = key.indices(<Py_ssize_t>self.editops.size())
 *             if step < 0:
 *                 raise ValueError("step sizes below 0 lead to an invalid order of editops")             # <<<<<<<<<<<<<<
 *             x = Editops.__new__(Editops)
 *             (<Editops>x).editops = self.editops.slice(start, stop, step)
 */
      __Pyx_TraceLine(566,0,__PYX_ERR(0, 566, __pyx_L1_error))
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 566, __pyx_L1_error)

      /* "rapidfuzz/distance/_initialize_cpp.pyx":565
 *         elif isinstance(key, slice):
 *             start, stop, step = key.indices(<Py_ssize_t>self.editops.size())
 *             if step < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("step sizes below 0 lead to an invalid order of editops")
 *             x = Editops.__new__(Editops)
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":567
 *             if step < 0:
 *                 raise ValueError("step sizes below 0 lead to an invalid order of editops")
 *             x = Editops.__new__(Editops)             # <<<<<<<<<<<<<<
 *             (<Editops>x).editops = self.editops.slice(start, stop, step)
 *             return x
 */
    __Pyx_TraceLine(567,0,__PYX_ERR(0, 567, __pyx_L1_error))
    __pyx_t_7 = ((PyObject *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Editops(((PyTypeObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 567, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_7);
    __pyx_v_x = ((PyObject *)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":568
 *                 raise ValueError("step sizes below 0 lead to an invalid order of editops")
 *             x = Editops.__new__(Editops)
 *             (<Editops>x).editops = self.editops.slice(start, stop, step)             # <<<<<<<<<<<<<<
 *             return x
 *         else:
 */
    __Pyx_TraceLine(568,0,__PYX_ERR(0, 568, __pyx_L1_error))
    try {
      __pyx_t_14 = __pyx_v_self->editops.slice(__pyx_v_start, __pyx_v_stop, __pyx_v_step);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 568, __pyx_L1_error)
    }
    ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_x)->editops = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_14);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":569
 *             x = Editops.__new__(Editops)
 *             (<Editops>x).editops = self.editops.slice(start, stop, step)
 *             return x             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Expected index or slice")
 */
    __Pyx_TraceLine(569,0,__PYX_ERR(0, 569, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_x);
    __pyx_r = __pyx_v_x;
    goto __pyx_L0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":563
 *                 self.editops[index].dest_pos
 *             )
 *         elif isinstance(key, slice):             # <<<<<<<<<<<<<<
 *             start, stop, step = key.indices(<Py_ssize_t>self.editops.size())
 *             if step < 0:
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":571
 *             return x
 *         else:
 *             raise TypeError("Expected index or slice")             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_TraceLine(571,0,__PYX_ERR(0, 571, __pyx_L1_error))
  /*else*/ {
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 571, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 571, __pyx_L1_error)
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":546
 *             raise TypeError("Expected index or slice")
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t index
 *         cdef Py_ssize_t start, stop, step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_7Editops_28generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "rapidfuzz/distance/_initialize_cpp.pyx":573
 *             raise TypeError("Expected index or slice")
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef size_t i
 *         for i in range(self.editops.size()):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_27__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_27__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_26__iter__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_26__iter__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 573, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_7Editops_28generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_Editops___iter, __pyx_n_s_rapidfuzz_distance__initialize_c); if (unlikely(!gen)) __PYX_ERR(0, 573, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_7Editops_28generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ *__pyx_cur_scope = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  rapidfuzz::EditOp __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  __Pyx_TraceCall("__iter__", __pyx_f[0], 573, 0, __PYX_ERR(0, 573, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 573, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":575
 *     def __iter__(self):
 *         cdef size_t i
 *         for i in range(self.editops.size()):             # <<<<<<<<<<<<<<
 *             yield Editop(
 *                 edit_type_to_str(self.editops[i].type),
 */
  __Pyx_TraceLine(575,0,__PYX_ERR(0, 575, __pyx_L1_error))
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->editops.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_3;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":577
 *         for i in range(self.editops.size()):
 *             yield Editop(
 *                 edit_type_to_str(self.editops[i].type),             # <<<<<<<<<<<<<<
 *                 self.editops[i].src_pos,
 *                 self.editops[i].dest_pos
 */
    __Pyx_TraceLine(577,0,__PYX_ERR(0, 577, __pyx_L1_error))
    try {
      __pyx_t_4 = __pyx_cur_scope->__pyx_v_self->editops[__pyx_cur_scope->__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 577, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_edit_type_to_str(__pyx_t_4.type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":578
 *             yield Editop(
 *                 edit_type_to_str(self.editops[i].type),
 *                 self.editops[i].src_pos,             # <<<<<<<<<<<<<<
 *                 self.editops[i].dest_pos
 *             )
 */
    __Pyx_TraceLine(578,0,__PYX_ERR(0, 578, __pyx_L1_error))
    try {
      __pyx_t_4 = __pyx_cur_scope->__pyx_v_self->editops[__pyx_cur_scope->__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 578, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_FromSize_t(__pyx_t_4.src_pos); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":579
 *                 edit_type_to_str(self.editops[i].type),
 *                 self.editops[i].src_pos,
 *                 self.editops[i].dest_pos             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    __Pyx_TraceLine(579,0,__PYX_ERR(0, 579, __pyx_L1_error))
    try {
      __pyx_t_4 = __pyx_cur_scope->__pyx_v_self->editops[__pyx_cur_scope->__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 579, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyInt_FromSize_t(__pyx_t_4.dest_pos); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":576
 *         cdef size_t i
 *         for i in range(self.editops.size()):
 *             yield Editop(             # <<<<<<<<<<<<<<
 *                 edit_type_to_str(self.editops[i].type),
 *                 self.editops[i].src_pos,
 */
    __Pyx_TraceLine(576,0,__PYX_ERR(0, 576, __pyx_L1_error))
    __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5)) __PYX_ERR(0, 576, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6)) __PYX_ERR(0, 576, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_7);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7)) __PYX_ERR(0, 576, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_TraceReturn(__pyx_r, 0);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 576, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":573
 *             raise TypeError("Expected index or slice")
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef size_t i
 *         for i in range(self.editops.size()):
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":582
 *             )
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Editops([" + ", ".join(repr(op) for op in self) + f"], src_len={self.editops.get_src_len()}, dest_len={self.editops.get_dest_len()})"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_30__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_30__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_29__repr__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8__repr___2generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "rapidfuzz/distance/_initialize_cpp.pyx":583
 * 
 *     def __repr__(self):
 *         return "Editops([" + ", ".join(repr(op) for op in self) + f"], src_len={self.editops.get_src_len()}, dest_len={self.editops.get_dest_len()})"             # <<<<<<<<<<<<<<
 * 
 * cdef class Opcode:
 */

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8__repr___genexpr(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_genexpr_arg_0) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 583, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_genexpr_arg_0);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_genexpr_arg_0);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8__repr___2generator6, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_repr___locals_genexpr, __pyx_n_s_rapidfuzz_distance__initialize_c); if (unlikely(!gen)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.__repr__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8__repr___2generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 583, 0, __PYX_ERR(0, 583, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 583, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 583, __pyx_L1_error) }
  if (likely(PyList_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_genexpr_arg_0))) || PyTuple_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_genexpr_arg_0))) {
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_genexpr_arg_0); __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_cur_scope->__pyx_genexpr_arg_0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 583, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 583, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 583, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 583, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 583, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 583, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 583, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 583, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_op);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_op, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Repr(__pyx_cur_scope->__pyx_v_op); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":582
 *             )
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Editops([" + ", ".join(repr(op) for op in self) + f"], src_len={self.editops.get_src_len()}, dest_len={self.editops.get_dest_len()})"
 * 
 */

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_29__repr__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self) {
  PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8__repr___2generator6 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);
  __Pyx_TraceCall("__repr__", __pyx_f[0], 582, 0, __PYX_ERR(0, 582, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":583
 * 
 *     def __repr__(self):
 *         return "Editops([" + ", ".join(repr(op) for op in self) + f"], src_len={self.editops.get_src_len()}, dest_len={self.editops.get_dest_len()})"             # <<<<<<<<<<<<<<
 * 
 * cdef class Opcode:
 */
  __Pyx_TraceLine(583,0,__PYX_ERR(0, 583, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8__repr___genexpr(NULL, __pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyUnicode_Join(__pyx_kp_u__2, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Editops, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_4 = 127;
  __Pyx_INCREF(__pyx_kp_u_src_len_2);
  __pyx_t_3 += 11;
  __Pyx_GIVEREF(__pyx_kp_u_src_len_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_src_len_2);
  __pyx_t_5 = __Pyx_PyUnicode_From_size_t(__pyx_v_self->editops.get_src_len(), 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_dest_len_2);
  __pyx_t_3 += 11;
  __Pyx_GIVEREF(__pyx_kp_u_dest_len_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_dest_len_2);
  __pyx_t_5 = __Pyx_PyUnicode_From_size_t(__pyx_v_self->editops.get_dest_len(), 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__12);
  __pyx_t_3 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__12);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__12);
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":582
 *             )
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Editops([" + ", ".join(repr(op) for op in self) + f"], src_len={self.editops.get_src_len()}, dest_len={self.editops.get_dest_len()})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8__repr___2generator6);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.editops cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_32__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_32__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_32__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_32__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_31__reduce_cython__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_31__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__30)
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.editops cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.editops cannot be converted to a Python object for pickling"
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(2, 2, __pyx_L1_error))
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_editops_cannot_be_converted, 0, 0);
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.editops cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.editops cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.editops cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_34__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_34__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_34__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_34__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_33__setstate_cython__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Editops_33__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__31)
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[2], 3, 0, __PYX_ERR(2, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError, "self.editops cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.editops cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(2, 4, __pyx_L1_error))
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_editops_cannot_be_converted, 0, 0);
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.editops cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.editops cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Editops.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":619
 *     cdef public Py_ssize_t dest_end
 * 
 *     def __init__(self, tag, src_start, src_end, dest_start, dest_end):             # <<<<<<<<<<<<<<
 *         self.tag = tag
 *         self.src_start = src_start
 */

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tag = 0;
  PyObject *__pyx_v_src_start = 0;
  PyObject *__pyx_v_src_end = 0;
  PyObject *__pyx_v_dest_start = 0;
  PyObject *__pyx_v_dest_end = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tag,&__pyx_n_s_src_start,&__pyx_n_s_src_end,&__pyx_n_s_dest_start,&__pyx_n_s_dest_end,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tag)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_src_start)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 1); __PYX_ERR(0, 619, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_src_end)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 2); __PYX_ERR(0, 619, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dest_start)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 3); __PYX_ERR(0, 619, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dest_end)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 4); __PYX_ERR(0, 619, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 619, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
      values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
      values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
      values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
    }
    __pyx_v_tag = values[0];
    __pyx_v_src_start = values[1];
    __pyx_v_src_end = values[2];
    __pyx_v_dest_start = values[3];
    __pyx_v_dest_end = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 619, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode___init__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self), __pyx_v_tag, __pyx_v_src_start, __pyx_v_src_end, __pyx_v_dest_start, __pyx_v_dest_end);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode___init__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, PyObject *__pyx_v_tag, PyObject *__pyx_v_src_start, PyObject *__pyx_v_src_end, PyObject *__pyx_v_dest_start, PyObject *__pyx_v_dest_end) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);
  __Pyx_TraceCall("__init__", __pyx_f[0], 619, 0, __PYX_ERR(0, 619, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":620
 * 
 *     def __init__(self, tag, src_start, src_end, dest_start, dest_end):
 *         self.tag = tag             # <<<<<<<<<<<<<<
 *         self.src_start = src_start
 *         self.src_end = src_end
 */
  __Pyx_TraceLine(620,0,__PYX_ERR(0, 620, __pyx_L1_error))
  if (!(likely(PyUnicode_CheckExact(__pyx_v_tag))||((__pyx_v_tag) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_v_tag))) __PYX_ERR(0, 620, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_tag;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tag);
  __Pyx_DECREF(__pyx_v_self->tag);
  __pyx_v_self->tag = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":621
 *     def __init__(self, tag, src_start, src_end, dest_start, dest_end):
 *         self.tag = tag
 *         self.src_start = src_start             # <<<<<<<<<<<<<<
 *         self.src_end = src_end
 *         self.dest_start = dest_start
 */
  __Pyx_TraceLine(621,0,__PYX_ERR(0, 621, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_v_src_start); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 621, __pyx_L1_error)
  __pyx_v_self->src_start = __pyx_t_2;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":622
 *         self.tag = tag
 *         self.src_start = src_start
 *         self.src_end = src_end             # <<<<<<<<<<<<<<
 *         self.dest_start = dest_start
 *         self.dest_end = dest_end
 */
  __Pyx_TraceLine(622,0,__PYX_ERR(0, 622, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_v_src_end); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 622, __pyx_L1_error)
  __pyx_v_self->src_end = __pyx_t_2;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":623
 *         self.src_start = src_start
 *         self.src_end = src_end
 *         self.dest_start = dest_start             # <<<<<<<<<<<<<<
 *         self.dest_end = dest_end
 * 
 */
  __Pyx_TraceLine(623,0,__PYX_ERR(0, 623, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_v_dest_start); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 623, __pyx_L1_error)
  __pyx_v_self->dest_start = __pyx_t_2;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":624
 *         self.src_end = src_end
 *         self.dest_start = dest_start
 *         self.dest_end = dest_end             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_TraceLine(624,0,__PYX_ERR(0, 624, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_v_dest_end); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 624, __pyx_L1_error)
  __pyx_v_self->dest_end = __pyx_t_2;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":619
 *     cdef public Py_ssize_t dest_end
 * 
 *     def __init__(self, tag, src_start, src_end, dest_start, dest_end):             # <<<<<<<<<<<<<<
 *         self.tag = tag
 *         self.src_start = src_start
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":626
 *         self.dest_end = dest_end
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return 5
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3__len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_2__len__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_2__len__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__len__", __pyx_f[0], 626, 0, __PYX_ERR(0, 626, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":627
 * 
 *     def __len__(self):
 *         return 5             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, other):
 */
  __Pyx_TraceLine(627,0,__PYX_ERR(0, 627, __pyx_L1_error))
  __pyx_r = 5;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":626
 *         self.dest_end = dest_end
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return 5
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":629
 *         return 5
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         try:
 *             if len(other) != 5:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_5__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_5__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_4__eq__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_4__eq__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 1);
  __Pyx_TraceCall("__eq__", __pyx_f[0], 629, 0, __PYX_ERR(0, 629, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":630
 * 
 *     def __eq__(self, other):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(other) != 5:
 *                 return False
 */
  __Pyx_TraceLine(630,0,__PYX_ERR(0, 630, __pyx_L1_error))
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":631
 *     def __eq__(self, other):
 *         try:
 *             if len(other) != 5:             # <<<<<<<<<<<<<<
 *                 return False
 * 
 */
      __Pyx_TraceLine(631,0,__PYX_ERR(0, 631, __pyx_L3_error))
      __pyx_t_4 = PyObject_Length(__pyx_v_other); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 631, __pyx_L3_error)
      __pyx_t_5 = (__pyx_t_4 != 5);
      if (__pyx_t_5) {

        /* "rapidfuzz/distance/_initialize_cpp.pyx":632
 *         try:
 *             if len(other) != 5:
 *                 return False             # <<<<<<<<<<<<<<
 * 
 *             return (other[0] == self.tag
 */
        __Pyx_TraceLine(632,0,__PYX_ERR(0, 632, __pyx_L3_error))
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_False);
        __pyx_r = Py_False;
        goto __pyx_L7_try_return;

        /* "rapidfuzz/distance/_initialize_cpp.pyx":631
 *     def __eq__(self, other):
 *         try:
 *             if len(other) != 5:             # <<<<<<<<<<<<<<
 *                 return False
 * 
 */
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":634
 *                 return False
 * 
 *             return (other[0] == self.tag             # <<<<<<<<<<<<<<
 *                 and other[1] == self.src_start
 *                 and other[2] == self.src_end
 */
      __Pyx_TraceLine(634,0,__PYX_ERR(0, 634, __pyx_L3_error))
      __Pyx_XDECREF(__pyx_r);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":635
 * 
 *             return (other[0] == self.tag
 *                 and other[1] == self.src_start             # <<<<<<<<<<<<<<
 *                 and other[2] == self.src_end
 *                 and other[3] == self.dest_start
 */
      __Pyx_TraceLine(635,0,__PYX_ERR(0, 635, __pyx_L3_error))
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_other, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 634, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":634
 *                 return False
 * 
 *             return (other[0] == self.tag             # <<<<<<<<<<<<<<
 *                 and other[1] == self.src_start
 *                 and other[2] == self.src_end
 */
      __Pyx_TraceLine(634,0,__PYX_ERR(0, 634, __pyx_L3_error))
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_v_self->tag, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 634, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 634, __pyx_L3_error)
      if (__pyx_t_5) {
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __Pyx_INCREF(__pyx_t_8);
        __pyx_t_6 = __pyx_t_8;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L10_bool_binop_done;
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":635
 * 
 *             return (other[0] == self.tag
 *                 and other[1] == self.src_start             # <<<<<<<<<<<<<<
 *                 and other[2] == self.src_end
 *                 and other[3] == self.dest_start
 */
      __Pyx_TraceLine(635,0,__PYX_ERR(0, 635, __pyx_L3_error))
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_other, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 635, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_v_self->src_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 635, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 635, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 635, __pyx_L3_error)
      if (__pyx_t_5) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_6 = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L10_bool_binop_done;
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":636
 *             return (other[0] == self.tag
 *                 and other[1] == self.src_start
 *                 and other[2] == self.src_end             # <<<<<<<<<<<<<<
 *                 and other[3] == self.dest_start
 *                 and other[4] == self.dest_end)
 */
      __Pyx_TraceLine(636,0,__PYX_ERR(0, 636, __pyx_L3_error))
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_other, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 636, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_v_self->src_end); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 636, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_9, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 636, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 636, __pyx_L3_error)
      if (__pyx_t_5) {
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __Pyx_INCREF(__pyx_t_8);
        __pyx_t_6 = __pyx_t_8;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L10_bool_binop_done;
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":637
 *                 and other[1] == self.src_start
 *                 and other[2] == self.src_end
 *                 and other[3] == self.dest_start             # <<<<<<<<<<<<<<
 *                 and other[4] == self.dest_end)
 *         except:
 */
      __Pyx_TraceLine(637,0,__PYX_ERR(0, 637, __pyx_L3_error))
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_other, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 637, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_v_self->dest_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 637, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 637, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 637, __pyx_L3_error)
      if (__pyx_t_5) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_6 = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L10_bool_binop_done;
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":638
 *                 and other[2] == self.src_end
 *                 and other[3] == self.dest_start
 *                 and other[4] == self.dest_end)             # <<<<<<<<<<<<<<
 *         except:
 *             return False
 */
      __Pyx_TraceLine(638,0,__PYX_ERR(0, 638, __pyx_L3_error))
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_other, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 638, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_v_self->dest_end); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 638, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_9, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 638, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_INCREF(__pyx_t_8);
      __pyx_t_6 = __pyx_t_8;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_L10_bool_binop_done:;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L7_try_return;

      /* "rapidfuzz/distance/_initialize_cpp.pyx":630
 * 
 *     def __eq__(self, other):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(other) != 5:
 *                 return False
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":639
 *                 and other[3] == self.dest_start
 *                 and other[4] == self.dest_end)
 *         except:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    __Pyx_TraceLine(639,0,__PYX_ERR(0, 639, __pyx_L5_except_error))
    /*except:*/ {
      __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_8, &__pyx_t_7) < 0) __PYX_ERR(0, 639, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":640
 *                 and other[4] == self.dest_end)
 *         except:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Py_ssize_t i):
 */
      __Pyx_TraceLine(640,0,__PYX_ERR(0, 640, __pyx_L5_except_error))
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_except_return;
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":630
 * 
 *     def __eq__(self, other):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(other) != 5:
 *                 return False
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":629
 *         return 5
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         try:
 *             if len(other) != 5:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":642
 *             return False
 * 
 *     def __getitem__(self, Py_ssize_t i):             # <<<<<<<<<<<<<<
 *         if i==0 or i==-5: return self.tag
 *         if i==1 or i==-4: return self.src_start
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyIndex_AsSsize_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 642, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_6__getitem__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self), ((Py_ssize_t)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_6__getitem__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, Py_ssize_t __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 1);
  __Pyx_TraceCall("__getitem__", __pyx_f[0], 642, 0, __PYX_ERR(0, 642, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":643
 * 
 *     def __getitem__(self, Py_ssize_t i):
 *         if i==0 or i==-5: return self.tag             # <<<<<<<<<<<<<<
 *         if i==1 or i==-4: return self.src_start
 *         if i==2 or i==-3: return self.src_end
 */
  __Pyx_TraceLine(643,0,__PYX_ERR(0, 643, __pyx_L1_error))
  switch (__pyx_v_i) {
    case 0:
    CYTHON_FALLTHROUGH;
    case -5L:
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->tag);
    __pyx_r = __pyx_v_self->tag;
    goto __pyx_L0;
    break;
    default: break;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":644
 *     def __getitem__(self, Py_ssize_t i):
 *         if i==0 or i==-5: return self.tag
 *         if i==1 or i==-4: return self.src_start             # <<<<<<<<<<<<<<
 *         if i==2 or i==-3: return self.src_end
 *         if i==3 or i==-2: return self.dest_start
 */
  __Pyx_TraceLine(644,0,__PYX_ERR(0, 644, __pyx_L1_error))
  switch (__pyx_v_i) {
    case 1:
    CYTHON_FALLTHROUGH;
    case -4L:
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->src_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
    default: break;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":645
 *         if i==0 or i==-5: return self.tag
 *         if i==1 or i==-4: return self.src_start
 *         if i==2 or i==-3: return self.src_end             # <<<<<<<<<<<<<<
 *         if i==3 or i==-2: return self.dest_start
 *         if i==4 or i==-1: return self.dest_end
 */
  __Pyx_TraceLine(645,0,__PYX_ERR(0, 645, __pyx_L1_error))
  switch (__pyx_v_i) {
    case 2:
    CYTHON_FALLTHROUGH;
    case -3L:
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->src_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
    default: break;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":646
 *         if i==1 or i==-4: return self.src_start
 *         if i==2 or i==-3: return self.src_end
 *         if i==3 or i==-2: return self.dest_start             # <<<<<<<<<<<<<<
 *         if i==4 or i==-1: return self.dest_end
 * 
 */
  __Pyx_TraceLine(646,0,__PYX_ERR(0, 646, __pyx_L1_error))
  switch (__pyx_v_i) {
    case 3:
    CYTHON_FALLTHROUGH;
    case -2L:
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->dest_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
    default: break;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":647
 *         if i==2 or i==-3: return self.src_end
 *         if i==3 or i==-2: return self.dest_start
 *         if i==4 or i==-1: return self.dest_end             # <<<<<<<<<<<<<<
 * 
 *         raise IndexError('Opcode index out of range')
 */
  __Pyx_TraceLine(647,0,__PYX_ERR(0, 647, __pyx_L1_error))
  switch (__pyx_v_i) {
    case 4:
    CYTHON_FALLTHROUGH;
    case -1L:
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->dest_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
    default: break;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":649
 *         if i==4 or i==-1: return self.dest_end
 * 
 *         raise IndexError('Opcode index out of range')             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_TraceLine(649,0,__PYX_ERR(0, 649, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 649, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":642
 *             return False
 * 
 *     def __getitem__(self, Py_ssize_t i):             # <<<<<<<<<<<<<<
 *         if i==0 or i==-5: return self.tag
 *         if i==1 or i==-4: return self.src_start
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_10generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "rapidfuzz/distance/_initialize_cpp.pyx":651
 *         raise IndexError('Opcode index out of range')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         yield self.tag
 *         yield self.src_start
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_9__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_9__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_8__iter__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_8__iter__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 651, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_10generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_Opcode___iter, __pyx_n_s_rapidfuzz_distance__initialize_c); if (unlikely(!gen)) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_10generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ *__pyx_cur_scope = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  __Pyx_TraceCall("__iter__", __pyx_f[0], 651, 0, __PYX_ERR(0, 651, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    case 2: goto __pyx_L5_resume_from_yield;
    case 3: goto __pyx_L6_resume_from_yield;
    case 4: goto __pyx_L7_resume_from_yield;
    case 5: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 651, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":652
 * 
 *     def __iter__(self):
 *         yield self.tag             # <<<<<<<<<<<<<<
 *         yield self.src_start
 *         yield self.src_end
 */
  __Pyx_TraceLine(652,0,__PYX_ERR(0, 652, __pyx_L1_error))
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self->tag);
  __pyx_r = __pyx_cur_scope->__pyx_v_self->tag;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 652, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":653
 *     def __iter__(self):
 *         yield self.tag
 *         yield self.src_start             # <<<<<<<<<<<<<<
 *         yield self.src_end
 *         yield self.dest_start
 */
  __Pyx_TraceLine(653,0,__PYX_ERR(0, 653, __pyx_L1_error))
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_self->src_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 2;
  return __pyx_r;
  __pyx_L5_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 653, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":654
 *         yield self.tag
 *         yield self.src_start
 *         yield self.src_end             # <<<<<<<<<<<<<<
 *         yield self.dest_start
 *         yield self.dest_end
 */
  __Pyx_TraceLine(654,0,__PYX_ERR(0, 654, __pyx_L1_error))
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_self->src_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 3;
  return __pyx_r;
  __pyx_L6_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 654, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":655
 *         yield self.src_start
 *         yield self.src_end
 *         yield self.dest_start             # <<<<<<<<<<<<<<
 *         yield self.dest_end
 * 
 */
  __Pyx_TraceLine(655,0,__PYX_ERR(0, 655, __pyx_L1_error))
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_self->dest_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 4;
  return __pyx_r;
  __pyx_L7_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 655, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":656
 *         yield self.src_end
 *         yield self.dest_start
 *         yield self.dest_end             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_TraceLine(656,0,__PYX_ERR(0, 656, __pyx_L1_error))
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_self->dest_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 5;
  return __pyx_r;
  __pyx_L8_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 656, __pyx_L1_error)
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":651
 *         raise IndexError('Opcode index out of range')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         yield self.tag
 *         yield self.src_start
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":658
 *         yield self.dest_end
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"Opcode(tag='{self.tag}', src_start={self.src_start}, src_end={self.src_end}, dest_start={self.dest_start}, dest_end={self.dest_end})"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_12__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_12__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_11__repr__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_11__repr__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);
  __Pyx_TraceCall("__repr__", __pyx_f[0], 658, 0, __PYX_ERR(0, 658, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":659
 * 
 *     def __repr__(self):
 *         return f"Opcode(tag='{self.tag}', src_start={self.src_start}, src_end={self.src_end}, dest_start={self.dest_start}, dest_end={self.dest_end})"             # <<<<<<<<<<<<<<
 * 
 * cdef class Opcodes:
 */
  __Pyx_TraceLine(659,0,__PYX_ERR(0, 659, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Opcode_tag);
  __pyx_t_2 += 12;
  __Pyx_GIVEREF(__pyx_kp_u_Opcode_tag);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Opcode_tag);
  __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_v_self->tag); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_src_start_2);
  __pyx_t_2 += 13;
  __Pyx_GIVEREF(__pyx_kp_u_src_start_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_src_start_2);
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_self->src_start, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_src_end_2);
  __pyx_t_2 += 10;
  __Pyx_GIVEREF(__pyx_kp_u_src_end_2);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_src_end_2);
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_self->src_end, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_dest_start_2);
  __pyx_t_2 += 13;
  __Pyx_GIVEREF(__pyx_kp_u_dest_start_2);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u_dest_start_2);
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_self->dest_start, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_dest_end_2);
  __pyx_t_2 += 11;
  __Pyx_GIVEREF(__pyx_kp_u_dest_end_2);
  PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u_dest_end_2);
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_self->dest_end, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__12);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__12);
  PyTuple_SET_ITEM(__pyx_t_1, 10, __pyx_kp_u__12);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 11, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":658
 *         yield self.dest_end
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"Opcode(tag='{self.tag}', src_start={self.src_start}, src_end={self.src_end}, dest_start={self.dest_start}, dest_end={self.dest_end})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":613
 *     interoperable
 *     """
 *     cdef public str tag             # <<<<<<<<<<<<<<
 *     cdef public Py_ssize_t src_start
 *     cdef public Py_ssize_t src_end
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 613, 0, __PYX_ERR(0, 613, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->tag);
  __pyx_r = __pyx_v_self->tag;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.tag.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 1);
  __Pyx_TraceCall("__set__", __pyx_f[0], 613, 0, __PYX_ERR(0, 613, __pyx_L1_error));
  if (!(likely(PyUnicode_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_v_value))) __PYX_ERR(0, 613, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tag);
  __Pyx_DECREF(__pyx_v_self->tag);
  __pyx_v_self->tag = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.tag.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag_4__del__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag_4__del__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_TraceCall("__del__", __pyx_f[0], 613, 0, __PYX_ERR(0, 613, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->tag);
  __Pyx_DECREF(__pyx_v_self->tag);
  __pyx_v_self->tag = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.tag.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":614
 *     """
 *     cdef public str tag
 *     cdef public Py_ssize_t src_start             # <<<<<<<<<<<<<<
 *     cdef public Py_ssize_t src_end
 *     cdef public Py_ssize_t dest_start
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_9src_start_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_9src_start_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_9src_start___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_9src_start___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 614, 0, __PYX_ERR(0, 614, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->src_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.src_start.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_9src_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_9src_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_9src_start_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_9src_start_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__set__", __pyx_f[0], 614, 0, __PYX_ERR(0, 614, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 614, __pyx_L1_error)
  __pyx_v_self->src_start = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.src_start.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":615
 *     cdef public str tag
 *     cdef public Py_ssize_t src_start
 *     cdef public Py_ssize_t src_end             # <<<<<<<<<<<<<<
 *     cdef public Py_ssize_t dest_start
 *     cdef public Py_ssize_t dest_end
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_7src_end_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_7src_end_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_7src_end___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_7src_end___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 615, 0, __PYX_ERR(0, 615, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->src_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.src_end.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_7src_end_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_7src_end_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_7src_end_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_7src_end_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__set__", __pyx_f[0], 615, 0, __PYX_ERR(0, 615, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 615, __pyx_L1_error)
  __pyx_v_self->src_end = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.src_end.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":616
 *     cdef public Py_ssize_t src_start
 *     cdef public Py_ssize_t src_end
 *     cdef public Py_ssize_t dest_start             # <<<<<<<<<<<<<<
 *     cdef public Py_ssize_t dest_end
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_10dest_start_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_10dest_start_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_10dest_start___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_10dest_start___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 616, 0, __PYX_ERR(0, 616, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->dest_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.dest_start.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_10dest_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_10dest_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_10dest_start_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_10dest_start_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__set__", __pyx_f[0], 616, 0, __PYX_ERR(0, 616, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 616, __pyx_L1_error)
  __pyx_v_self->dest_start = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.dest_start.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":617
 *     cdef public Py_ssize_t src_end
 *     cdef public Py_ssize_t dest_start
 *     cdef public Py_ssize_t dest_end             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, tag, src_start, src_end, dest_start, dest_end):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_8dest_end_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_8dest_end_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_8dest_end___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_8dest_end___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 617, 0, __PYX_ERR(0, 617, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->dest_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.dest_end.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_8dest_end_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_8dest_end_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_8dest_end_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_8dest_end_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__set__", __pyx_f[0], 617, 0, __PYX_ERR(0, 617, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 617, __pyx_L1_error)
  __pyx_v_self->dest_end = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.dest_end.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_14__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_14__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_14__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_14__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_13__reduce_cython__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_13__reduce_cython__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__33)
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.dest_end, self.dest_start, self.src_end, self.src_start, self.tag)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(2, 5, __pyx_L1_error))
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->dest_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->dest_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_self->src_end); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_self->src_start); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->tag);
  __Pyx_GIVEREF(__pyx_v_self->tag);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_v_self->tag)) __PYX_ERR(2, 5, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.dest_end, self.dest_start, self.src_end, self.src_start, self.tag)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(2, 6, __pyx_L1_error))
  __pyx_t_5 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v__dict = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "(tree fragment)":7
 *     state = (self.dest_end, self.dest_start, self.src_end, self.src_start, self.tag)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(2, 7, __pyx_L1_error))
  __pyx_t_6 = (__pyx_v__dict != Py_None);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(2, 8, __pyx_L1_error))
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v__dict)) __PYX_ERR(2, 8, __pyx_L1_error);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.tag is not None
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(2, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.dest_end, self.dest_start, self.src_end, self.src_start, self.tag)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.tag is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Opcode, (type(self), 0xac2429d, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(2, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_t_6 = (__pyx_v_self->tag != ((PyObject*)Py_None));
    __pyx_v_use_setstate = __pyx_t_6;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.tag is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Opcode, (type(self), 0xac2429d, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(2, 12, __pyx_L1_error))
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self.tag is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Opcode, (type(self), 0xac2429d, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Opcode, (type(self), 0xac2429d, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(2, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Opcode); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(2, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_180503197);
    __Pyx_GIVEREF(__pyx_int_180503197);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_180503197)) __PYX_ERR(2, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, Py_None)) __PYX_ERR(2, 13, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5)) __PYX_ERR(2, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state)) __PYX_ERR(2, 13, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.tag is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Opcode, (type(self), 0xac2429d, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Opcode, (type(self), 0xac2429d, None), state
 *     else:
 *         return __pyx_unpickle_Opcode, (type(self), 0xac2429d, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Opcode__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(2, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_Opcode); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(2, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_180503197);
    __Pyx_GIVEREF(__pyx_int_180503197);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_180503197)) __PYX_ERR(2, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state)) __PYX_ERR(2, 15, __pyx_L1_error);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5)) __PYX_ERR(2, 15, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Opcode, (type(self), 0xac2429d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Opcode__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_16__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_16__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_16__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_16__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_15__setstate_cython__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_15__setstate_cython__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__34)
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[2], 16, 0, __PYX_ERR(2, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Opcode, (type(self), 0xac2429d, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Opcode__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(2, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp___pyx_unpickle_Opcode__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Opcode, (type(self), 0xac2429d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Opcode__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcode.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":669
 *     """
 * 
 *     def __init__(self, opcodes=None, src_len=0, dest_len=0):             # <<<<<<<<<<<<<<
 *         if opcodes is not None:
 *             self.opcodes = list_to_opcodes(opcodes, src_len, dest_len)
 */

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_opcodes = 0;
  PyObject *__pyx_v_src_len = 0;
  PyObject *__pyx_v_dest_len = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_opcodes,&__pyx_n_s_src_len,&__pyx_n_s_dest_len,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_opcodes);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 669, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_src_len);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 669, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dest_len);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 669, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 669, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_opcodes = values[0];
    __pyx_v_src_len = values[1];
    __pyx_v_dest_len = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 3, __pyx_nargs); __PYX_ERR(0, 669, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes___init__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self), __pyx_v_opcodes, __pyx_v_src_len, __pyx_v_dest_len);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes___init__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self, PyObject *__pyx_v_opcodes, PyObject *__pyx_v_src_len, PyObject *__pyx_v_dest_len) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  rapidfuzz::Opcodes __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__init__", __pyx_f[0], 669, 0, __PYX_ERR(0, 669, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":670
 * 
 *     def __init__(self, opcodes=None, src_len=0, dest_len=0):
 *         if opcodes is not None:             # <<<<<<<<<<<<<<
 *             self.opcodes = list_to_opcodes(opcodes, src_len, dest_len)
 * 
 */
  __Pyx_TraceLine(670,0,__PYX_ERR(0, 670, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_opcodes != Py_None);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":671
 *     def __init__(self, opcodes=None, src_len=0, dest_len=0):
 *         if opcodes is not None:
 *             self.opcodes = list_to_opcodes(opcodes, src_len, dest_len)             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
    __Pyx_TraceLine(671,0,__PYX_ERR(0, 671, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_v_src_len); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 671, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_v_dest_len); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 671, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_list_to_opcodes(__pyx_v_opcodes, __pyx_t_2, __pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 671, __pyx_L1_error)
    __pyx_v_self->opcodes = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":670
 * 
 *     def __init__(self, opcodes=None, src_len=0, dest_len=0):
 *         if opcodes is not None:             # <<<<<<<<<<<<<<
 *             self.opcodes = list_to_opcodes(opcodes, src_len, dest_len)
 * 
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":669
 *     """
 * 
 *     def __init__(self, opcodes=None, src_len=0, dest_len=0):             # <<<<<<<<<<<<<<
 *         if opcodes is not None:
 *             self.opcodes = list_to_opcodes(opcodes, src_len, dest_len)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":673
 *             self.opcodes = list_to_opcodes(opcodes, src_len, dest_len)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_editops(cls, Editops editops):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_3from_editops(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_2from_editops, "\n        Create Opcodes from Editops\n\n        Parameters\n        ----------\n        editops : Editops\n            editops to convert to opcodes\n\n        Returns\n        -------\n        opcodes : Opcodes\n            Editops converted to Opcodes\n        ");
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_3from_editops = {"from_editops", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_3from_editops, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_2from_editops};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_3from_editops(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_editops = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_editops (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_editops,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_editops)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "from_editops") < 0)) __PYX_ERR(0, 673, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_editops = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_editops", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 673, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.from_editops", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_editops), __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops, 1, "editops", 0))) __PYX_ERR(0, 674, __pyx_L1_error)
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_2from_editops(((PyTypeObject*)__pyx_v_cls), __pyx_v_editops);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_2from_editops(PyTypeObject *__pyx_v_cls, struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_editops) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  rapidfuzz::Opcodes __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__35)
  __Pyx_RefNannySetupContext("from_editops", 1);
  __Pyx_TraceCall("from_editops", __pyx_f[0], 673, 0, __PYX_ERR(0, 673, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":688
 *             Editops converted to Opcodes
 *         """
 *         cdef Opcodes self = cls.__new__(cls)             # <<<<<<<<<<<<<<
 *         self.opcodes = RfOpcodes(editops.editops)
 *         return self
 */
  __Pyx_TraceLine(688,0,__PYX_ERR(0, 688, __pyx_L1_error))
  if (unlikely(((PyObject *)__pyx_v_cls) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object.__new__(X): X is not a type object (NoneType)");
    __PYX_ERR(0, 688, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_v_cls), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes)))) __PYX_ERR(0, 688, __pyx_L1_error)
  __pyx_v_self = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":689
 *         """
 *         cdef Opcodes self = cls.__new__(cls)
 *         self.opcodes = RfOpcodes(editops.editops)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_TraceLine(689,0,__PYX_ERR(0, 689, __pyx_L1_error))
  try {
    __pyx_t_2 = rapidfuzz::Opcodes(__pyx_v_editops->editops);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 689, __pyx_L1_error)
  }
  __pyx_v_self->opcodes = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":690
 *         cdef Opcodes self = cls.__new__(cls)
 *         self.opcodes = RfOpcodes(editops.editops)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def as_editops(self):
 */
  __Pyx_TraceLine(690,0,__PYX_ERR(0, 690, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":673
 *             self.opcodes = list_to_opcodes(opcodes, src_len, dest_len)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_editops(cls, Editops editops):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.from_editops", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":692
 *         return self
 * 
 *     def as_editops(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert to Editops
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_5as_editops(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_4as_editops, "\n        Convert to Editops\n\n        Returns\n        -------\n        editops : Editops\n            Opcodes converted to Editops\n        ");
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_5as_editops = {"as_editops", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_5as_editops, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_4as_editops};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_5as_editops(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_editops (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("as_editops", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "as_editops", 0))) return NULL;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_4as_editops(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_4as_editops(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_editops = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  rapidfuzz::Editops __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__36)
  __Pyx_RefNannySetupContext("as_editops", 1);
  __Pyx_TraceCall("as_editops", __pyx_f[0], 692, 0, __PYX_ERR(0, 692, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":701
 *             Opcodes converted to Editops
 *         """
 *         cdef Editops editops = Editops.__new__(Editops)             # <<<<<<<<<<<<<<
 *         editops.editops = RfEditops(self.opcodes)
 *         return editops
 */
  __Pyx_TraceLine(701,0,__PYX_ERR(0, 701, __pyx_L1_error))
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Editops(((PyTypeObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_editops = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":702
 *         """
 *         cdef Editops editops = Editops.__new__(Editops)
 *         editops.editops = RfEditops(self.opcodes)             # <<<<<<<<<<<<<<
 *         return editops
 * 
 */
  __Pyx_TraceLine(702,0,__PYX_ERR(0, 702, __pyx_L1_error))
  try {
    __pyx_t_2 = rapidfuzz::Editops(__pyx_v_self->opcodes);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 702, __pyx_L1_error)
  }
  __pyx_v_editops->editops = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":703
 *         cdef Editops editops = Editops.__new__(Editops)
 *         editops.editops = RfEditops(self.opcodes)
 *         return editops             # <<<<<<<<<<<<<<
 * 
 *     def as_matching_blocks(self):
 */
  __Pyx_TraceLine(703,0,__PYX_ERR(0, 703, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_editops);
  __pyx_r = ((PyObject *)__pyx_v_editops);
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":692
 *         return self
 * 
 *     def as_editops(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert to Editops
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.as_editops", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_editops);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":705
 *         return editops
 * 
 *     def as_matching_blocks(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert to matching blocks
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7as_matching_blocks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_6as_matching_blocks, "\n        Convert to matching blocks\n\n        Returns\n        -------\n        matching blocks : list[MatchingBlock]\n            Opcodes converted to matching blocks\n        ");
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7as_matching_blocks = {"as_matching_blocks", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7as_matching_blocks, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_6as_matching_blocks};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7as_matching_blocks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_matching_blocks (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("as_matching_blocks", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "as_matching_blocks", 0))) return NULL;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_6as_matching_blocks(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_6as_matching_blocks(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__37)
  __Pyx_RefNannySetupContext("as_matching_blocks", 1);
  __Pyx_TraceCall("as_matching_blocks", __pyx_f[0], 705, 0, __PYX_ERR(0, 705, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":714
 *             Opcodes converted to matching blocks
 *         """
 *         return opcodes_to_matching_blocks(self.opcodes)             # <<<<<<<<<<<<<<
 * 
 *     def as_list(self):
 */
  __Pyx_TraceLine(714,0,__PYX_ERR(0, 714, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_opcodes_to_matching_blocks(__pyx_v_self->opcodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":705
 *         return editops
 * 
 *     def as_matching_blocks(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert to matching blocks
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.as_matching_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":716
 *         return opcodes_to_matching_blocks(self.opcodes)
 * 
 *     def as_list(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert Opcodes to a list of tuples, which is compatible
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_9as_list(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8as_list, "\n        Convert Opcodes to a list of tuples, which is compatible\n        with the opcodes of difflibs SequenceMatcher.\n\n        This is the equivalent of ``[x for x in opcodes]``\n        ");
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_9as_list = {"as_list", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_9as_list, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8as_list};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_9as_list(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_list (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("as_list", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "as_list", 0))) return NULL;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8as_list(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8as_list(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__38)
  __Pyx_RefNannySetupContext("as_list", 1);
  __Pyx_TraceCall("as_list", __pyx_f[0], 716, 0, __PYX_ERR(0, 716, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":723
 *         This is the equivalent of ``[x for x in opcodes]``
 *         """
 *         return opcodes_to_list(self.opcodes)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_TraceLine(723,0,__PYX_ERR(0, 723, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_opcodes_to_list(__pyx_v_self->opcodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":716
 *         return opcodes_to_matching_blocks(self.opcodes)
 * 
 *     def as_list(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert Opcodes to a list of tuples, which is compatible
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.as_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":725
 *         return opcodes_to_list(self.opcodes)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         performs copy of Opcodes
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_11copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_10copy, "\n        performs copy of Opcodes\n        ");
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_11copy = {"copy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_11copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_10copy};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_11copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("copy", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "copy", 0))) return NULL;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_10copy(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_10copy(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_x = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  rapidfuzz::Opcodes __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__39)
  __Pyx_RefNannySetupContext("copy", 1);
  __Pyx_TraceCall("copy", __pyx_f[0], 725, 0, __PYX_ERR(0, 725, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":729
 *         performs copy of Opcodes
 *         """
 *         cdef Opcodes x = Opcodes.__new__(Opcodes)             # <<<<<<<<<<<<<<
 *         x.opcodes = self.opcodes
 *         return x
 */
  __Pyx_TraceLine(729,0,__PYX_ERR(0, 729, __pyx_L1_error))
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Opcodes(((PyTypeObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_x = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":730
 *         """
 *         cdef Opcodes x = Opcodes.__new__(Opcodes)
 *         x.opcodes = self.opcodes             # <<<<<<<<<<<<<<
 *         return x
 * 
 */
  __Pyx_TraceLine(730,0,__PYX_ERR(0, 730, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_self->opcodes;
  __pyx_v_x->opcodes = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":731
 *         cdef Opcodes x = Opcodes.__new__(Opcodes)
 *         x.opcodes = self.opcodes
 *         return x             # <<<<<<<<<<<<<<
 * 
 *     def inverse(self):
 */
  __Pyx_TraceLine(731,0,__PYX_ERR(0, 731, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_x);
  __pyx_r = ((PyObject *)__pyx_v_x);
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":725
 *         return opcodes_to_list(self.opcodes)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         performs copy of Opcodes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":733
 *         return x
 * 
 *     def inverse(self):             # <<<<<<<<<<<<<<
 *         """
 *         Invert Opcodes, so it describes how to transform the destination string to
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_13inverse(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_12inverse, "\n        Invert Opcodes, so it describes how to transform the destination string to\n        the source string.\n\n        Returns\n        -------\n        opcodes : Opcodes\n            inverted Opcodes\n\n        Examples\n        --------\n        >>> from rapidfuzz.distance import Levenshtein\n        >>> Levenshtein.opcodes('spam', 'park')\n        [Opcode(tag=delete, src_start=0, src_end=1, dest_start=0, dest_end=0),\n         Opcode(tag=equal, src_start=1, src_end=3, dest_start=0, dest_end=2),\n         Opcode(tag=replace, src_start=3, src_end=4, dest_start=2, dest_end=3),\n         Opcode(tag=insert, src_start=4, src_end=4, dest_start=3, dest_end=4)]\n\n        >>> Levenshtein.opcodes('spam', 'park').inverse()\n        [Opcode(tag=insert, src_start=0, src_end=0, dest_start=0, dest_end=1),\n         Opcode(tag=equal, src_start=0, src_end=2, dest_start=1, dest_end=3),\n         Opcode(tag=replace, src_start=2, src_end=3, dest_start=3, dest_end=4),\n         Opcode(tag=delete, src_start=3, src_end=4, dest_start=4, dest_end=4)]\n        ");
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_13inverse = {"inverse", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_13inverse, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_12inverse};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_13inverse(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inverse (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("inverse", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "inverse", 0))) return NULL;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_12inverse(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_12inverse(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_x = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  rapidfuzz::Opcodes __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__40)
  __Pyx_RefNannySetupContext("inverse", 1);
  __Pyx_TraceCall("inverse", __pyx_f[0], 733, 0, __PYX_ERR(0, 733, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":758
 *          Opcode(tag=delete, src_start=3, src_end=4, dest_start=4, dest_end=4)]
 *         """
 *         cdef Opcodes x = Opcodes.__new__(Opcodes)             # <<<<<<<<<<<<<<
 *         x.opcodes = self.opcodes.inverse()
 *         return x
 */
  __Pyx_TraceLine(758,0,__PYX_ERR(0, 758, __pyx_L1_error))
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Opcodes(((PyTypeObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_v_x = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":759
 *         """
 *         cdef Opcodes x = Opcodes.__new__(Opcodes)
 *         x.opcodes = self.opcodes.inverse()             # <<<<<<<<<<<<<<
 *         return x
 * 
 */
  __Pyx_TraceLine(759,0,__PYX_ERR(0, 759, __pyx_L1_error))
  try {
    __pyx_t_2 = __pyx_v_self->opcodes.inverse();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 759, __pyx_L1_error)
  }
  __pyx_v_x->opcodes = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":760
 *         cdef Opcodes x = Opcodes.__new__(Opcodes)
 *         x.opcodes = self.opcodes.inverse()
 *         return x             # <<<<<<<<<<<<<<
 * 
 *     def apply(self, source_string, destination_string):
 */
  __Pyx_TraceLine(760,0,__PYX_ERR(0, 760, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_x);
  __pyx_r = ((PyObject *)__pyx_v_x);
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":733
 *         return x
 * 
 *     def inverse(self):             # <<<<<<<<<<<<<<
 *         """
 *         Invert Opcodes, so it describes how to transform the destination string to
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.inverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":762
 *         return x
 * 
 *     def apply(self, source_string, destination_string):             # <<<<<<<<<<<<<<
 *         """
 *         apply opcodes to source_string
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_15apply(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_14apply, "\n        apply opcodes to source_string\n\n        Parameters\n        ----------\n        source_string : str | bytes\n            string to apply opcodes to\n        destination_string : str | bytes\n            string to use for replacements / insertions into source_string\n\n        Returns\n        -------\n        mod_string : str\n            modified source_string\n\n        ");
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_15apply = {"apply", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_15apply, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_14apply};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_15apply(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_source_string = 0;
  PyObject *__pyx_v_destination_string = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("apply (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_string,&__pyx_n_s_destination_string,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_source_string)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 762, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_destination_string)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 762, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("apply", 1, 2, 2, 1); __PYX_ERR(0, 762, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "apply") < 0)) __PYX_ERR(0, 762, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_source_string = values[0];
    __pyx_v_destination_string = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("apply", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 762, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.apply", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_14apply(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self), __pyx_v_source_string, __pyx_v_destination_string);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_14apply(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self, PyObject *__pyx_v_source_string, PyObject *__pyx_v_destination_string) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__41)
  __Pyx_RefNannySetupContext("apply", 1);
  __Pyx_TraceCall("apply", __pyx_f[0], 762, 0, __PYX_ERR(0, 762, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":779
 * 
 *         """
 *         if not (is_valid_string(source_string) and is_valid_string(destination_string)):             # <<<<<<<<<<<<<<
 *             raise TypeError("expected strings or bytes object")
 * 
 */
  __Pyx_TraceLine(779,0,__PYX_ERR(0, 779, __pyx_L1_error))
  try {
    __pyx_t_2 = is_valid_string(__pyx_v_source_string);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 779, __pyx_L1_error)
  }
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  try {
    __pyx_t_2 = is_valid_string(__pyx_v_destination_string);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 779, __pyx_L1_error)
  }
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  __pyx_t_3 = (!__pyx_t_1);
  if (unlikely(__pyx_t_3)) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":780
 *         """
 *         if not (is_valid_string(source_string) and is_valid_string(destination_string)):
 *             raise TypeError("expected strings or bytes object")             # <<<<<<<<<<<<<<
 * 
 *         return opcodes_apply(self.opcodes, convert_string(source_string), convert_string(destination_string))
 */
    __Pyx_TraceLine(780,0,__PYX_ERR(0, 780, __pyx_L1_error))
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 780, __pyx_L1_error)

    /* "rapidfuzz/distance/_initialize_cpp.pyx":779
 * 
 *         """
 *         if not (is_valid_string(source_string) and is_valid_string(destination_string)):             # <<<<<<<<<<<<<<
 *             raise TypeError("expected strings or bytes object")
 * 
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":782
 *             raise TypeError("expected strings or bytes object")
 * 
 *         return opcodes_apply(self.opcodes, convert_string(source_string), convert_string(destination_string))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(782,0,__PYX_ERR(0, 782, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_4 = opcodes_apply(__pyx_v_self->opcodes, convert_string(__pyx_v_source_string), convert_string(__pyx_v_destination_string));
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 782, __pyx_L1_error)
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 782, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":762
 *         return x
 * 
 *     def apply(self, source_string, destination_string):             # <<<<<<<<<<<<<<
 *         """
 *         apply opcodes to source_string
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.apply", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":784
 *         return opcodes_apply(self.opcodes, convert_string(source_string), convert_string(destination_string))
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def src_len(self):
 *         return self.opcodes.get_src_len()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7src_len_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7src_len_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7src_len___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7src_len___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 784, 0, __PYX_ERR(0, 784, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":786
 *     @property
 *     def src_len(self):
 *         return self.opcodes.get_src_len()             # <<<<<<<<<<<<<<
 * 
 *     @src_len.setter
 */
  __Pyx_TraceLine(786,0,__PYX_ERR(0, 786, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opcodes.get_src_len()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":784
 *         return opcodes_apply(self.opcodes, convert_string(source_string), convert_string(destination_string))
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def src_len(self):
 *         return self.opcodes.get_src_len()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.src_len.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":788
 *         return self.opcodes.get_src_len()
 * 
 *     @src_len.setter             # <<<<<<<<<<<<<<
 *     def src_len(self, value):
 *         self.opcodes.set_src_len(value)
 */

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7src_len_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7src_len_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7src_len_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7src_len_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__set__", __pyx_f[0], 788, 0, __PYX_ERR(0, 788, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":790
 *     @src_len.setter
 *     def src_len(self, value):
 *         self.opcodes.set_src_len(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(790,0,__PYX_ERR(0, 790, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 790, __pyx_L1_error)
  __pyx_v_self->opcodes.set_src_len(__pyx_t_1);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":788
 *         return self.opcodes.get_src_len()
 * 
 *     @src_len.setter             # <<<<<<<<<<<<<<
 *     def src_len(self, value):
 *         self.opcodes.set_src_len(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.src_len.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":792
 *         self.opcodes.set_src_len(value)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def dest_len(self):
 *         return self.opcodes.get_dest_len()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8dest_len_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8dest_len_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8dest_len___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8dest_len___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 792, 0, __PYX_ERR(0, 792, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":794
 *     @property
 *     def dest_len(self):
 *         return self.opcodes.get_dest_len()             # <<<<<<<<<<<<<<
 * 
 *     @dest_len.setter
 */
  __Pyx_TraceLine(794,0,__PYX_ERR(0, 794, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opcodes.get_dest_len()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":792
 *         self.opcodes.set_src_len(value)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def dest_len(self):
 *         return self.opcodes.get_dest_len()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.dest_len.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":796
 *         return self.opcodes.get_dest_len()
 * 
 *     @dest_len.setter             # <<<<<<<<<<<<<<
 *     def dest_len(self, value):
 *         self.opcodes.set_dest_len(value)
 */

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8dest_len_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8dest_len_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8dest_len_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8dest_len_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__set__", __pyx_f[0], 796, 0, __PYX_ERR(0, 796, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":798
 *     @dest_len.setter
 *     def dest_len(self, value):
 *         self.opcodes.set_dest_len(value)             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, other):
 */
  __Pyx_TraceLine(798,0,__PYX_ERR(0, 798, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 798, __pyx_L1_error)
  __pyx_v_self->opcodes.set_dest_len(__pyx_t_1);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":796
 *         return self.opcodes.get_dest_len()
 * 
 *     @dest_len.setter             # <<<<<<<<<<<<<<
 *     def dest_len(self, value):
 *         self.opcodes.set_dest_len(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.dest_len.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":800
 *         self.opcodes.set_dest_len(value)
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Opcodes):
 *             return self.opcodes == (<Opcodes>other).opcodes
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_17__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_17__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_16__eq__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_16__eq__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 1);
  __Pyx_TraceCall("__eq__", __pyx_f[0], 800, 0, __PYX_ERR(0, 800, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":801
 * 
 *     def __eq__(self, other):
 *         if isinstance(other, Opcodes):             # <<<<<<<<<<<<<<
 *             return self.opcodes == (<Opcodes>other).opcodes
 * 
 */
  __Pyx_TraceLine(801,0,__PYX_ERR(0, 801, __pyx_L1_error))
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes); 
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":802
 *     def __eq__(self, other):
 *         if isinstance(other, Opcodes):
 *             return self.opcodes == (<Opcodes>other).opcodes             # <<<<<<<<<<<<<<
 * 
 *         return False
 */
    __Pyx_TraceLine(802,0,__PYX_ERR(0, 802, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_self->opcodes == ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_other)->opcodes)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":801
 * 
 *     def __eq__(self, other):
 *         if isinstance(other, Opcodes):             # <<<<<<<<<<<<<<
 *             return self.opcodes == (<Opcodes>other).opcodes
 * 
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":804
 *             return self.opcodes == (<Opcodes>other).opcodes
 * 
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_TraceLine(804,0,__PYX_ERR(0, 804, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":800
 *         self.opcodes.set_dest_len(value)
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Opcodes):
 *             return self.opcodes == (<Opcodes>other).opcodes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":806
 *         return False
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.opcodes.size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_19__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_19__len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_18__len__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_18__len__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__len__", __pyx_f[0], 806, 0, __PYX_ERR(0, 806, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":807
 * 
 *     def __len__(self):
 *         return self.opcodes.size()             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, key):
 */
  __Pyx_TraceLine(807,0,__PYX_ERR(0, 807, __pyx_L1_error))
  __pyx_r = __pyx_v_self->opcodes.size();
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":806
 *         return False
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.opcodes.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":809
 *         return self.opcodes.size()
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t index
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_20__getitem__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_20__getitem__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self, PyObject *__pyx_v_key) {
  Py_ssize_t __pyx_v_index;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  rapidfuzz::Opcode __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 1);
  __Pyx_TraceCall("__getitem__", __pyx_f[0], 809, 0, __PYX_ERR(0, 809, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":812
 *         cdef Py_ssize_t index
 * 
 *         if isinstance(key, int):             # <<<<<<<<<<<<<<
 *             index = key
 *             if index < 0:
 */
  __Pyx_TraceLine(812,0,__PYX_ERR(0, 812, __pyx_L1_error))
  __pyx_t_1 = PyInt_Check(__pyx_v_key); 
  if (likely(__pyx_t_1)) {

    /* "rapidfuzz/distance/_initialize_cpp.pyx":813
 * 
 *         if isinstance(key, int):
 *             index = key             # <<<<<<<<<<<<<<
 *             if index < 0:
 *                 index += <Py_ssize_t>self.opcodes.size()
 */
    __Pyx_TraceLine(813,0,__PYX_ERR(0, 813, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_v_key); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 813, __pyx_L1_error)
    __pyx_v_index = __pyx_t_2;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":814
 *         if isinstance(key, int):
 *             index = key
 *             if index < 0:             # <<<<<<<<<<<<<<
 *                 index += <Py_ssize_t>self.opcodes.size()
 * 
 */
    __Pyx_TraceLine(814,0,__PYX_ERR(0, 814, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_index < 0);
    if (__pyx_t_1) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":815
 *             index = key
 *             if index < 0:
 *                 index += <Py_ssize_t>self.opcodes.size()             # <<<<<<<<<<<<<<
 * 
 *             if index < 0 or index >= <Py_ssize_t>self.opcodes.size():
 */
      __Pyx_TraceLine(815,0,__PYX_ERR(0, 815, __pyx_L1_error))
      __pyx_v_index = (__pyx_v_index + ((Py_ssize_t)__pyx_v_self->opcodes.size()));

      /* "rapidfuzz/distance/_initialize_cpp.pyx":814
 *         if isinstance(key, int):
 *             index = key
 *             if index < 0:             # <<<<<<<<<<<<<<
 *                 index += <Py_ssize_t>self.opcodes.size()
 * 
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":817
 *                 index += <Py_ssize_t>self.opcodes.size()
 * 
 *             if index < 0 or index >= <Py_ssize_t>self.opcodes.size():             # <<<<<<<<<<<<<<
 *                 raise IndexError("Opcodes index out of range")
 * 
 */
    __Pyx_TraceLine(817,0,__PYX_ERR(0, 817, __pyx_L1_error))
    __pyx_t_3 = (__pyx_v_index < 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_index >= ((Py_ssize_t)__pyx_v_self->opcodes.size()));
    __pyx_t_1 = __pyx_t_3;
    __pyx_L6_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":818
 * 
 *             if index < 0 or index >= <Py_ssize_t>self.opcodes.size():
 *                 raise IndexError("Opcodes index out of range")             # <<<<<<<<<<<<<<
 * 
 *             return Opcode(
 */
      __Pyx_TraceLine(818,0,__PYX_ERR(0, 818, __pyx_L1_error))
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 818, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 818, __pyx_L1_error)

      /* "rapidfuzz/distance/_initialize_cpp.pyx":817
 *                 index += <Py_ssize_t>self.opcodes.size()
 * 
 *             if index < 0 or index >= <Py_ssize_t>self.opcodes.size():             # <<<<<<<<<<<<<<
 *                 raise IndexError("Opcodes index out of range")
 * 
 */
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":820
 *                 raise IndexError("Opcodes index out of range")
 * 
 *             return Opcode(             # <<<<<<<<<<<<<<
 *                 edit_type_to_str(self.opcodes[index].type),
 *                 self.opcodes[index].src_begin,
 */
    __Pyx_TraceLine(820,0,__PYX_ERR(0, 820, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":821
 * 
 *             return Opcode(
 *                 edit_type_to_str(self.opcodes[index].type),             # <<<<<<<<<<<<<<
 *                 self.opcodes[index].src_begin,
 *                 self.opcodes[index].src_end,
 */
    __Pyx_TraceLine(821,0,__PYX_ERR(0, 821, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_self->opcodes[__pyx_v_index];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 821, __pyx_L1_error)
    }
    __pyx_t_4 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_edit_type_to_str(__pyx_t_5.type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":822
 *             return Opcode(
 *                 edit_type_to_str(self.opcodes[index].type),
 *                 self.opcodes[index].src_begin,             # <<<<<<<<<<<<<<
 *                 self.opcodes[index].src_end,
 *                 self.opcodes[index].dest_begin,
 */
    __Pyx_TraceLine(822,0,__PYX_ERR(0, 822, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_self->opcodes[__pyx_v_index];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 822, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_FromSize_t(__pyx_t_5.src_begin); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 822, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":823
 *                 edit_type_to_str(self.opcodes[index].type),
 *                 self.opcodes[index].src_begin,
 *                 self.opcodes[index].src_end,             # <<<<<<<<<<<<<<
 *                 self.opcodes[index].dest_begin,
 *                 self.opcodes[index].dest_end
 */
    __Pyx_TraceLine(823,0,__PYX_ERR(0, 823, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_self->opcodes[__pyx_v_index];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 823, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyInt_FromSize_t(__pyx_t_5.src_end); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":824
 *                 self.opcodes[index].src_begin,
 *                 self.opcodes[index].src_end,
 *                 self.opcodes[index].dest_begin,             # <<<<<<<<<<<<<<
 *                 self.opcodes[index].dest_end
 *             )
 */
    __Pyx_TraceLine(824,0,__PYX_ERR(0, 824, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_self->opcodes[__pyx_v_index];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 824, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_t_5.dest_begin); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 824, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":825
 *                 self.opcodes[index].src_end,
 *                 self.opcodes[index].dest_begin,
 *                 self.opcodes[index].dest_end             # <<<<<<<<<<<<<<
 *             )
 *         else:
 */
    __Pyx_TraceLine(825,0,__PYX_ERR(0, 825, __pyx_L1_error))
    try {
      __pyx_t_5 = __pyx_v_self->opcodes[__pyx_v_index];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 825, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_PyInt_FromSize_t(__pyx_t_5.dest_end); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":820
 *                 raise IndexError("Opcodes index out of range")
 * 
 *             return Opcode(             # <<<<<<<<<<<<<<
 *                 edit_type_to_str(self.opcodes[index].type),
 *                 self.opcodes[index].src_begin,
 */
    __Pyx_TraceLine(820,0,__PYX_ERR(0, 820, __pyx_L1_error))
    __pyx_t_10 = PyTuple_New(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4)) __PYX_ERR(0, 820, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6)) __PYX_ERR(0, 820, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_7);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_7)) __PYX_ERR(0, 820, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_8);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_8)) __PYX_ERR(0, 820, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_9);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_t_9)) __PYX_ERR(0, 820, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode), __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_r = __pyx_t_9;
    __pyx_t_9 = 0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":812
 *         cdef Py_ssize_t index
 * 
 *         if isinstance(key, int):             # <<<<<<<<<<<<<<
 *             index = key
 *             if index < 0:
 */
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":828
 *             )
 *         else:
 *             raise TypeError("Expected index")             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_TraceLine(828,0,__PYX_ERR(0, 828, __pyx_L1_error))
  /*else*/ {
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 828, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_Raise(__pyx_t_9, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __PYX_ERR(0, 828, __pyx_L1_error)
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":809
 *         return self.opcodes.size()
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t index
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_24generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "rapidfuzz/distance/_initialize_cpp.pyx":830
 *             raise TypeError("Expected index")
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef size_t i
 *         for i in range(self.opcodes.size()):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_23__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_23__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_22__iter__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_22__iter__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 830, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_24generator4, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_Opcodes___iter, __pyx_n_s_rapidfuzz_distance__initialize_c); if (unlikely(!gen)) __PYX_ERR(0, 830, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_24generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ *__pyx_cur_scope = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  rapidfuzz::Opcode __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  __Pyx_TraceCall("__iter__", __pyx_f[0], 830, 0, __PYX_ERR(0, 830, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 830, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":832
 *     def __iter__(self):
 *         cdef size_t i
 *         for i in range(self.opcodes.size()):             # <<<<<<<<<<<<<<
 *             yield Opcode(
 *                 edit_type_to_str(self.opcodes[i].type),
 */
  __Pyx_TraceLine(832,0,__PYX_ERR(0, 832, __pyx_L1_error))
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->opcodes.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_3;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":834
 *         for i in range(self.opcodes.size()):
 *             yield Opcode(
 *                 edit_type_to_str(self.opcodes[i].type),             # <<<<<<<<<<<<<<
 *                 self.opcodes[i].src_begin,
 *                 self.opcodes[i].src_end,
 */
    __Pyx_TraceLine(834,0,__PYX_ERR(0, 834, __pyx_L1_error))
    try {
      __pyx_t_4 = __pyx_cur_scope->__pyx_v_self->opcodes[__pyx_cur_scope->__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 834, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp_edit_type_to_str(__pyx_t_4.type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 834, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":835
 *             yield Opcode(
 *                 edit_type_to_str(self.opcodes[i].type),
 *                 self.opcodes[i].src_begin,             # <<<<<<<<<<<<<<
 *                 self.opcodes[i].src_end,
 *                 self.opcodes[i].dest_begin,
 */
    __Pyx_TraceLine(835,0,__PYX_ERR(0, 835, __pyx_L1_error))
    try {
      __pyx_t_4 = __pyx_cur_scope->__pyx_v_self->opcodes[__pyx_cur_scope->__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 835, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_FromSize_t(__pyx_t_4.src_begin); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 835, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":836
 *                 edit_type_to_str(self.opcodes[i].type),
 *                 self.opcodes[i].src_begin,
 *                 self.opcodes[i].src_end,             # <<<<<<<<<<<<<<
 *                 self.opcodes[i].dest_begin,
 *                 self.opcodes[i].dest_end
 */
    __Pyx_TraceLine(836,0,__PYX_ERR(0, 836, __pyx_L1_error))
    try {
      __pyx_t_4 = __pyx_cur_scope->__pyx_v_self->opcodes[__pyx_cur_scope->__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 836, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyInt_FromSize_t(__pyx_t_4.src_end); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":837
 *                 self.opcodes[i].src_begin,
 *                 self.opcodes[i].src_end,
 *                 self.opcodes[i].dest_begin,             # <<<<<<<<<<<<<<
 *                 self.opcodes[i].dest_end
 *             )
 */
    __Pyx_TraceLine(837,0,__PYX_ERR(0, 837, __pyx_L1_error))
    try {
      __pyx_t_4 = __pyx_cur_scope->__pyx_v_self->opcodes[__pyx_cur_scope->__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 837, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_t_4.dest_begin); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":838
 *                 self.opcodes[i].src_end,
 *                 self.opcodes[i].dest_begin,
 *                 self.opcodes[i].dest_end             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    __Pyx_TraceLine(838,0,__PYX_ERR(0, 838, __pyx_L1_error))
    try {
      __pyx_t_4 = __pyx_cur_scope->__pyx_v_self->opcodes[__pyx_cur_scope->__pyx_v_i];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 838, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_PyInt_FromSize_t(__pyx_t_4.dest_end); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "rapidfuzz/distance/_initialize_cpp.pyx":833
 *         cdef size_t i
 *         for i in range(self.opcodes.size()):
 *             yield Opcode(             # <<<<<<<<<<<<<<
 *                 edit_type_to_str(self.opcodes[i].type),
 *                 self.opcodes[i].src_begin,
 */
    __Pyx_TraceLine(833,0,__PYX_ERR(0, 833, __pyx_L1_error))
    __pyx_t_10 = PyTuple_New(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5)) __PYX_ERR(0, 833, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6)) __PYX_ERR(0, 833, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_7);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_7)) __PYX_ERR(0, 833, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_8);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_8)) __PYX_ERR(0, 833, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_9);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_t_9)) __PYX_ERR(0, 833, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode), __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_r = __pyx_t_9;
    __pyx_t_9 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_TraceReturn(__pyx_r, 0);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 833, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":830
 *             raise TypeError("Expected index")
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef size_t i
 *         for i in range(self.opcodes.size()):
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":841
 *             )
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Opcodes([" + ", ".join(repr(op) for op in self) + f"], src_len={self.opcodes.get_src_len()}, dest_len={self.opcodes.get_dest_len()})"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_26__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_26__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_25__repr__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8__repr___2generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "rapidfuzz/distance/_initialize_cpp.pyx":842
 * 
 *     def __repr__(self):
 *         return "Opcodes([" + ", ".join(repr(op) for op in self) + f"], src_len={self.opcodes.get_src_len()}, dest_len={self.opcodes.get_dest_len()})"             # <<<<<<<<<<<<<<
 * 
 * 
 */

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8__repr___genexpr(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_genexpr_arg_0) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 842, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_genexpr_arg_0);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_genexpr_arg_0);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8__repr___2generator7, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_repr___locals_genexpr, __pyx_n_s_rapidfuzz_distance__initialize_c); if (unlikely(!gen)) __PYX_ERR(0, 842, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.__repr__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8__repr___2generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr *__pyx_cur_scope = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 842, 0, __PYX_ERR(0, 842, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 842, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 842, __pyx_L1_error) }
  if (likely(PyList_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_genexpr_arg_0))) || PyTuple_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_genexpr_arg_0))) {
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_genexpr_arg_0); __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_cur_scope->__pyx_genexpr_arg_0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 842, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 842, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 842, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 842, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 842, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 842, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 842, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 842, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 842, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_op);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_op, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Repr(__pyx_cur_scope->__pyx_v_op); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 842, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 842, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":841
 *             )
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Opcodes([" + ", ".join(repr(op) for op in self) + f"], src_len={self.opcodes.get_src_len()}, dest_len={self.opcodes.get_dest_len()})"
 * 
 */

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_25__repr__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self) {
  PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8__repr___2generator7 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);
  __Pyx_TraceCall("__repr__", __pyx_f[0], 841, 0, __PYX_ERR(0, 841, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":842
 * 
 *     def __repr__(self):
 *         return "Opcodes([" + ", ".join(repr(op) for op in self) + f"], src_len={self.opcodes.get_src_len()}, dest_len={self.opcodes.get_dest_len()})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(842,0,__PYX_ERR(0, 842, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8__repr___genexpr(NULL, __pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyUnicode_Join(__pyx_kp_u__2, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Opcodes, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_4 = 127;
  __Pyx_INCREF(__pyx_kp_u_src_len_2);
  __pyx_t_3 += 11;
  __Pyx_GIVEREF(__pyx_kp_u_src_len_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_src_len_2);
  __pyx_t_5 = __Pyx_PyUnicode_From_size_t(__pyx_v_self->opcodes.get_src_len(), 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_dest_len_2);
  __pyx_t_3 += 11;
  __Pyx_GIVEREF(__pyx_kp_u_dest_len_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_dest_len_2);
  __pyx_t_5 = __Pyx_PyUnicode_From_size_t(__pyx_v_self->opcodes.get_dest_len(), 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__12);
  __pyx_t_3 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__12);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__12);
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":841
 *             )
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Opcodes([" + ", ".join(repr(op) for op in self) + f"], src_len={self.opcodes.get_src_len()}, dest_len={self.opcodes.get_dest_len()})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8__repr___2generator7);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.opcodes cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_28__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_28__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_28__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_28__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_27__reduce_cython__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_27__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__44)
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.opcodes cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.opcodes cannot be converted to a Python object for pickling"
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(2, 2, __pyx_L1_error))
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_opcodes_cannot_be_converted, 0, 0);
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.opcodes cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.opcodes cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.opcodes cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_30__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_30__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_30__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_30__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_29__setstate_cython__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_29__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__45)
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[2], 3, 0, __PYX_ERR(2, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError, "self.opcodes cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.opcodes cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(2, 4, __pyx_L1_error))
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_opcodes_cannot_be_converted, 0, 0);
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.opcodes cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.opcodes cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.Opcodes.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":853
 *     src[src_start:src_end] and dest[dest_start:dest_end]
 *     """
 *     def __init__(self, score, src_start, src_end, dest_start, dest_end):             # <<<<<<<<<<<<<<
 *         self.score = score
 *         self.src_start = src_start
 */

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_score = 0;
  PyObject *__pyx_v_src_start = 0;
  PyObject *__pyx_v_src_end = 0;
  PyObject *__pyx_v_dest_start = 0;
  PyObject *__pyx_v_dest_end = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_score,&__pyx_n_s_src_start,&__pyx_n_s_src_end,&__pyx_n_s_dest_start,&__pyx_n_s_dest_end,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_score)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 853, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_src_start)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 853, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 1); __PYX_ERR(0, 853, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_src_end)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 853, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 2); __PYX_ERR(0, 853, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dest_start)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 853, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 3); __PYX_ERR(0, 853, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dest_end)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 853, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 4); __PYX_ERR(0, 853, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 853, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
      values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
      values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
      values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
    }
    __pyx_v_score = values[0];
    __pyx_v_src_start = values[1];
    __pyx_v_src_end = values[2];
    __pyx_v_dest_start = values[3];
    __pyx_v_dest_end = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 853, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment___init__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self), __pyx_v_score, __pyx_v_src_start, __pyx_v_src_end, __pyx_v_dest_start, __pyx_v_dest_end);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment___init__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, PyObject *__pyx_v_score, PyObject *__pyx_v_src_start, PyObject *__pyx_v_src_end, PyObject *__pyx_v_dest_start, PyObject *__pyx_v_dest_end) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);
  __Pyx_TraceCall("__init__", __pyx_f[0], 853, 0, __PYX_ERR(0, 853, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":854
 *     """
 *     def __init__(self, score, src_start, src_end, dest_start, dest_end):
 *         self.score = score             # <<<<<<<<<<<<<<
 *         self.src_start = src_start
 *         self.src_end = src_end
 */
  __Pyx_TraceLine(854,0,__PYX_ERR(0, 854, __pyx_L1_error))
  __Pyx_INCREF(__pyx_v_score);
  __Pyx_GIVEREF(__pyx_v_score);
  __Pyx_GOTREF(__pyx_v_self->score);
  __Pyx_DECREF(__pyx_v_self->score);
  __pyx_v_self->score = __pyx_v_score;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":855
 *     def __init__(self, score, src_start, src_end, dest_start, dest_end):
 *         self.score = score
 *         self.src_start = src_start             # <<<<<<<<<<<<<<
 *         self.src_end = src_end
 *         self.dest_start = dest_start
 */
  __Pyx_TraceLine(855,0,__PYX_ERR(0, 855, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_src_start); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 855, __pyx_L1_error)
  __pyx_v_self->src_start = __pyx_t_1;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":856
 *         self.score = score
 *         self.src_start = src_start
 *         self.src_end = src_end             # <<<<<<<<<<<<<<
 *         self.dest_start = dest_start
 *         self.dest_end = dest_end
 */
  __Pyx_TraceLine(856,0,__PYX_ERR(0, 856, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_src_end); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 856, __pyx_L1_error)
  __pyx_v_self->src_end = __pyx_t_1;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":857
 *         self.src_start = src_start
 *         self.src_end = src_end
 *         self.dest_start = dest_start             # <<<<<<<<<<<<<<
 *         self.dest_end = dest_end
 * 
 */
  __Pyx_TraceLine(857,0,__PYX_ERR(0, 857, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_dest_start); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 857, __pyx_L1_error)
  __pyx_v_self->dest_start = __pyx_t_1;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":858
 *         self.src_end = src_end
 *         self.dest_start = dest_start
 *         self.dest_end = dest_end             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_TraceLine(858,0,__PYX_ERR(0, 858, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_dest_end); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 858, __pyx_L1_error)
  __pyx_v_self->dest_end = __pyx_t_1;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":853
 *     src[src_start:src_end] and dest[dest_start:dest_end]
 *     """
 *     def __init__(self, score, src_start, src_end, dest_start, dest_end):             # <<<<<<<<<<<<<<
 *         self.score = score
 *         self.src_start = src_start
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":860
 *         self.dest_end = dest_end
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return 5
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_3__len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_2__len__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_2__len__(CYTHON_UNUSED struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__len__", __pyx_f[0], 860, 0, __PYX_ERR(0, 860, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":861
 * 
 *     def __len__(self):
 *         return 5             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, other):
 */
  __Pyx_TraceLine(861,0,__PYX_ERR(0, 861, __pyx_L1_error))
  __pyx_r = 5;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":860
 *         self.dest_end = dest_end
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return 5
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":863
 *         return 5
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         try:
 *             if len(other) != 5:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_4__eq__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_4__eq__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 1);
  __Pyx_TraceCall("__eq__", __pyx_f[0], 863, 0, __PYX_ERR(0, 863, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":864
 * 
 *     def __eq__(self, other):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(other) != 5:
 *                 return False
 */
  __Pyx_TraceLine(864,0,__PYX_ERR(0, 864, __pyx_L1_error))
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rapidfuzz/distance/_initialize_cpp.pyx":865
 *     def __eq__(self, other):
 *         try:
 *             if len(other) != 5:             # <<<<<<<<<<<<<<
 *                 return False
 * 
 */
      __Pyx_TraceLine(865,0,__PYX_ERR(0, 865, __pyx_L3_error))
      __pyx_t_4 = PyObject_Length(__pyx_v_other); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 865, __pyx_L3_error)
      __pyx_t_5 = (__pyx_t_4 != 5);
      if (__pyx_t_5) {

        /* "rapidfuzz/distance/_initialize_cpp.pyx":866
 *         try:
 *             if len(other) != 5:
 *                 return False             # <<<<<<<<<<<<<<
 * 
 *             return (other[0] == self.score
 */
        __Pyx_TraceLine(866,0,__PYX_ERR(0, 866, __pyx_L3_error))
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_False);
        __pyx_r = Py_False;
        goto __pyx_L7_try_return;

        /* "rapidfuzz/distance/_initialize_cpp.pyx":865
 *     def __eq__(self, other):
 *         try:
 *             if len(other) != 5:             # <<<<<<<<<<<<<<
 *                 return False
 * 
 */
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":868
 *                 return False
 * 
 *             return (other[0] == self.score             # <<<<<<<<<<<<<<
 *                 and other[1] == self.src_start
 *                 and other[2] == self.src_end
 */
      __Pyx_TraceLine(868,0,__PYX_ERR(0, 868, __pyx_L3_error))
      __Pyx_XDECREF(__pyx_r);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":869
 * 
 *             return (other[0] == self.score
 *                 and other[1] == self.src_start             # <<<<<<<<<<<<<<
 *                 and other[2] == self.src_end
 *                 and other[3] == self.dest_start
 */
      __Pyx_TraceLine(869,0,__PYX_ERR(0, 869, __pyx_L3_error))
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_other, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 868, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":868
 *                 return False
 * 
 *             return (other[0] == self.score             # <<<<<<<<<<<<<<
 *                 and other[1] == self.src_start
 *                 and other[2] == self.src_end
 */
      __Pyx_TraceLine(868,0,__PYX_ERR(0, 868, __pyx_L3_error))
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_v_self->score, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 868, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 868, __pyx_L3_error)
      if (__pyx_t_5) {
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __Pyx_INCREF(__pyx_t_8);
        __pyx_t_6 = __pyx_t_8;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L10_bool_binop_done;
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":869
 * 
 *             return (other[0] == self.score
 *                 and other[1] == self.src_start             # <<<<<<<<<<<<<<
 *                 and other[2] == self.src_end
 *                 and other[3] == self.dest_start
 */
      __Pyx_TraceLine(869,0,__PYX_ERR(0, 869, __pyx_L3_error))
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_other, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 869, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_v_self->src_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 869, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 869, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 869, __pyx_L3_error)
      if (__pyx_t_5) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_6 = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L10_bool_binop_done;
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":870
 *             return (other[0] == self.score
 *                 and other[1] == self.src_start
 *                 and other[2] == self.src_end             # <<<<<<<<<<<<<<
 *                 and other[3] == self.dest_start
 *                 and other[4] == self.dest_end)
 */
      __Pyx_TraceLine(870,0,__PYX_ERR(0, 870, __pyx_L3_error))
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_other, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 870, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_v_self->src_end); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 870, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_9, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 870, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 870, __pyx_L3_error)
      if (__pyx_t_5) {
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __Pyx_INCREF(__pyx_t_8);
        __pyx_t_6 = __pyx_t_8;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L10_bool_binop_done;
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":871
 *                 and other[1] == self.src_start
 *                 and other[2] == self.src_end
 *                 and other[3] == self.dest_start             # <<<<<<<<<<<<<<
 *                 and other[4] == self.dest_end)
 *         except:
 */
      __Pyx_TraceLine(871,0,__PYX_ERR(0, 871, __pyx_L3_error))
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_other, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 871, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_v_self->dest_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 871, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 871, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 871, __pyx_L3_error)
      if (__pyx_t_5) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_6 = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L10_bool_binop_done;
      }

      /* "rapidfuzz/distance/_initialize_cpp.pyx":872
 *                 and other[2] == self.src_end
 *                 and other[3] == self.dest_start
 *                 and other[4] == self.dest_end)             # <<<<<<<<<<<<<<
 *         except:
 *             return False
 */
      __Pyx_TraceLine(872,0,__PYX_ERR(0, 872, __pyx_L3_error))
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_other, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 872, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_v_self->dest_end); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 872, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_9, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 872, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_INCREF(__pyx_t_8);
      __pyx_t_6 = __pyx_t_8;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_L10_bool_binop_done:;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L7_try_return;

      /* "rapidfuzz/distance/_initialize_cpp.pyx":864
 * 
 *     def __eq__(self, other):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(other) != 5:
 *                 return False
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "rapidfuzz/distance/_initialize_cpp.pyx":873
 *                 and other[3] == self.dest_start
 *                 and other[4] == self.dest_end)
 *         except:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    __Pyx_TraceLine(873,0,__PYX_ERR(0, 873, __pyx_L5_except_error))
    /*except:*/ {
      __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_8, &__pyx_t_7) < 0) __PYX_ERR(0, 873, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "rapidfuzz/distance/_initialize_cpp.pyx":874
 *                 and other[4] == self.dest_end)
 *         except:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Py_ssize_t i):
 */
      __Pyx_TraceLine(874,0,__PYX_ERR(0, 874, __pyx_L5_except_error))
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_except_return;
    }

    /* "rapidfuzz/distance/_initialize_cpp.pyx":864
 * 
 *     def __eq__(self, other):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(other) != 5:
 *                 return False
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":863
 *         return 5
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         try:
 *             if len(other) != 5:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":876
 *             return False
 * 
 *     def __getitem__(self, Py_ssize_t i):             # <<<<<<<<<<<<<<
 *         if i==0 or i==-5: return self.score
 *         if i==1 or i==-4: return self.src_start
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyIndex_AsSsize_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 876, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_6__getitem__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self), ((Py_ssize_t)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_6__getitem__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, Py_ssize_t __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 1);
  __Pyx_TraceCall("__getitem__", __pyx_f[0], 876, 0, __PYX_ERR(0, 876, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":877
 * 
 *     def __getitem__(self, Py_ssize_t i):
 *         if i==0 or i==-5: return self.score             # <<<<<<<<<<<<<<
 *         if i==1 or i==-4: return self.src_start
 *         if i==2 or i==-3: return self.src_end
 */
  __Pyx_TraceLine(877,0,__PYX_ERR(0, 877, __pyx_L1_error))
  switch (__pyx_v_i) {
    case 0:
    CYTHON_FALLTHROUGH;
    case -5L:
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->score);
    __pyx_r = __pyx_v_self->score;
    goto __pyx_L0;
    break;
    default: break;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":878
 *     def __getitem__(self, Py_ssize_t i):
 *         if i==0 or i==-5: return self.score
 *         if i==1 or i==-4: return self.src_start             # <<<<<<<<<<<<<<
 *         if i==2 or i==-3: return self.src_end
 *         if i==3 or i==-2: return self.dest_start
 */
  __Pyx_TraceLine(878,0,__PYX_ERR(0, 878, __pyx_L1_error))
  switch (__pyx_v_i) {
    case 1:
    CYTHON_FALLTHROUGH;
    case -4L:
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->src_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
    default: break;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":879
 *         if i==0 or i==-5: return self.score
 *         if i==1 or i==-4: return self.src_start
 *         if i==2 or i==-3: return self.src_end             # <<<<<<<<<<<<<<
 *         if i==3 or i==-2: return self.dest_start
 *         if i==4 or i==-1: return self.dest_end
 */
  __Pyx_TraceLine(879,0,__PYX_ERR(0, 879, __pyx_L1_error))
  switch (__pyx_v_i) {
    case 2:
    CYTHON_FALLTHROUGH;
    case -3L:
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->src_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
    default: break;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":880
 *         if i==1 or i==-4: return self.src_start
 *         if i==2 or i==-3: return self.src_end
 *         if i==3 or i==-2: return self.dest_start             # <<<<<<<<<<<<<<
 *         if i==4 or i==-1: return self.dest_end
 * 
 */
  __Pyx_TraceLine(880,0,__PYX_ERR(0, 880, __pyx_L1_error))
  switch (__pyx_v_i) {
    case 3:
    CYTHON_FALLTHROUGH;
    case -2L:
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->dest_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
    default: break;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":881
 *         if i==2 or i==-3: return self.src_end
 *         if i==3 or i==-2: return self.dest_start
 *         if i==4 or i==-1: return self.dest_end             # <<<<<<<<<<<<<<
 * 
 *         raise IndexError('Opcode index out of range')
 */
  __Pyx_TraceLine(881,0,__PYX_ERR(0, 881, __pyx_L1_error))
  switch (__pyx_v_i) {
    case 4:
    CYTHON_FALLTHROUGH;
    case -1L:
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->dest_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 881, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
    default: break;
  }

  /* "rapidfuzz/distance/_initialize_cpp.pyx":883
 *         if i==4 or i==-1: return self.dest_end
 * 
 *         raise IndexError('Opcode index out of range')             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_TraceLine(883,0,__PYX_ERR(0, 883, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 883, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":876
 *             return False
 * 
 *     def __getitem__(self, Py_ssize_t i):             # <<<<<<<<<<<<<<
 *         if i==0 or i==-5: return self.score
 *         if i==1 or i==-4: return self.src_start
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_10generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "rapidfuzz/distance/_initialize_cpp.pyx":885
 *         raise IndexError('Opcode index out of range')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         yield self.score
 *         yield self.src_start
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_9__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_9__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_8__iter__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_8__iter__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 885, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_10generator5, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_ScoreAlignment___iter, __pyx_n_s_rapidfuzz_distance__initialize_c); if (unlikely(!gen)) __PYX_ERR(0, 885, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_10generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ *__pyx_cur_scope = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  __Pyx_TraceCall("__iter__", __pyx_f[0], 885, 0, __PYX_ERR(0, 885, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    case 2: goto __pyx_L5_resume_from_yield;
    case 3: goto __pyx_L6_resume_from_yield;
    case 4: goto __pyx_L7_resume_from_yield;
    case 5: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 885, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":886
 * 
 *     def __iter__(self):
 *         yield self.score             # <<<<<<<<<<<<<<
 *         yield self.src_start
 *         yield self.src_end
 */
  __Pyx_TraceLine(886,0,__PYX_ERR(0, 886, __pyx_L1_error))
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self->score);
  __pyx_r = __pyx_cur_scope->__pyx_v_self->score;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 886, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":887
 *     def __iter__(self):
 *         yield self.score
 *         yield self.src_start             # <<<<<<<<<<<<<<
 *         yield self.src_end
 *         yield self.dest_start
 */
  __Pyx_TraceLine(887,0,__PYX_ERR(0, 887, __pyx_L1_error))
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_self->src_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 2;
  return __pyx_r;
  __pyx_L5_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 887, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":888
 *         yield self.score
 *         yield self.src_start
 *         yield self.src_end             # <<<<<<<<<<<<<<
 *         yield self.dest_start
 *         yield self.dest_end
 */
  __Pyx_TraceLine(888,0,__PYX_ERR(0, 888, __pyx_L1_error))
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_self->src_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 3;
  return __pyx_r;
  __pyx_L6_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 888, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":889
 *         yield self.src_start
 *         yield self.src_end
 *         yield self.dest_start             # <<<<<<<<<<<<<<
 *         yield self.dest_end
 * 
 */
  __Pyx_TraceLine(889,0,__PYX_ERR(0, 889, __pyx_L1_error))
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_self->dest_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 4;
  return __pyx_r;
  __pyx_L7_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 889, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":890
 *         yield self.src_end
 *         yield self.dest_start
 *         yield self.dest_end             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_TraceLine(890,0,__PYX_ERR(0, 890, __pyx_L1_error))
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_self->dest_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 5;
  return __pyx_r;
  __pyx_L8_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 890, __pyx_L1_error)
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":885
 *         raise IndexError('Opcode index out of range')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         yield self.score
 *         yield self.src_start
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pyx":892
 *         yield self.dest_end
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"ScoreAlignment(score={self.score}, src_start={self.src_start}, src_end={self.src_end}, dest_start={self.dest_start}, dest_end={self.dest_end})"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_12__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_12__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_11__repr__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_11__repr__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);
  __Pyx_TraceCall("__repr__", __pyx_f[0], 892, 0, __PYX_ERR(0, 892, __pyx_L1_error));

  /* "rapidfuzz/distance/_initialize_cpp.pyx":893
 * 
 *     def __repr__(self):
 *         return f"ScoreAlignment(score={self.score}, src_start={self.src_start}, src_end={self.src_end}, dest_start={self.dest_start}, dest_end={self.dest_end})"             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(893,0,__PYX_ERR(0, 893, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_ScoreAlignment_score);
  __pyx_t_2 += 21;
  __Pyx_GIVEREF(__pyx_kp_u_ScoreAlignment_score);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_ScoreAlignment_score);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_self->score, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_src_start_3);
  __pyx_t_2 += 12;
  __Pyx_GIVEREF(__pyx_kp_u_src_start_3);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_src_start_3);
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_self->src_start, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_src_end_2);
  __pyx_t_2 += 10;
  __Pyx_GIVEREF(__pyx_kp_u_src_end_2);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_src_end_2);
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_self->src_end, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_dest_start_2);
  __pyx_t_2 += 13;
  __Pyx_GIVEREF(__pyx_kp_u_dest_start_2);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u_dest_start_2);
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_self->dest_start, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_dest_end_2);
  __pyx_t_2 += 11;
  __Pyx_GIVEREF(__pyx_kp_u_dest_end_2);
  PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u_dest_end_2);
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_self->dest_end, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__12);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__12);
  PyTuple_SET_ITEM(__pyx_t_1, 10, __pyx_kp_u__12);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 11, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":892
 *         yield self.dest_end
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"ScoreAlignment(score={self.score}, src_start={self.src_start}, src_end={self.src_end}, dest_start={self.dest_start}, dest_end={self.dest_end})"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pxd":16
 * 
 * cdef class ScoreAlignment:
 *     cdef public object score             # <<<<<<<<<<<<<<
 *     cdef public Py_ssize_t src_start
 *     cdef public Py_ssize_t src_end
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[3], 16, 0, __PYX_ERR(3, 16, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->score);
  __pyx_r = __pyx_v_self->score;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.score.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 1);
  __Pyx_TraceCall("__set__", __pyx_f[3], 16, 0, __PYX_ERR(3, 16, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->score);
  __Pyx_DECREF(__pyx_v_self->score);
  __pyx_v_self->score = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.score.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score_4__del__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score_4__del__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 1);
  __Pyx_TraceCall("__del__", __pyx_f[3], 16, 0, __PYX_ERR(3, 16, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->score);
  __Pyx_DECREF(__pyx_v_self->score);
  __pyx_v_self->score = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.score.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pxd":17
 * cdef class ScoreAlignment:
 *     cdef public object score
 *     cdef public Py_ssize_t src_start             # <<<<<<<<<<<<<<
 *     cdef public Py_ssize_t src_end
 *     cdef public Py_ssize_t dest_start
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_9src_start_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_9src_start_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_9src_start___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_9src_start___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[3], 17, 0, __PYX_ERR(3, 17, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->src_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.src_start.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_9src_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_9src_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_9src_start_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_9src_start_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__set__", __pyx_f[3], 17, 0, __PYX_ERR(3, 17, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 17, __pyx_L1_error)
  __pyx_v_self->src_start = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.src_start.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pxd":18
 *     cdef public object score
 *     cdef public Py_ssize_t src_start
 *     cdef public Py_ssize_t src_end             # <<<<<<<<<<<<<<
 *     cdef public Py_ssize_t dest_start
 *     cdef public Py_ssize_t dest_end
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_7src_end_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_7src_end_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_7src_end___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_7src_end___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[3], 18, 0, __PYX_ERR(3, 18, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->src_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.src_end.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_7src_end_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_7src_end_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_7src_end_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_7src_end_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__set__", __pyx_f[3], 18, 0, __PYX_ERR(3, 18, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 18, __pyx_L1_error)
  __pyx_v_self->src_end = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.src_end.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pxd":19
 *     cdef public Py_ssize_t src_start
 *     cdef public Py_ssize_t src_end
 *     cdef public Py_ssize_t dest_start             # <<<<<<<<<<<<<<
 *     cdef public Py_ssize_t dest_end
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_10dest_start_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_10dest_start_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_10dest_start___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_10dest_start___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[3], 19, 0, __PYX_ERR(3, 19, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->dest_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.dest_start.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_10dest_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_10dest_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_10dest_start_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_10dest_start_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__set__", __pyx_f[3], 19, 0, __PYX_ERR(3, 19, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 19, __pyx_L1_error)
  __pyx_v_self->dest_start = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.dest_start.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "rapidfuzz/distance/_initialize_cpp.pxd":20
 *     cdef public Py_ssize_t src_end
 *     cdef public Py_ssize_t dest_start
 *     cdef public Py_ssize_t dest_end             # <<<<<<<<<<<<<<
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_8dest_end_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_8dest_end_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_8dest_end___get__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_8dest_end___get__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[3], 20, 0, __PYX_ERR(3, 20, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->dest_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.dest_end.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_8dest_end_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_8dest_end_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_8dest_end_2__set__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_8dest_end_2__set__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__set__", __pyx_f[3], 20, 0, __PYX_ERR(3, 20, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 20, __pyx_L1_error)
  __pyx_v_self->dest_end = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.dest_end.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_14__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_14__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_14__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_14__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_13__reduce_cython__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_13__reduce_cython__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__46)
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.dest_end, self.dest_start, self.score, self.src_end, self.src_start)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(2, 5, __pyx_L1_error))
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->dest_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->dest_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_self->src_end); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_self->src_start); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->score);
  __Pyx_GIVEREF(__pyx_v_self->score);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_self->score)) __PYX_ERR(2, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.dest_end, self.dest_start, self.score, self.src_end, self.src_start)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(2, 6, __pyx_L1_error))
  __pyx_t_5 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v__dict = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "(tree fragment)":7
 *     state = (self.dest_end, self.dest_start, self.score, self.src_end, self.src_start)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(2, 7, __pyx_L1_error))
  __pyx_t_6 = (__pyx_v__dict != Py_None);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(2, 8, __pyx_L1_error))
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v__dict)) __PYX_ERR(2, 8, __pyx_L1_error);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.score is not None
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(2, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.dest_end, self.dest_start, self.score, self.src_end, self.src_start)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.score is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_ScoreAlignment, (type(self), 0xa8367f7, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(2, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_t_6 = (__pyx_v_self->score != Py_None);
    __pyx_v_use_setstate = __pyx_t_6;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.score is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ScoreAlignment, (type(self), 0xa8367f7, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(2, 12, __pyx_L1_error))
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self.score is not None
 *     if use_setstate:
 *         return __pyx_unpickle_ScoreAlignment, (type(self), 0xa8367f7, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_ScoreAlignment, (type(self), 0xa8367f7, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(2, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_ScoreAlignment); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(2, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_176383991);
    __Pyx_GIVEREF(__pyx_int_176383991);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_176383991)) __PYX_ERR(2, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, Py_None)) __PYX_ERR(2, 13, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5)) __PYX_ERR(2, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state)) __PYX_ERR(2, 13, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.score is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ScoreAlignment, (type(self), 0xa8367f7, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_ScoreAlignment, (type(self), 0xa8367f7, None), state
 *     else:
 *         return __pyx_unpickle_ScoreAlignment, (type(self), 0xa8367f7, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ScoreAlignment__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(2, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_ScoreAlignment); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(2, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_176383991);
    __Pyx_GIVEREF(__pyx_int_176383991);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_176383991)) __PYX_ERR(2, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state)) __PYX_ERR(2, 15, __pyx_L1_error);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5)) __PYX_ERR(2, 15, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ScoreAlignment, (type(self), 0xa8367f7, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ScoreAlignment__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_16__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_16__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_16__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_16__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_15__setstate_cython__(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_15__setstate_cython__(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__47)
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[2], 16, 0, __PYX_ERR(2, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_ScoreAlignment, (type(self), 0xa8367f7, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ScoreAlignment__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(2, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp___pyx_unpickle_ScoreAlignment__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ScoreAlignment, (type(self), 0xa8367f7, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ScoreAlignment__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.ScoreAlignment.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Editop(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_1__pyx_unpickle_Editop(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_1__pyx_unpickle_Editop = {"__pyx_unpickle_Editop", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_1__pyx_unpickle_Editop, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_1__pyx_unpickle_Editop(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Editop (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Editop", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Editop", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_Editop") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Editop", 1, 3, 3, __pyx_nargs); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.__pyx_unpickle_Editop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp___pyx_unpickle_Editop(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp___pyx_unpickle_Editop(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__48)
  __Pyx_RefNannySetupContext("__pyx_unpickle_Editop", 1);
  __Pyx_TraceCall("__pyx_unpickle_Editop", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd03a775, 0x914e71a, 0x451a363):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xd03a775, 0x914e71a, 0x451a363) = (dest_pos, src_pos, tag))" % __pyx_checksum
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(2, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__49, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd03a775, 0x914e71a, 0x451a363):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xd03a775, 0x914e71a, 0x451a363) = (dest_pos, src_pos, tag))" % __pyx_checksum
 *     __pyx_result = Editop.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(2, 5, __pyx_L1_error))
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(2, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xd03a775, 0x914e71a, 0x451a363):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xd03a775, 0x914e71a, 0x451a363) = (dest_pos, src_pos, tag))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = Editop.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(2, 6, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd03a775, 0x914e71a, 0x451a363):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xd03a775, 0x914e71a, 0x451a363) = (dest_pos, src_pos, tag))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xd03a775, 0x914e71a, 0x451a363) = (dest_pos, src_pos, tag))" % __pyx_checksum
 *     __pyx_result = Editop.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Editop__set_state(<Editop> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(2, 7, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xd03a775, 0x914e71a, 0x451a363) = (dest_pos, src_pos, tag))" % __pyx_checksum
 *     __pyx_result = Editop.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Editop__set_state(<Editop> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(2, 8, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Editop.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Editop__set_state(<Editop> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Editop__set_state(Editop __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(2, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp___pyx_unpickle_Editop__set_state(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xd03a775, 0x914e71a, 0x451a363) = (dest_pos, src_pos, tag))" % __pyx_checksum
 *     __pyx_result = Editop.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Editop__set_state(<Editop> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Editop__set_state(<Editop> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Editop__set_state(Editop __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_pos = __pyx_state[0]; __pyx_result.src_pos = __pyx_state[1]; __pyx_result.tag = __pyx_state[2]
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(2, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Editop(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.__pyx_unpickle_Editop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Editop__set_state(<Editop> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Editop__set_state(Editop __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.dest_pos = __pyx_state[0]; __pyx_result.src_pos = __pyx_state[1]; __pyx_result.tag = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9rapidfuzz_8distance_15_initialize_cpp___pyx_unpickle_Editop__set_state(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Editop__set_state", 1);
  __Pyx_TraceCall("__pyx_unpickle_Editop__set_state", __pyx_f[2], 11, 0, __PYX_ERR(2, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Editop__set_state(Editop __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_pos = __pyx_state[0]; __pyx_result.src_pos = __pyx_state[1]; __pyx_result.tag = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(2, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->dest_pos = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->src_pos = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->tag);
  __Pyx_DECREF(__pyx_v___pyx_result->tag);
  __pyx_v___pyx_result->tag = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Editop__set_state(Editop __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_pos = __pyx_state[0]; __pyx_result.src_pos = __pyx_state[1]; __pyx_result.tag = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  __Pyx_TraceLine(13,0,__PYX_ERR(2, 13, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_2 > 3);
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.dest_pos = __pyx_state[0]; __pyx_result.src_pos = __pyx_state[1]; __pyx_result.tag = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(14,0,__PYX_ERR(2, 14, __pyx_L1_error))
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Editop__set_state(Editop __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_pos = __pyx_state[0]; __pyx_result.src_pos = __pyx_state[1]; __pyx_result.tag = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Editop__set_state(<Editop> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Editop__set_state(Editop __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.dest_pos = __pyx_state[0]; __pyx_result.src_pos = __pyx_state[1]; __pyx_result.tag = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.__pyx_unpickle_Editop__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Opcode(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_3__pyx_unpickle_Opcode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_3__pyx_unpickle_Opcode = {"__pyx_unpickle_Opcode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_3__pyx_unpickle_Opcode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_3__pyx_unpickle_Opcode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Opcode (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Opcode", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Opcode", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_Opcode") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Opcode", 1, 3, 3, __pyx_nargs); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.__pyx_unpickle_Opcode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_2__pyx_unpickle_Opcode(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_2__pyx_unpickle_Opcode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__51)
  __Pyx_RefNannySetupContext("__pyx_unpickle_Opcode", 1);
  __Pyx_TraceCall("__pyx_unpickle_Opcode", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xac2429d, 0xb8a0477, 0xd0c648f):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xac2429d, 0xb8a0477, 0xd0c648f) = (dest_end, dest_start, src_end, src_start, tag))" % __pyx_checksum
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(2, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__52, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xac2429d, 0xb8a0477, 0xd0c648f):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xac2429d, 0xb8a0477, 0xd0c648f) = (dest_end, dest_start, src_end, src_start, tag))" % __pyx_checksum
 *     __pyx_result = Opcode.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(2, 5, __pyx_L1_error))
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(2, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xac2429d, 0xb8a0477, 0xd0c648f):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xac2429d, 0xb8a0477, 0xd0c648f) = (dest_end, dest_start, src_end, src_start, tag))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = Opcode.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(2, 6, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xac2429d, 0xb8a0477, 0xd0c648f):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xac2429d, 0xb8a0477, 0xd0c648f) = (dest_end, dest_start, src_end, src_start, tag))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xac2429d, 0xb8a0477, 0xd0c648f) = (dest_end, dest_start, src_end, src_start, tag))" % __pyx_checksum
 *     __pyx_result = Opcode.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Opcode__set_state(<Opcode> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(2, 7, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xac2429d, 0xb8a0477, 0xd0c648f) = (dest_end, dest_start, src_end, src_start, tag))" % __pyx_checksum
 *     __pyx_result = Opcode.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Opcode__set_state(<Opcode> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(2, 8, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Opcode.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Opcode__set_state(<Opcode> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Opcode__set_state(Opcode __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(2, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp___pyx_unpickle_Opcode__set_state(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xac2429d, 0xb8a0477, 0xd0c648f) = (dest_end, dest_start, src_end, src_start, tag))" % __pyx_checksum
 *     __pyx_result = Opcode.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Opcode__set_state(<Opcode> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Opcode__set_state(<Opcode> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Opcode__set_state(Opcode __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_end = __pyx_state[0]; __pyx_result.dest_start = __pyx_state[1]; __pyx_result.src_end = __pyx_state[2]; __pyx_result.src_start = __pyx_state[3]; __pyx_result.tag = __pyx_state[4]
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(2, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Opcode(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.__pyx_unpickle_Opcode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Opcode__set_state(<Opcode> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Opcode__set_state(Opcode __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.dest_end = __pyx_state[0]; __pyx_result.dest_start = __pyx_state[1]; __pyx_result.src_end = __pyx_state[2]; __pyx_result.src_start = __pyx_state[3]; __pyx_result.tag = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9rapidfuzz_8distance_15_initialize_cpp___pyx_unpickle_Opcode__set_state(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Opcode__set_state", 1);
  __Pyx_TraceCall("__pyx_unpickle_Opcode__set_state", __pyx_f[2], 11, 0, __PYX_ERR(2, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Opcode__set_state(Opcode __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_end = __pyx_state[0]; __pyx_result.dest_start = __pyx_state[1]; __pyx_result.src_end = __pyx_state[2]; __pyx_result.src_start = __pyx_state[3]; __pyx_result.tag = __pyx_state[4]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(2, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->dest_end = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->dest_start = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->src_end = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->src_start = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->tag);
  __Pyx_DECREF(__pyx_v___pyx_result->tag);
  __pyx_v___pyx_result->tag = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Opcode__set_state(Opcode __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_end = __pyx_state[0]; __pyx_result.dest_start = __pyx_state[1]; __pyx_result.src_end = __pyx_state[2]; __pyx_result.src_start = __pyx_state[3]; __pyx_result.tag = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  __Pyx_TraceLine(13,0,__PYX_ERR(2, 13, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_2 > 5);
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.dest_end = __pyx_state[0]; __pyx_result.dest_start = __pyx_state[1]; __pyx_result.src_end = __pyx_state[2]; __pyx_result.src_start = __pyx_state[3]; __pyx_result.tag = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(14,0,__PYX_ERR(2, 14, __pyx_L1_error))
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Opcode__set_state(Opcode __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_end = __pyx_state[0]; __pyx_result.dest_start = __pyx_state[1]; __pyx_result.src_end = __pyx_state[2]; __pyx_result.src_start = __pyx_state[3]; __pyx_result.tag = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Opcode__set_state(<Opcode> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Opcode__set_state(Opcode __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.dest_end = __pyx_state[0]; __pyx_result.dest_start = __pyx_state[1]; __pyx_result.src_end = __pyx_state[2]; __pyx_result.src_start = __pyx_state[3]; __pyx_result.tag = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.__pyx_unpickle_Opcode__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_ScoreAlignment(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_5__pyx_unpickle_ScoreAlignment(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_5__pyx_unpickle_ScoreAlignment = {"__pyx_unpickle_ScoreAlignment", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_5__pyx_unpickle_ScoreAlignment, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_5__pyx_unpickle_ScoreAlignment(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_ScoreAlignment (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ScoreAlignment", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ScoreAlignment", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_ScoreAlignment") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ScoreAlignment", 1, 3, 3, __pyx_nargs); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.__pyx_unpickle_ScoreAlignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_4__pyx_unpickle_ScoreAlignment(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_15_initialize_cpp_4__pyx_unpickle_ScoreAlignment(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__53)
  __Pyx_RefNannySetupContext("__pyx_unpickle_ScoreAlignment", 1);
  __Pyx_TraceCall("__pyx_unpickle_ScoreAlignment", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xa8367f7, 0x3e4c916, 0x95a381b):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xa8367f7, 0x3e4c916, 0x95a381b) = (dest_end, dest_start, score, src_end, src_start))" % __pyx_checksum
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(2, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__54, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xa8367f7, 0x3e4c916, 0x95a381b):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xa8367f7, 0x3e4c916, 0x95a381b) = (dest_end, dest_start, score, src_end, src_start))" % __pyx_checksum
 *     __pyx_result = ScoreAlignment.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(2, 5, __pyx_L1_error))
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(2, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xa8367f7, 0x3e4c916, 0x95a381b):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xa8367f7, 0x3e4c916, 0x95a381b) = (dest_end, dest_start, score, src_end, src_start))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = ScoreAlignment.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(2, 6, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xa8367f7, 0x3e4c916, 0x95a381b):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xa8367f7, 0x3e4c916, 0x95a381b) = (dest_end, dest_start, score, src_end, src_start))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xa8367f7, 0x3e4c916, 0x95a381b) = (dest_end, dest_start, score, src_end, src_start))" % __pyx_checksum
 *     __pyx_result = ScoreAlignment.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ScoreAlignment__set_state(<ScoreAlignment> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(2, 7, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xa8367f7, 0x3e4c916, 0x95a381b) = (dest_end, dest_start, score, src_end, src_start))" % __pyx_checksum
 *     __pyx_result = ScoreAlignment.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ScoreAlignment__set_state(<ScoreAlignment> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(2, 8, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = ScoreAlignment.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ScoreAlignment__set_state(<ScoreAlignment> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_ScoreAlignment__set_state(ScoreAlignment __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(2, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_9rapidfuzz_8distance_15_initialize_cpp___pyx_unpickle_ScoreAlignment__set_state(((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xa8367f7, 0x3e4c916, 0x95a381b) = (dest_end, dest_start, score, src_end, src_start))" % __pyx_checksum
 *     __pyx_result = ScoreAlignment.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ScoreAlignment__set_state(<ScoreAlignment> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ScoreAlignment__set_state(<ScoreAlignment> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_ScoreAlignment__set_state(ScoreAlignment __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_end = __pyx_state[0]; __pyx_result.dest_start = __pyx_state[1]; __pyx_result.score = __pyx_state[2]; __pyx_result.src_end = __pyx_state[3]; __pyx_result.src_start = __pyx_state[4]
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(2, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ScoreAlignment(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.__pyx_unpickle_ScoreAlignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_ScoreAlignment__set_state(<ScoreAlignment> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ScoreAlignment__set_state(ScoreAlignment __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.dest_end = __pyx_state[0]; __pyx_result.dest_start = __pyx_state[1]; __pyx_result.score = __pyx_state[2]; __pyx_result.src_end = __pyx_state[3]; __pyx_result.src_start = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9rapidfuzz_8distance_15_initialize_cpp___pyx_unpickle_ScoreAlignment__set_state(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ScoreAlignment__set_state", 1);
  __Pyx_TraceCall("__pyx_unpickle_ScoreAlignment__set_state", __pyx_f[2], 11, 0, __PYX_ERR(2, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_ScoreAlignment__set_state(ScoreAlignment __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_end = __pyx_state[0]; __pyx_result.dest_start = __pyx_state[1]; __pyx_result.score = __pyx_state[2]; __pyx_result.src_end = __pyx_state[3]; __pyx_result.src_start = __pyx_state[4]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(2, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->dest_end = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->dest_start = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->score);
  __Pyx_DECREF(__pyx_v___pyx_result->score);
  __pyx_v___pyx_result->score = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->src_end = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->src_start = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_ScoreAlignment__set_state(ScoreAlignment __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_end = __pyx_state[0]; __pyx_result.dest_start = __pyx_state[1]; __pyx_result.score = __pyx_state[2]; __pyx_result.src_end = __pyx_state[3]; __pyx_result.src_start = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  __Pyx_TraceLine(13,0,__PYX_ERR(2, 13, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_2 > 5);
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.dest_end = __pyx_state[0]; __pyx_result.dest_start = __pyx_state[1]; __pyx_result.score = __pyx_state[2]; __pyx_result.src_end = __pyx_state[3]; __pyx_result.src_start = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(14,0,__PYX_ERR(2, 14, __pyx_L1_error))
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_ScoreAlignment__set_state(ScoreAlignment __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_end = __pyx_state[0]; __pyx_result.dest_start = __pyx_state[1]; __pyx_result.score = __pyx_state[2]; __pyx_result.src_end = __pyx_state[3]; __pyx_result.src_start = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_ScoreAlignment__set_state(<ScoreAlignment> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ScoreAlignment__set_state(ScoreAlignment __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.dest_end = __pyx_state[0]; __pyx_result.dest_start = __pyx_state[1]; __pyx_result.score = __pyx_state[2]; __pyx_result.src_end = __pyx_state[3]; __pyx_result.src_start = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rapidfuzz.distance._initialize_cpp.__pyx_unpickle_ScoreAlignment__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Editops(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)o);
  new((void*)&(p->editops)) rapidfuzz::Editops();
  return o;
}

static void __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_Editops(PyObject *o) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_Editops) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->editops);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}
static PyObject *__pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_Editops(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_9rapidfuzz_8distance_15_initialize_cpp_Editops(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    __Pyx_TypeName o_type_name;
    o_type_name = __Pyx_PyType_GetName(Py_TYPE(o));
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript assignment not supported by " __Pyx_FMT_TYPENAME, o_type_name);
    __Pyx_DECREF_TypeName(o_type_name);
    return -1;
  }
  else {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_23__delitem__(o, i);
  }
}

static PyObject *__pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_Editops(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_19__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_19__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret);
        Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_7Editops_src_len(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7src_len_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_7Editops_src_len(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7src_len_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_7Editops_dest_len(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8dest_len_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_7Editops_dest_len(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8dest_len_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_specialmethod___pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_30__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_30__repr__(self);
}

static PyMethodDef __pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_Editops[] = {
  {"from_opcodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_3from_opcodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_2from_opcodes},
  {"as_opcodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_5as_opcodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_4as_opcodes},
  {"as_matching_blocks", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7as_matching_blocks, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_6as_matching_blocks},
  {"as_list", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_9as_list, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_8as_list},
  {"copy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_11copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_10copy},
  {"inverse", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_13inverse, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_12inverse},
  {"apply", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_15apply, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_14apply},
  {"remove_subsequence", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_17remove_subsequence, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Editops_16remove_subsequence},
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_30__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_32__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_34__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_Editops[] = {
  {(char *)"src_len", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_7Editops_src_len, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_7Editops_src_len, (char *)0, 0},
  {(char *)"dest_len", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_7Editops_dest_len, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_7Editops_dest_len, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editops_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_Editops},
  {Py_tp_repr, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_30__repr__},
  {Py_sq_length, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_21__len__},
  {Py_sq_item, (void *)__pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_Editops},
  {Py_mp_length, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_21__len__},
  {Py_mp_subscript, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_25__getitem__},
  {Py_mp_ass_subscript, (void *)__pyx_mp_ass_subscript_9rapidfuzz_8distance_15_initialize_cpp_Editops},
  {Py_tp_doc, (void *)PyDoc_STR("\n    List like object of Editops describing how to turn s1 into s2.\n    ")},
  {Py_tp_richcompare, (void *)__pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_Editops},
  {Py_tp_iter, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_27__iter__},
  {Py_tp_methods, (void *)__pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_Editops},
  {Py_tp_getset, (void *)__pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_Editops},
  {Py_tp_init, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Editops},
  {0, 0},
};
static PyType_Spec __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editops_spec = {
  "rapidfuzz.distance._initialize_cpp.Editops",
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editops_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_Editops = {
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_21__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_Editops, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Editops = {
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_21__len__, /*mp_length*/
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_25__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_9rapidfuzz_8distance_15_initialize_cpp_Editops, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editops = {
  PyVarObject_HEAD_INIT(0, 0)
  "rapidfuzz.distance._initialize_cpp.""Editops", /*tp_name*/
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_Editops, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_30__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Editops, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Editops, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    List like object of Editops describing how to turn s1 into s2.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_Editops, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_27__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_Editops, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_Editops, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Editops_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Editops, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Opcodes(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)o);
  new((void*)&(p->opcodes)) rapidfuzz::Opcodes();
  return o;
}

static void __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_Opcodes(PyObject *o) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_Opcodes) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->opcodes);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}
static PyObject *__pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_Opcodes(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_Opcodes(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_17__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_17__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret);
        Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_src_len(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7src_len_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_src_len(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7src_len_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_dest_len(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8dest_len_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_dest_len(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8dest_len_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_specialmethod___pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_26__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_26__repr__(self);
}

static PyMethodDef __pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_Opcodes[] = {
  {"from_editops", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_3from_editops, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_2from_editops},
  {"as_editops", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_5as_editops, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_4as_editops},
  {"as_matching_blocks", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7as_matching_blocks, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_6as_matching_blocks},
  {"as_list", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_9as_list, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_8as_list},
  {"copy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_11copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_10copy},
  {"inverse", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_13inverse, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_12inverse},
  {"apply", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_15apply, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_14apply},
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_26__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_28__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_30__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_Opcodes[] = {
  {(char *)"src_len", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_src_len, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_src_len, (char *)0, 0},
  {(char *)"dest_len", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_dest_len, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_dest_len, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcodes_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_Opcodes},
  {Py_tp_repr, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_26__repr__},
  {Py_sq_length, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_19__len__},
  {Py_sq_item, (void *)__pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_Opcodes},
  {Py_mp_length, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_19__len__},
  {Py_mp_subscript, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_21__getitem__},
  {Py_tp_doc, (void *)PyDoc_STR("\n    List like object of Opcodes describing how to turn s1 into s2.\n    The first Opcode has src_start == dest_start == 0, and remaining tuples\n    have src_start == the src_end from the tuple preceding it,\n    and likewise for dest_start == the previous dest_end.\n    ")},
  {Py_tp_richcompare, (void *)__pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_Opcodes},
  {Py_tp_iter, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_23__iter__},
  {Py_tp_methods, (void *)__pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_Opcodes},
  {Py_tp_getset, (void *)__pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_Opcodes},
  {Py_tp_init, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Opcodes},
  {0, 0},
};
static PyType_Spec __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcodes_spec = {
  "rapidfuzz.distance._initialize_cpp.Opcodes",
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcodes_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_Opcodes = {
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_19__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_Opcodes, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Opcodes = {
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_19__len__, /*mp_length*/
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_21__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcodes = {
  PyVarObject_HEAD_INIT(0, 0)
  "rapidfuzz.distance._initialize_cpp.""Opcodes", /*tp_name*/
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_Opcodes, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_26__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Opcodes, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Opcodes, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    List like object of Opcodes describing how to turn s1 into s2.\n    The first Opcode has src_start == dest_start == 0, and remaining tuples\n    have src_start == the src_end from the tuple preceding it,\n    and likewise for dest_start == the previous dest_end.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_Opcodes, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_23__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_Opcodes, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_Opcodes, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Opcodes, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)o);
  p->score = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment(PyObject *o) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->score);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)o;
  if (p->score) {
    e = (*v)(p->score, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment *)o;
  tmp = ((PyObject*)p->score);
  p->score = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret);
        Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_score(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_score(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score_3__set__(o, v);
  }
  else {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_5score_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_src_start(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_9src_start_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_src_start(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_9src_start_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_src_end(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_7src_end_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_src_end(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_7src_end_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_dest_start(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_10dest_start_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_dest_start(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_10dest_start_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_dest_end(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_8dest_end_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_dest_end(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_8dest_end_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_specialmethod___pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_12__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_12__repr__(self);
}

static PyMethodDef __pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment[] = {
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_12__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_14__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_16__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment[] = {
  {(char *)"score", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_score, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_score, (char *)0, 0},
  {(char *)"src_start", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_src_start, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_src_start, (char *)0, 0},
  {(char *)"src_end", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_src_end, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_src_end, (char *)0, 0},
  {(char *)"dest_start", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_dest_start, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_dest_start, (char *)0, 0},
  {(char *)"dest_end", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_dest_end, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_dest_end, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment},
  {Py_tp_repr, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_12__repr__},
  {Py_sq_length, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_3__len__},
  {Py_sq_item, (void *)__pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment},
  {Py_mp_length, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_3__len__},
  {Py_mp_subscript, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_7__getitem__},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Tuple like object describing the position of the compared strings in\n    src and dest.\n\n    It indicates that the score has been calculated between\n    src[src_start:src_end] and dest[dest_start:dest_end]\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment},
  {Py_tp_clear, (void *)__pyx_tp_clear_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment},
  {Py_tp_richcompare, (void *)__pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment},
  {Py_tp_iter, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_9__iter__},
  {Py_tp_methods, (void *)__pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment},
  {Py_tp_getset, (void *)__pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment},
  {Py_tp_init, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment},
  {0, 0},
};
static PyType_Spec __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment_spec = {
  "rapidfuzz.distance._initialize_cpp.ScoreAlignment",
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_ScoreAlignment = {
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ScoreAlignment = {
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_3__len__, /*mp_length*/
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_7__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment = {
  PyVarObject_HEAD_INIT(0, 0)
  "rapidfuzz.distance._initialize_cpp.""ScoreAlignment", /*tp_name*/
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_12__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_ScoreAlignment, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ScoreAlignment, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    Tuple like object describing the position of the compared strings in\n    src and dest.\n\n    It indicates that the score has been calculated between\n    src[src_start:src_end] and dest[dest_start:dest_end]\n    "), /*tp_doc*/
  __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment, /*tp_traverse*/
  __pyx_tp_clear_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment, /*tp_clear*/
  __pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_9__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}
static PyObject *__pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_5__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_5__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret);
        Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_a(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1a_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_a(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1a_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_b(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1b_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_b(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_1b_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_4size_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_4size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_specialmethod___pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_12__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_12__repr__(self);
}

static PyMethodDef __pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock[] = {
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_12__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_14__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_16__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock[] = {
  {(char *)"a", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_a, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_a, (char *)0, 0},
  {(char *)"b", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_b, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_b, (char *)0, 0},
  {(char *)"size", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_size, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_size, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock},
  {Py_tp_repr, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_12__repr__},
  {Py_sq_length, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_3__len__},
  {Py_sq_item, (void *)__pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock},
  {Py_mp_length, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_3__len__},
  {Py_mp_subscript, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_7__getitem__},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Triple describing matching subsequences\n    ")},
  {Py_tp_richcompare, (void *)__pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock},
  {Py_tp_iter, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_9__iter__},
  {Py_tp_methods, (void *)__pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock},
  {Py_tp_getset, (void *)__pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock},
  {Py_tp_new, (void *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock},
  {0, 0},
};
static PyType_Spec __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock_spec = {
  "rapidfuzz.distance._initialize_cpp.MatchingBlock",
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_MatchingBlock = {
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MatchingBlock = {
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_3__len__, /*mp_length*/
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_7__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock = {
  PyVarObject_HEAD_INIT(0, 0)
  "rapidfuzz.distance._initialize_cpp.""MatchingBlock", /*tp_name*/
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_12__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MatchingBlock, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MatchingBlock, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    Triple describing matching subsequences\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_9__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Editop(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)o);
  p->tag = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_Editop(PyObject *o) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_Editop) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  Py_CLEAR(p->tag);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}
static PyObject *__pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_Editop(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_Editop(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_5__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_5__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret);
        Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_6Editop_tag(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_6Editop_tag(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag_3__set__(o, v);
  }
  else {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3tag_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_6Editop_src_pos(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_7src_pos_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_6Editop_src_pos(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_7src_pos_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_6Editop_dest_pos(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_8dest_pos_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_6Editop_dest_pos(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_8dest_pos_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_specialmethod___pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_12__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_12__repr__(self);
}

static PyMethodDef __pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_Editop[] = {
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_12__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_14__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_16__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_Editop[] = {
  {(char *)"tag", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_6Editop_tag, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_6Editop_tag, (char *)0, 0},
  {(char *)"src_pos", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_6Editop_src_pos, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_6Editop_src_pos, (char *)0, 0},
  {(char *)"dest_pos", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_6Editop_dest_pos, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_6Editop_dest_pos, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editop_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_Editop},
  {Py_tp_repr, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_12__repr__},
  {Py_sq_length, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3__len__},
  {Py_sq_item, (void *)__pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_Editop},
  {Py_mp_length, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3__len__},
  {Py_mp_subscript, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_7__getitem__},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Tuple like object describing an edit operation.\n    It is in the form (tag, src_pos, dest_pos)\n\n    The tags are strings, with these meanings:\n\n    +-----------+---------------------------------------------------+\n    | tag       | explanation                                       |\n    +===========+===================================================+\n    | 'replace' | src[src_pos] should be replaced by dest[dest_pos] |\n    +-----------+---------------------------------------------------+\n    | 'delete'  | src[src_pos] should be deleted                    |\n    +-----------+---------------------------------------------------+\n    | 'insert'  | dest[dest_pos] should be inserted at src[src_pos] |\n    +-----------+---------------------------------------------------+\n    ")},
  {Py_tp_richcompare, (void *)__pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_Editop},
  {Py_tp_iter, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_9__iter__},
  {Py_tp_methods, (void *)__pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_Editop},
  {Py_tp_getset, (void *)__pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_Editop},
  {Py_tp_init, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Editop},
  {0, 0},
};
static PyType_Spec __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editop_spec = {
  "rapidfuzz.distance._initialize_cpp.Editop",
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editop_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_Editop = {
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_Editop, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Editop = {
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_3__len__, /*mp_length*/
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_7__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editop = {
  PyVarObject_HEAD_INIT(0, 0)
  "rapidfuzz.distance._initialize_cpp.""Editop", /*tp_name*/
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editop), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_Editop, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_12__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Editop, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Editop, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    Tuple like object describing an edit operation.\n    It is in the form (tag, src_pos, dest_pos)\n\n    The tags are strings, with these meanings:\n\n    +-----------+---------------------------------------------------+\n    | tag       | explanation                                       |\n    +===========+===================================================+\n    | 'replace' | src[src_pos] should be replaced by dest[dest_pos] |\n    +-----------+---------------------------------------------------+\n    | 'delete'  | src[src_pos] should be deleted                    |\n    +-----------+---------------------------------------------------+\n    | 'insert'  | dest[dest_pos] should be inserted at src[src_pos] |\n    +-----------+---------------------------------------------------+\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_Editop, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_9__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_Editop, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_Editop, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Editop_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Editop, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Opcode(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)o);
  p->tag = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_Opcode(PyObject *o) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_Opcode) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  Py_CLEAR(p->tag);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}
static PyObject *__pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_Opcode(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_Opcode(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_5__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_5__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret);
        Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_tag(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_tag(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag_3__set__(o, v);
  }
  else {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3tag_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_src_start(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_9src_start_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_src_start(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_9src_start_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_src_end(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_7src_end_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_src_end(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_7src_end_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_dest_start(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_10dest_start_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_dest_start(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_10dest_start_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_dest_end(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_8dest_end_1__get__(o);
}

static int __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_dest_end(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_8dest_end_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_specialmethod___pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_12__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_12__repr__(self);
}

static PyMethodDef __pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_Opcode[] = {
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_12__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_14__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_16__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_Opcode[] = {
  {(char *)"tag", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_tag, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_tag, (char *)0, 0},
  {(char *)"src_start", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_src_start, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_src_start, (char *)0, 0},
  {(char *)"src_end", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_src_end, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_src_end, (char *)0, 0},
  {(char *)"dest_start", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_dest_start, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_dest_start, (char *)0, 0},
  {(char *)"dest_end", __pyx_getprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_dest_end, __pyx_setprop_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_dest_end, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcode_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_Opcode},
  {Py_tp_repr, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_12__repr__},
  {Py_sq_length, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3__len__},
  {Py_sq_item, (void *)__pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_Opcode},
  {Py_mp_length, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3__len__},
  {Py_mp_subscript, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_7__getitem__},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Tuple like object describing an edit operation.\n    It is in the form (tag, src_start, src_end, dest_start, dest_end)\n\n    The tags are strings, with these meanings:\n\n    +-----------+-----------------------------------------------------+\n    | tag       | explanation                                         |\n    +===========+=====================================================+\n    | 'replace' | src[src_start:src_end] should be                    |\n    |           | replaced by dest[dest_start:dest_end]               |\n    +-----------+-----------------------------------------------------+\n    | 'delete'  | src[src_start:src_end] should be deleted.           |\n    |           | Note that dest_start==dest_end in this case.        |\n    +-----------+-----------------------------------------------------+\n    | 'insert'  | dest[dest_start:dest_end] should be inserted        |\n    |           | at src[src_start:src_start].                        |\n    |           | Note that src_start==src_end in this case.          |\n    +-----------+-----------------------------------------------------+\n    | 'equal'   | src[src_start:src_end] == dest[dest_start:dest_end] |\n    +-----------+-----------------------------------------------------+\n\n    Note\n    ----\n    Opcode is compatible with the tuples returned by difflib's SequenceMatcher to make them\n    interoperable\n    ")},
  {Py_tp_richcompare, (void *)__pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_Opcode},
  {Py_tp_iter, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_9__iter__},
  {Py_tp_methods, (void *)__pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_Opcode},
  {Py_tp_getset, (void *)__pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_Opcode},
  {Py_tp_init, (void *)__pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Opcode},
  {0, 0},
};
static PyType_Spec __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcode_spec = {
  "rapidfuzz.distance._initialize_cpp.Opcode",
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcode_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_Opcode = {
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_9rapidfuzz_8distance_15_initialize_cpp_Opcode, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Opcode = {
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_3__len__, /*mp_length*/
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_7__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcode = {
  PyVarObject_HEAD_INIT(0, 0)
  "rapidfuzz.distance._initialize_cpp.""Opcode", /*tp_name*/
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcode), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp_Opcode, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_12__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Opcode, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Opcode, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    Tuple like object describing an edit operation.\n    It is in the form (tag, src_start, src_end, dest_start, dest_end)\n\n    The tags are strings, with these meanings:\n\n    +-----------+-----------------------------------------------------+\n    | tag       | explanation                                         |\n    +===========+=====================================================+\n    | 'replace' | src[src_start:src_end] should be                    |\n    |           | replaced by dest[dest_start:dest_end]               |\n    +-----------+-----------------------------------------------------+\n    | 'delete'  | src[src_start:src_end] should be deleted.           |\n    |           | Note that dest_start==dest_end in this case.        |\n    +-----------+-----------------------------------------------------+\n    | 'insert'  | dest[dest_start:dest_end] should be inserted        |\n    |           | at src[src_start:src_start].                        |\n    |           | Note that src_start==src_end in this case.          |\n    +-----------+-----------------------------------------------------+\n    | 'equal'   | src[src_start:src_end] == dest[dest_start:dest_end] |\n    +-----------+-----------------------------------------------------+\n\n    Note\n    ----\n    Opcode is compatible with the tuples returned by difflib's SequenceMatcher to make them\n    interoperable\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_tp_richcompare_9rapidfuzz_8distance_15_initialize_cpp_Opcode, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_9__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9rapidfuzz_8distance_15_initialize_cpp_Opcode, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9rapidfuzz_8distance_15_initialize_cpp_Opcode, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp_Opcode, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

#if CYTHON_USE_FREELISTS
static struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ *__pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__[8];
static int __pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ = 0;
#endif

static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__)))) {
    o = (PyObject*)__pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__[--__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__];
    memset(o, 0, sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__(PyObject *o) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__)))) {
    __pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__[__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__++] = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter___slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__},
  {Py_tp_new, (void *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__},
  {0, 0},
};
static PyType_Spec __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter___spec = {
  "rapidfuzz.distance._initialize_cpp.__pyx_scope_struct____iter__",
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter___slots,
};
#else

static PyTypeObject __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "rapidfuzz.distance._initialize_cpp.""__pyx_scope_struct____iter__", /*tp_name*/
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

#if CYTHON_USE_FREELISTS
static struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ *__pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__[8];
static int __pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ = 0;
#endif

static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__)))) {
    o = (PyObject*)__pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__[--__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__(PyObject *o) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__)))) {
    __pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__[__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__++] = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter___slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__},
  {Py_tp_new, (void *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__},
  {0, 0},
};
static PyType_Spec __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter___spec = {
  "rapidfuzz.distance._initialize_cpp.__pyx_scope_struct_1___iter__",
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter___slots,
};
#else

static PyTypeObject __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "rapidfuzz.distance._initialize_cpp.""__pyx_scope_struct_1___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

#if CYTHON_USE_FREELISTS
static struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ *__pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__[8];
static int __pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ = 0;
#endif

static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__)))) {
    o = (PyObject*)__pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__[--__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__(PyObject *o) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__)))) {
    __pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__[__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__++] = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter___slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__},
  {Py_tp_new, (void *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__},
  {0, 0},
};
static PyType_Spec __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter___spec = {
  "rapidfuzz.distance._initialize_cpp.__pyx_scope_struct_2___iter__",
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter___slots,
};
#else

static PyTypeObject __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "rapidfuzz.distance._initialize_cpp.""__pyx_scope_struct_2___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

#if CYTHON_USE_FREELISTS
static struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr *__pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr = 0;
#endif

static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr[--__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_genexpr_arg_0);
  Py_CLEAR(p->__pyx_v_op);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr[__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(((PyObject *)p->__pyx_genexpr_arg_0), a); if (e) return e;
  }
  if (p->__pyx_v_op) {
    e = (*v)(p->__pyx_v_op, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr_spec = {
  "rapidfuzz.distance._initialize_cpp.__pyx_scope_struct_3_genexpr",
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "rapidfuzz.distance._initialize_cpp.""__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

#if CYTHON_USE_FREELISTS
static struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ *__pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__[8];
static int __pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ = 0;
#endif

static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__)))) {
    o = (PyObject*)__pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__[--__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__(PyObject *o) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__)))) {
    __pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__[__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__++] = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter___slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__},
  {Py_tp_new, (void *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__},
  {0, 0},
};
static PyType_Spec __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter___spec = {
  "rapidfuzz.distance._initialize_cpp.__pyx_scope_struct_4___iter__",
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter___slots,
};
#else

static PyTypeObject __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "rapidfuzz.distance._initialize_cpp.""__pyx_scope_struct_4___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

#if CYTHON_USE_FREELISTS
static struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ *__pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__[8];
static int __pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ = 0;
#endif

static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__)))) {
    o = (PyObject*)__pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__[--__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__(PyObject *o) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__)))) {
    __pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__[__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__++] = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter___slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__},
  {Py_tp_new, (void *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__},
  {0, 0},
};
static PyType_Spec __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter___spec = {
  "rapidfuzz.distance._initialize_cpp.__pyx_scope_struct_5___iter__",
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter___slots,
};
#else

static PyTypeObject __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "rapidfuzz.distance._initialize_cpp.""__pyx_scope_struct_5___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

#if CYTHON_USE_FREELISTS
static struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr *__pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr[8];
static int __pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr = 0;
#endif

static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr)))) {
    o = (PyObject*)__pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr[--__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr(PyObject *o) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_genexpr_arg_0);
  Py_CLEAR(p->__pyx_v_op);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr)))) {
    __pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr[__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr++] = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr *)o;
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(((PyObject *)p->__pyx_genexpr_arg_0), a); if (e) return e;
  }
  if (p->__pyx_v_op) {
    e = (*v)(p->__pyx_v_op, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr_spec = {
  "rapidfuzz.distance._initialize_cpp.__pyx_scope_struct_6_genexpr",
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "rapidfuzz.distance._initialize_cpp.""__pyx_scope_struct_6_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

#if CYTHON_USE_FREELISTS
static struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ *__pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__[8];
static int __pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ = 0;
#endif

static PyObject *__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__)))) {
    o = (PyObject*)__pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__[--__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__(PyObject *o) {
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__)))) {
    __pyx_freelist_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__[__pyx_freecount_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__++] = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ *p = (struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter___slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__},
  {Py_tp_new, (void *)__pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__},
  {0, 0},
};
static PyType_Spec __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter___spec = {
  "rapidfuzz.distance._initialize_cpp.__pyx_scope_struct_7___iter__",
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter___slots,
};
#else

static PyTypeObject __pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "rapidfuzz.distance._initialize_cpp.""__pyx_scope_struct_7___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
    {&__pyx_kp_u_Duplicated_edit_operation, __pyx_k_Duplicated_edit_operation, sizeof(__pyx_k_Duplicated_edit_operation), 0, 1, 0, 0},
    {&__pyx_n_s_Editop, __pyx_k_Editop, sizeof(__pyx_k_Editop), 0, 0, 1, 1},
    {&__pyx_n_s_Editop___iter, __pyx_k_Editop___iter, sizeof(__pyx_k_Editop___iter), 0, 0, 1, 1},
    {&__pyx_n_s_Editop___reduce_cython, __pyx_k_Editop___reduce_cython, sizeof(__pyx_k_Editop___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Editop___setstate_cython, __pyx_k_Editop___setstate_cython, sizeof(__pyx_k_Editop___setstate_cython), 0, 0, 1, 1},
    {&__pyx_kp_u_Editop_index_out_of_range, __pyx_k_Editop_index_out_of_range, sizeof(__pyx_k_Editop_index_out_of_range), 0, 1, 0, 0},
    {&__pyx_kp_u_Editop_tag, __pyx_k_Editop_tag, sizeof(__pyx_k_Editop_tag), 0, 1, 0, 0},
    {&__pyx_kp_u_Editops, __pyx_k_Editops, sizeof(__pyx_k_Editops), 0, 1, 0, 0},
    {&__pyx_n_s_Editops_2, __pyx_k_Editops_2, sizeof(__pyx_k_Editops_2), 0, 0, 1, 1},
    {&__pyx_n_s_Editops___iter, __pyx_k_Editops___iter, sizeof(__pyx_k_Editops___iter), 0, 0, 1, 1},
    {&__pyx_n_s_Editops___reduce_cython, __pyx_k_Editops___reduce_cython, sizeof(__pyx_k_Editops___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Editops___setstate_cython, __pyx_k_Editops___setstate_cython, sizeof(__pyx_k_Editops___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Editops_apply, __pyx_k_Editops_apply, sizeof(__pyx_k_Editops_apply), 0, 0, 1, 1},
    {&__pyx_n_s_Editops_as_list, __pyx_k_Editops_as_list, sizeof(__pyx_k_Editops_as_list), 0, 0, 1, 1},
    {&__pyx_n_s_Editops_as_matching_blocks, __pyx_k_Editops_as_matching_blocks, sizeof(__pyx_k_Editops_as_matching_blocks), 0, 0, 1, 1},
    {&__pyx_n_s_Editops_as_opcodes, __pyx_k_Editops_as_opcodes, sizeof(__pyx_k_Editops_as_opcodes), 0, 0, 1, 1},
    {&__pyx_n_s_Editops_copy, __pyx_k_Editops_copy, sizeof(__pyx_k_Editops_copy), 0, 0, 1, 1},
    {&__pyx_n_s_Editops_from_opcodes, __pyx_k_Editops_from_opcodes, sizeof(__pyx_k_Editops_from_opcodes), 0, 0, 1, 1},
    {&__pyx_kp_u_Editops_index_out_of_range, __pyx_k_Editops_index_out_of_range, sizeof(__pyx_k_Editops_index_out_of_range), 0, 1, 0, 0},
    {&__pyx_n_s_Editops_inverse, __pyx_k_Editops_inverse, sizeof(__pyx_k_Editops_inverse), 0, 0, 1, 1},
    {&__pyx_kp_u_Editops_inverse_line_432, __pyx_k_Editops_inverse_line_432, sizeof(__pyx_k_Editops_inverse_line_432), 0, 1, 0, 0},
    {&__pyx_n_s_Editops_remove_subsequence, __pyx_k_Editops_remove_subsequence, sizeof(__pyx_k_Editops_remove_subsequence), 0, 0, 1, 1},
    {&__pyx_kp_u_Expected_index, __pyx_k_Expected_index, sizeof(__pyx_k_Expected_index), 0, 1, 0, 0},
    {&__pyx_kp_u_Expected_index_or_slice, __pyx_k_Expected_index_or_slice, sizeof(__pyx_k_Expected_index_or_slice), 0, 1, 0, 0},
    {&__pyx_kp_u_Expected_list_of_3_tuples_or_a_l, __pyx_k_Expected_list_of_3_tuples_or_a_l, sizeof(__pyx_k_Expected_list_of_3_tuples_or_a_l), 0, 1, 0, 0},
    {&__pyx_kp_u_Got_unexpected_keyword_arguments, __pyx_k_Got_unexpected_keyword_arguments, sizeof(__pyx_k_Got_unexpected_keyword_arguments), 0, 1, 0, 0},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_k_Incompatible_checksums_0x_x_vs_0_2, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_2), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3, __pyx_k_Incompatible_checksums_0x_x_vs_0_3, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_3), 0, 0, 1, 0},
    {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
    {&__pyx_kp_u_Invalid_Edit_Type, __pyx_k_Invalid_Edit_Type, sizeof(__pyx_k_Invalid_Edit_Type), 0, 1, 0, 0},
    {&__pyx_kp_u_Invert_Editops_so_it_describes, __pyx_k_Invert_Editops_so_it_describes, sizeof(__pyx_k_Invert_Editops_so_it_describes), 0, 1, 0, 0},
    {&__pyx_kp_u_Invert_Opcodes_so_it_describes, __pyx_k_Invert_Opcodes_so_it_describes, sizeof(__pyx_k_Invert_Opcodes_so_it_describes), 0, 1, 0, 0},
    {&__pyx_kp_u_List_of_edit_operations_does_not, __pyx_k_List_of_edit_operations_does_not, sizeof(__pyx_k_List_of_edit_operations_does_not), 0, 1, 0, 0},
    {&__pyx_kp_u_List_of_edit_operations_does_not_2, __pyx_k_List_of_edit_operations_does_not_2, sizeof(__pyx_k_List_of_edit_operations_does_not_2), 0, 1, 0, 0},
    {&__pyx_kp_u_List_of_edit_operations_invalid, __pyx_k_List_of_edit_operations_invalid, sizeof(__pyx_k_List_of_edit_operations_invalid), 0, 1, 0, 0},
    {&__pyx_kp_u_List_of_edit_operations_is_not_c, __pyx_k_List_of_edit_operations_is_not_c, sizeof(__pyx_k_List_of_edit_operations_is_not_c), 0, 1, 0, 0},
    {&__pyx_kp_u_List_of_edit_operations_out_of_o, __pyx_k_List_of_edit_operations_out_of_o, sizeof(__pyx_k_List_of_edit_operations_out_of_o), 0, 1, 0, 0},
    {&__pyx_n_s_MatchingBlock, __pyx_k_MatchingBlock, sizeof(__pyx_k_MatchingBlock), 0, 0, 1, 1},
    {&__pyx_n_s_MatchingBlock___iter, __pyx_k_MatchingBlock___iter, sizeof(__pyx_k_MatchingBlock___iter), 0, 0, 1, 1},
    {&__pyx_n_s_MatchingBlock___reduce_cython, __pyx_k_MatchingBlock___reduce_cython, sizeof(__pyx_k_MatchingBlock___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_MatchingBlock___setstate_cython, __pyx_k_MatchingBlock___setstate_cython, sizeof(__pyx_k_MatchingBlock___setstate_cython), 0, 0, 1, 1},
    {&__pyx_kp_u_MatchingBlock_a, __pyx_k_MatchingBlock_a, sizeof(__pyx_k_MatchingBlock_a), 0, 1, 0, 0},
    {&__pyx_kp_u_MatchingBlock_index_out_of_range, __pyx_k_MatchingBlock_index_out_of_range, sizeof(__pyx_k_MatchingBlock_index_out_of_range), 0, 1, 0, 0},
    {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
    {&__pyx_kp_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
    {&__pyx_n_s_Opcode, __pyx_k_Opcode, sizeof(__pyx_k_Opcode), 0, 0, 1, 1},
    {&__pyx_n_s_Opcode___iter, __pyx_k_Opcode___iter, sizeof(__pyx_k_Opcode___iter), 0, 0, 1, 1},
    {&__pyx_n_s_Opcode___reduce_cython, __pyx_k_Opcode___reduce_cython, sizeof(__pyx_k_Opcode___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Opcode___setstate_cython, __pyx_k_Opcode___setstate_cython, sizeof(__pyx_k_Opcode___setstate_cython), 0, 0, 1, 1},
    {&__pyx_kp_u_Opcode_index_out_of_range, __pyx_k_Opcode_index_out_of_range, sizeof(__pyx_k_Opcode_index_out_of_range), 0, 1, 0, 0},
    {&__pyx_kp_u_Opcode_tag, __pyx_k_Opcode_tag, sizeof(__pyx_k_Opcode_tag), 0, 1, 0, 0},
    {&__pyx_kp_u_Opcodes, __pyx_k_Opcodes, sizeof(__pyx_k_Opcodes), 0, 1, 0, 0},
    {&__pyx_n_s_Opcodes_2, __pyx_k_Opcodes_2, sizeof(__pyx_k_Opcodes_2), 0, 0, 1, 1},
    {&__pyx_n_s_Opcodes___iter, __pyx_k_Opcodes___iter, sizeof(__pyx_k_Opcodes___iter), 0, 0, 1, 1},
    {&__pyx_n_s_Opcodes___reduce_cython, __pyx_k_Opcodes___reduce_cython, sizeof(__pyx_k_Opcodes___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Opcodes___setstate_cython, __pyx_k_Opcodes___setstate_cython, sizeof(__pyx_k_Opcodes___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Opcodes_apply, __pyx_k_Opcodes_apply, sizeof(__pyx_k_Opcodes_apply), 0, 0, 1, 1},
    {&__pyx_n_s_Opcodes_as_editops, __pyx_k_Opcodes_as_editops, sizeof(__pyx_k_Opcodes_as_editops), 0, 0, 1, 1},
    {&__pyx_n_s_Opcodes_as_list, __pyx_k_Opcodes_as_list, sizeof(__pyx_k_Opcodes_as_list), 0, 0, 1, 1},
    {&__pyx_n_s_Opcodes_as_matching_blocks, __pyx_k_Opcodes_as_matching_blocks, sizeof(__pyx_k_Opcodes_as_matching_blocks), 0, 0, 1, 1},
    {&__pyx_n_s_Opcodes_copy, __pyx_k_Opcodes_copy, sizeof(__pyx_k_Opcodes_copy), 0, 0, 1, 1},
    {&__pyx_n_s_Opcodes_from_editops, __pyx_k_Opcodes_from_editops, sizeof(__pyx_k_Opcodes_from_editops), 0, 0, 1, 1},
    {&__pyx_kp_u_Opcodes_index_out_of_range, __pyx_k_Opcodes_index_out_of_range, sizeof(__pyx_k_Opcodes_index_out_of_range), 0, 1, 0, 0},
    {&__pyx_n_s_Opcodes_inverse, __pyx_k_Opcodes_inverse, sizeof(__pyx_k_Opcodes_inverse), 0, 0, 1, 1},
    {&__pyx_kp_u_Opcodes_inverse_line_733, __pyx_k_Opcodes_inverse_line_733, sizeof(__pyx_k_Opcodes_inverse_line_733), 0, 1, 0, 0},
    {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_RF_OriginalScorer, __pyx_k_RF_OriginalScorer, sizeof(__pyx_k_RF_OriginalScorer), 0, 0, 1, 1},
    {&__pyx_n_s_RF_Preprocess, __pyx_k_RF_Preprocess, sizeof(__pyx_k_RF_Preprocess), 0, 0, 1, 1},
    {&__pyx_n_u_RF_Preprocess, __pyx_k_RF_Preprocess, sizeof(__pyx_k_RF_Preprocess), 0, 1, 0, 1},
    {&__pyx_n_s_RF_Scorer, __pyx_k_RF_Scorer, sizeof(__pyx_k_RF_Scorer), 0, 0, 1, 1},
    {&__pyx_n_s_RF_ScorerPy, __pyx_k_RF_ScorerPy, sizeof(__pyx_k_RF_ScorerPy), 0, 0, 1, 1},
    {&__pyx_n_s_ScoreAlignment, __pyx_k_ScoreAlignment, sizeof(__pyx_k_ScoreAlignment), 0, 0, 1, 1},
    {&__pyx_n_s_ScoreAlignment___iter, __pyx_k_ScoreAlignment___iter, sizeof(__pyx_k_ScoreAlignment___iter), 0, 0, 1, 1},
    {&__pyx_n_s_ScoreAlignment___reduce_cython, __pyx_k_ScoreAlignment___reduce_cython, sizeof(__pyx_k_ScoreAlignment___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_ScoreAlignment___setstate_cython, __pyx_k_ScoreAlignment___setstate_cython, sizeof(__pyx_k_ScoreAlignment___setstate_cython), 0, 0, 1, 1},
    {&__pyx_kp_u_ScoreAlignment_score, __pyx_k_ScoreAlignment_score, sizeof(__pyx_k_ScoreAlignment_score), 0, 1, 0, 0},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_kp_u__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 0},
    {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
    {&__pyx_kp_u__50, __pyx_k__50, sizeof(__pyx_k__50), 0, 1, 0, 0},
    {&__pyx_n_s__66, __pyx_k__66, sizeof(__pyx_k__66), 0, 0, 1, 1},
    {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
    {&__pyx_n_s_apply, __pyx_k_apply, sizeof(__pyx_k_apply), 0, 0, 1, 1},
    {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
    {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
    {&__pyx_n_s_as_editops, __pyx_k_as_editops, sizeof(__pyx_k_as_editops), 0, 0, 1, 1},
    {&__pyx_n_s_as_list, __pyx_k_as_list, sizeof(__pyx_k_as_list), 0, 0, 1, 1},
    {&__pyx_n_s_as_matching_blocks, __pyx_k_as_matching_blocks, sizeof(__pyx_k_as_matching_blocks), 0, 0, 1, 1},
    {&__pyx_n_s_as_opcodes, __pyx_k_as_opcodes, sizeof(__pyx_k_as_opcodes), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
    {&__pyx_kp_u_b_2, __pyx_k_b_2, sizeof(__pyx_k_b_2), 0, 1, 0, 0},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
    {&__pyx_n_s_cls, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
    {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
    {&__pyx_n_u_delete, __pyx_k_delete, sizeof(__pyx_k_delete), 0, 1, 0, 1},
    {&__pyx_n_s_dest_end, __pyx_k_dest_end, sizeof(__pyx_k_dest_end), 0, 0, 1, 1},
    {&__pyx_kp_u_dest_end_2, __pyx_k_dest_end_2, sizeof(__pyx_k_dest_end_2), 0, 1, 0, 0},
    {&__pyx_n_s_dest_len, __pyx_k_dest_len, sizeof(__pyx_k_dest_len), 0, 0, 1, 1},
    {&__pyx_kp_u_dest_len_2, __pyx_k_dest_len_2, sizeof(__pyx_k_dest_len_2), 0, 1, 0, 0},
    {&__pyx_n_s_dest_pos, __pyx_k_dest_pos, sizeof(__pyx_k_dest_pos), 0, 0, 1, 1},
    {&__pyx_kp_u_dest_pos_2, __pyx_k_dest_pos_2, sizeof(__pyx_k_dest_pos_2), 0, 1, 0, 0},
    {&__pyx_n_s_dest_start, __pyx_k_dest_start, sizeof(__pyx_k_dest_start), 0, 0, 1, 1},
    {&__pyx_kp_u_dest_start_2, __pyx_k_dest_start_2, sizeof(__pyx_k_dest_start_2), 0, 1, 0, 0},
    {&__pyx_n_s_destination_string, __pyx_k_destination_string, sizeof(__pyx_k_destination_string), 0, 0, 1, 1},
    {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_n_s_dict_2, __pyx_k_dict_2, sizeof(__pyx_k_dict_2), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
    {&__pyx_n_s_editops, __pyx_k_editops, sizeof(__pyx_k_editops), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_u_equal, __pyx_k_equal, sizeof(__pyx_k_equal), 0, 1, 0, 1},
    {&__pyx_kp_u_expected_strings_or_bytes_object, __pyx_k_expected_strings_or_bytes_object, sizeof(__pyx_k_expected_strings_or_bytes_object), 0, 1, 0, 0},
    {&__pyx_n_s_from_editops, __pyx_k_from_editops, sizeof(__pyx_k_from_editops), 0, 0, 1, 1},
    {&__pyx_n_s_from_opcodes, __pyx_k_from_opcodes, sizeof(__pyx_k_from_opcodes), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
    {&__pyx_n_u_insert, __pyx_k_insert, sizeof(__pyx_k_insert), 0, 1, 0, 1},
    {&__pyx_n_s_inverse, __pyx_k_inverse, sizeof(__pyx_k_inverse), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
    {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
    {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
    {&__pyx_n_s_opcodes, __pyx_k_opcodes, sizeof(__pyx_k_opcodes), 0, 0, 1, 1},
    {&__pyx_n_s_pandas_NA, __pyx_k_pandas_NA, sizeof(__pyx_k_pandas_NA), 0, 0, 1, 1},
    {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_Editop, __pyx_k_pyx_unpickle_Editop, sizeof(__pyx_k_pyx_unpickle_Editop), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_Opcode, __pyx_k_pyx_unpickle_Opcode, sizeof(__pyx_k_pyx_unpickle_Opcode), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_ScoreAlignment, __pyx_k_pyx_unpickle_ScoreAlignment, sizeof(__pyx_k_pyx_unpickle_ScoreAlignment), 0, 0, 1, 1},
    {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_k_rapidfuzz_distance__initialize_c, sizeof(__pyx_k_rapidfuzz_distance__initialize_c), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_remove_subsequence, __pyx_k_remove_subsequence, sizeof(__pyx_k_remove_subsequence), 0, 0, 1, 1},
    {&__pyx_n_u_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 1, 0, 1},
    {&__pyx_n_s_repr___locals_genexpr, __pyx_k_repr___locals_genexpr, sizeof(__pyx_k_repr___locals_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_score, __pyx_k_score, sizeof(__pyx_k_score), 0, 0, 1, 1},
    {&__pyx_kp_u_score_cutoff_has_to_be_in_the_ra, __pyx_k_score_cutoff_has_to_be_in_the_ra, sizeof(__pyx_k_score_cutoff_has_to_be_in_the_ra), 0, 1, 0, 0},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_kp_s_self_editops_cannot_be_converted, __pyx_k_self_editops_cannot_be_converted, sizeof(__pyx_k_self_editops_cannot_be_converted), 0, 0, 1, 0},
    {&__pyx_kp_s_self_opcodes_cannot_be_converted, __pyx_k_self_opcodes_cannot_be_converted, sizeof(__pyx_k_self_opcodes_cannot_be_converted), 0, 0, 1, 0},
    {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
    {&__pyx_kp_u_size_2, __pyx_k_size_2, sizeof(__pyx_k_size_2), 0, 1, 0, 0},
    {&__pyx_n_s_source_string, __pyx_k_source_string, sizeof(__pyx_k_source_string), 0, 0, 1, 1},
    {&__pyx_n_s_src_end, __pyx_k_src_end, sizeof(__pyx_k_src_end), 0, 0, 1, 1},
    {&__pyx_kp_u_src_end_2, __pyx_k_src_end_2, sizeof(__pyx_k_src_end_2), 0, 1, 0, 0},
    {&__pyx_n_s_src_len, __pyx_k_src_len, sizeof(__pyx_k_src_len), 0, 0, 1, 1},
    {&__pyx_kp_u_src_len_2, __pyx_k_src_len_2, sizeof(__pyx_k_src_len_2), 0, 1, 0, 0},
    {&__pyx_n_s_src_pos, __pyx_k_src_pos, sizeof(__pyx_k_src_pos), 0, 0, 1, 1},
    {&__pyx_kp_u_src_pos_2, __pyx_k_src_pos_2, sizeof(__pyx_k_src_pos_2), 0, 1, 0, 0},
    {&__pyx_kp_s_src_rapidfuzz_distance__initiali, __pyx_k_src_rapidfuzz_distance__initiali, sizeof(__pyx_k_src_rapidfuzz_distance__initiali), 0, 0, 1, 0},
    {&__pyx_n_s_src_start, __pyx_k_src_start, sizeof(__pyx_k_src_start), 0, 0, 1, 1},
    {&__pyx_kp_u_src_start_2, __pyx_k_src_start_2, sizeof(__pyx_k_src_start_2), 0, 1, 0, 0},
    {&__pyx_kp_u_src_start_3, __pyx_k_src_start_3, sizeof(__pyx_k_src_start_3), 0, 1, 0, 0},
    {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
    {&__pyx_kp_u_step_sizes_below_0_lead_to_an_in, __pyx_k_step_sizes_below_0_lead_to_an_in, sizeof(__pyx_k_step_sizes_below_0_lead_to_an_in), 0, 1, 0, 0},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_subsequence, __pyx_k_subsequence, sizeof(__pyx_k_subsequence), 0, 0, 1, 1},
    {&__pyx_n_s_tag, __pyx_k_tag, sizeof(__pyx_k_tag), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
    {&__pyx_n_s_typecode, __pyx_k_typecode, sizeof(__pyx_k_typecode), 0, 0, 1, 1},
    {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
    {&__pyx_n_s_use_setstate, __pyx_k_use_setstate, sizeof(__pyx_k_use_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 48, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 68, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 90, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 213, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 263, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":48
 *         return EditType.None
 *     else:
 *         raise ValueError("Invalid Edit Type")             # <<<<<<<<<<<<<<
 * 
 * cdef RfEditops list_to_editops(ops, size_t src_len, size_t dest_len) except *:
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Invalid_Edit_Type); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":68
 *     for op in ops:
 *         if len(op) != 3:
 *             raise TypeError("Expected list of 3-tuples, or a list of 5-tuples")             # <<<<<<<<<<<<<<
 * 
 *         edit_type = str_to_edit_type(op[0])
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Expected_list_of_3_tuples_or_a_l); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":75
 * 
 *         if src_pos > src_len or dest_pos > dest_len:
 *             raise ValueError("List of edit operations invalid")             # <<<<<<<<<<<<<<
 * 
 *         if src_pos == src_len and edit_type != EditType.Insert:
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_List_of_edit_operations_invalid); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":92
 *         for i in range(0, result.size() - 1):
 *             if result[i + 1].src_pos < result[i].src_pos or result[i + 1].dest_pos < result[i].dest_pos:
 *                 raise ValueError("List of edit operations out of order")             # <<<<<<<<<<<<<<
 *             if result[i + 1].src_pos == result[i].src_pos and result[i + 1].dest_pos == result[i].dest_pos:
 *                 raise ValueError("Duplicated edit operation")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_List_of_edit_operations_out_of_o); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":94
 *                 raise ValueError("List of edit operations out of order")
 *             if result[i + 1].src_pos == result[i].src_pos and result[i + 1].dest_pos == result[i].dest_pos:
 *                 raise ValueError("Duplicated edit operation")             # <<<<<<<<<<<<<<
 * 
 *     result.shrink_to_fit()
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_Duplicated_edit_operation); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":147
 *     # check if edit operations span the complete string
 *     if result[0].src_begin != 0 or result[0].dest_begin != 0:
 *         raise ValueError("List of edit operations does not start at position 0")             # <<<<<<<<<<<<<<
 *     if result.back().src_end != src_len or result.back().dest_end != dest_len:
 *         raise ValueError("List of edit operations does not end at the string ends")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_List_of_edit_operations_does_not); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":149
 *         raise ValueError("List of edit operations does not start at position 0")
 *     if result.back().src_end != src_len or result.back().dest_end != dest_len:
 *         raise ValueError("List of edit operations does not end at the string ends")             # <<<<<<<<<<<<<<
 *     for i in range(0, result.size() - 1):
 *         if result[i + 1].src_begin != result[i].src_end or result[i + 1].dest_begin != result[i].dest_end:
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_List_of_edit_operations_does_not_2); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":152
 *     for i in range(0, result.size() - 1):
 *         if result[i + 1].src_begin != result[i].src_end or result[i + 1].dest_begin != result[i].dest_end:
 *             raise ValueError("List of edit operations is not continuous")             # <<<<<<<<<<<<<<
 * 
 *     result.shrink_to_fit()
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_List_of_edit_operations_is_not_c); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":213
 *         if i==2 or i==-1: return self.size
 * 
 *         raise IndexError('MatchingBlock index out of range')             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_MatchingBlock_index_out_of_range); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":354
 *         if i==2 or i==-1: return self.dest_pos
 * 
 *         raise IndexError('Editop index out of range')             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_Editop_index_out_of_range); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":477
 *         """
 *         if not (is_valid_string(source_string) and is_valid_string(destination_string)):
 *             raise TypeError("expected strings or bytes object")             # <<<<<<<<<<<<<<
 * 
 *         return editops_apply(self.editops, convert_string(source_string), convert_string(destination_string))
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_u_expected_strings_or_bytes_object); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":534
 * 
 *             if index < 0 or index >= <Py_ssize_t>self.editops.size():
 *                 raise IndexError("Editops index out of range")             # <<<<<<<<<<<<<<
 * 
 *             self.editops.erase(self.editops.begin() + index)
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_u_Editops_index_out_of_range); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":540
 *             start, stop, step = key.indices(<Py_ssize_t>self.editops.size())
 *             if step < 0:
 *                 raise ValueError("step sizes below 0 lead to an invalid order of editops")             # <<<<<<<<<<<<<<
 * 
 *             self.editops.remove_slice(start, stop, step)
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_u_step_sizes_below_0_lead_to_an_in); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":544
 *             self.editops.remove_slice(start, stop, step)
 *         else:
 *             raise TypeError("Expected index or slice")             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, key):
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_Expected_index_or_slice); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":649
 *         if i==4 or i==-1: return self.dest_end
 * 
 *         raise IndexError('Opcode index out of range')             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_u_Opcode_index_out_of_range); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":818
 * 
 *             if index < 0 or index >= <Py_ssize_t>self.opcodes.size():
 *                 raise IndexError("Opcodes index out of range")             # <<<<<<<<<<<<<<
 * 
 *             return Opcode(
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_u_Opcodes_index_out_of_range); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":828
 *             )
 *         else:
 *             raise TypeError("Expected index")             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_u_Expected_index); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd03a775, 0x914e71a, 0x451a363):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xd03a775, 0x914e71a, 0x451a363) = (dest_pos, src_pos, tag))" % __pyx_checksum
 */
  __pyx_tuple__49 = PyTuple_Pack(3, __pyx_int_218343285, __pyx_int_152364826, __pyx_int_72459107); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_tuple__52 = PyTuple_Pack(3, __pyx_int_180503197, __pyx_int_193594487, __pyx_int_218915983); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_tuple__54 = PyTuple_Pack(3, __pyx_int_176383991, __pyx_int_65325334, __pyx_int_156907547); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(2, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_tuple__56 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(2, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__57 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(2, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Editop, (type(self), 0xd03a775, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Editop__set_state(self, __pyx_state)
 */
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(2, 16, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":373
 *             self.editops = list_to_editops(editops, src_len, dest_len)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_opcodes(cls, Opcodes opcodes):
 *         """
 */
  __pyx_tuple__58 = PyTuple_Pack(3, __pyx_n_s_cls, __pyx_n_s_opcodes, __pyx_n_s_self); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance__initiali, __pyx_n_s_from_opcodes, 373, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 373, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":392
 *         return self
 * 
 *     def as_opcodes(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert to Opcodes
 */
  __pyx_tuple__59 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_opcodes); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance__initiali, __pyx_n_s_as_opcodes, 392, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 392, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":405
 *         return opcodes
 * 
 *     def as_matching_blocks(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert to matching blocks
 */
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance__initiali, __pyx_n_s_as_matching_blocks, 405, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 405, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":416
 *         return editops_to_matching_blocks(self.editops)
 * 
 *     def as_list(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert Editops to a list of tuples.
 */
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance__initiali, __pyx_n_s_as_list, 416, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 416, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":424
 *         return editops_to_list(self.editops)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         performs copy of Editops
 */
  __pyx_tuple__60 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_x); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance__initiali, __pyx_n_s_copy, 424, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 424, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":432
 *         return x
 * 
 *     def inverse(self):             # <<<<<<<<<<<<<<
 *         """
 *         Invert Editops, so it describes how to transform the destination string to
 */
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance__initiali, __pyx_n_s_inverse, 432, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 432, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":459
 *         return x
 * 
 *     def apply(self, source_string, destination_string):             # <<<<<<<<<<<<<<
 *         """
 *         apply editops to source_string
 */
  __pyx_tuple__61 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_source_string, __pyx_n_s_destination_string); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance__initiali, __pyx_n_s_apply, 459, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 459, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":481
 *         return editops_apply(self.editops, convert_string(source_string), convert_string(destination_string))
 * 
 *     def remove_subsequence(self, Editops subsequence):             # <<<<<<<<<<<<<<
 *         """
 *         remove a subsequence
 */
  __pyx_tuple__62 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_subsequence, __pyx_n_s_x); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance__initiali, __pyx_n_s_remove_subsequence, 481, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 481, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.editops cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(2, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.editops cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.editops cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(2, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(2, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Opcode, (type(self), 0xac2429d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Opcode__set_state(self, __pyx_state)
 */
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(2, 16, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":673
 *             self.opcodes = list_to_opcodes(opcodes, src_len, dest_len)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_editops(cls, Editops editops):
 *         """
 */
  __pyx_tuple__63 = PyTuple_Pack(3, __pyx_n_s_cls, __pyx_n_s_editops, __pyx_n_s_self); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance__initiali, __pyx_n_s_from_editops, 673, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 673, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":692
 *         return self
 * 
 *     def as_editops(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert to Editops
 */
  __pyx_tuple__64 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_editops); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance__initiali, __pyx_n_s_as_editops, 692, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 692, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":705
 *         return editops
 * 
 *     def as_matching_blocks(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert to matching blocks
 */
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance__initiali, __pyx_n_s_as_matching_blocks, 705, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 705, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":716
 *         return opcodes_to_matching_blocks(self.opcodes)
 * 
 *     def as_list(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert Opcodes to a list of tuples, which is compatible
 */
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance__initiali, __pyx_n_s_as_list, 716, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 716, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":725
 *         return opcodes_to_list(self.opcodes)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         performs copy of Opcodes
 */
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance__initiali, __pyx_n_s_copy, 725, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 725, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":733
 *         return x
 * 
 *     def inverse(self):             # <<<<<<<<<<<<<<
 *         """
 *         Invert Opcodes, so it describes how to transform the destination string to
 */
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance__initiali, __pyx_n_s_inverse, 733, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 733, __pyx_L1_error)

  /* "rapidfuzz/distance/_initialize_cpp.pyx":762
 *         return x
 * 
 *     def apply(self, source_string, destination_string):             # <<<<<<<<<<<<<<
 *         """
 *         apply opcodes to source_string
 */
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance__initiali, __pyx_n_s_apply, 762, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 762, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.opcodes cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(2, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.opcodes cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.opcodes cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(2, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(2, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ScoreAlignment, (type(self), 0xa8367f7, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ScoreAlignment__set_state(self, __pyx_state)
 */
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_Editop(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__65 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Editop, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Opcode, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_ScoreAlignment, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_keys.method_name = &__pyx_n_s_keys;
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_65325334 = PyInt_FromLong(65325334L); if (unlikely(!__pyx_int_65325334)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_72459107 = PyInt_FromLong(72459107L); if (unlikely(!__pyx_int_72459107)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_152364826 = PyInt_FromLong(152364826L); if (unlikely(!__pyx_int_152364826)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_156907547 = PyInt_FromLong(156907547L); if (unlikely(!__pyx_int_156907547)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_176383991 = PyInt_FromLong(176383991L); if (unlikely(!__pyx_int_176383991)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_180503197 = PyInt_FromLong(180503197L); if (unlikely(!__pyx_int_180503197)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_193594487 = PyInt_FromLong(193594487L); if (unlikely(!__pyx_int_193594487)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_218343285 = PyInt_FromLong(218343285L); if (unlikely(!__pyx_int_218343285)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_218915983 = PyInt_FromLong(218915983L); if (unlikely(!__pyx_int_218915983)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editops_spec, NULL); if (unlikely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops)) __PYX_ERR(0, 364, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editops_spec, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  #else
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops = &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editops;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops->tp_dictoffset && __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Editops_2, (PyObject *) __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcodes_spec, NULL); if (unlikely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes)) __PYX_ERR(0, 661, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcodes_spec, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes) < 0) __PYX_ERR(0, 661, __pyx_L1_error)
  #else
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes = &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcodes;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes) < 0) __PYX_ERR(0, 661, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes->tp_dictoffset && __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Opcodes_2, (PyObject *) __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes) < 0) __PYX_ERR(0, 661, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes) < 0) __PYX_ERR(0, 661, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment_spec, NULL); if (unlikely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment)) __PYX_ERR(0, 845, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment_spec, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment) < 0) __PYX_ERR(0, 845, __pyx_L1_error)
  #else
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment = &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment) < 0) __PYX_ERR(0, 845, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment->tp_dictoffset && __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ScoreAlignment, (PyObject *) __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment) < 0) __PYX_ERR(0, 845, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment) < 0) __PYX_ERR(0, 845, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock_spec, NULL); if (unlikely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock)) __PYX_ERR(0, 180, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock_spec, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  #else
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock = &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock->tp_dictoffset && __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MatchingBlock, (PyObject *) __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_MatchingBlock) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editop_spec, NULL); if (unlikely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop)) __PYX_ERR(0, 309, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editop_spec, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop) < 0) __PYX_ERR(0, 309, __pyx_L1_error)
  #else
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop = &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Editop;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop) < 0) __PYX_ERR(0, 309, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop->tp_dictoffset && __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Editop, (PyObject *) __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop) < 0) __PYX_ERR(0, 309, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop) < 0) __PYX_ERR(0, 309, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcode_spec, NULL); if (unlikely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode)) __PYX_ERR(0, 585, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcode_spec, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode) < 0) __PYX_ERR(0, 585, __pyx_L1_error)
  #else
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode = &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp_Opcode;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode) < 0) __PYX_ERR(0, 585, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode->tp_dictoffset && __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Opcode, (PyObject *) __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode) < 0) __PYX_ERR(0, 585, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode) < 0) __PYX_ERR(0, 585, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter___spec, NULL); if (unlikely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__)) __PYX_ERR(0, 215, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter___spec, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__) < 0) __PYX_ERR(0, 215, __pyx_L1_error)
  #else
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__ = &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__) < 0) __PYX_ERR(0, 215, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__->tp_dictoffset && __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct____iter__->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter___spec, NULL); if (unlikely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__)) __PYX_ERR(0, 356, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter___spec, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__) < 0) __PYX_ERR(0, 356, __pyx_L1_error)
  #else
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__ = &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__) < 0) __PYX_ERR(0, 356, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__->tp_dictoffset && __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_1___iter__->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter___spec, NULL); if (unlikely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__)) __PYX_ERR(0, 573, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter___spec, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__) < 0) __PYX_ERR(0, 573, __pyx_L1_error)
  #else
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__ = &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__) < 0) __PYX_ERR(0, 573, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__->tp_dictoffset && __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_2___iter__->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr)) __PYX_ERR(0, 583, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr_spec, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 583, __pyx_L1_error)
  #else
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr = &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 583, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr->tp_dictoffset && __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_3_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter___spec, NULL); if (unlikely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__)) __PYX_ERR(0, 651, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter___spec, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__) < 0) __PYX_ERR(0, 651, __pyx_L1_error)
  #else
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__ = &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__) < 0) __PYX_ERR(0, 651, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__->tp_dictoffset && __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_4___iter__->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter___spec, NULL); if (unlikely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__)) __PYX_ERR(0, 830, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter___spec, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__) < 0) __PYX_ERR(0, 830, __pyx_L1_error)
  #else
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__ = &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__) < 0) __PYX_ERR(0, 830, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__->tp_dictoffset && __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_5___iter__->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr)) __PYX_ERR(0, 842, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr_spec, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr) < 0) __PYX_ERR(0, 842, __pyx_L1_error)
  #else
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr = &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr) < 0) __PYX_ERR(0, 842, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr->tp_dictoffset && __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_6_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter___spec, NULL); if (unlikely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__)) __PYX_ERR(0, 885, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter___spec, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__) < 0) __PYX_ERR(0, 885, __pyx_L1_error)
  #else
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__ = &__pyx_type_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__) < 0) __PYX_ERR(0, 885, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__->tp_dictoffset && __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp___pyx_scope_struct_7___iter__->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_0_11(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__initialize_cpp(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__initialize_cpp},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "_initialize_cpp",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_initialize_cpp(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_initialize_cpp(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__initialize_cpp(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__initialize_cpp(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__initialize_cpp(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_initialize_cpp' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_initialize_cpp", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "_initialize_cpp" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__initialize_cpp(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_rapidfuzz__distance___initialize_cpp) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "rapidfuzz.distance._initialize_cpp")) {
      if (unlikely((PyDict_SetItemString(modules, "rapidfuzz.distance._initialize_cpp", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit__initialize_cpp(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "cpp_common.pxd":255
 *     void validate_string(object py_str, const char* err) except +
 * 
 * cdef inline bool hash_array(arr, RF_String* s_proc) except False:             # <<<<<<<<<<<<<<
 *     # TODO on Cpython this does not require any copies
 *     cdef Py_UCS4 typecode = <Py_UCS4>arr.typecode
 */
  __Pyx_TraceLine(255,0,__PYX_ERR(1, 255, __pyx_L1_error))


  /* "cpp_common.pxd":304
 * 
 * 
 * cdef inline bool hash_sequence(seq, RF_String* s_proc) except False:             # <<<<<<<<<<<<<<
 *     s_proc.length = <int64_t>len(seq)
 * 
 */
  __Pyx_TraceLine(304,0,__PYX_ERR(1, 304, __pyx_L1_error))


  /* "cpp_common.pxd":331
 *     return True
 * 
 * cdef inline bool is_none(s) noexcept:             # <<<<<<<<<<<<<<
 *     if s is None or s is pandas_NA:
 *         return True
 */
  __Pyx_TraceLine(331,0,__PYX_ERR(1, 331, __pyx_L1_error))


  /* "cpp_common.pxd":343
 * # converting strings. This has to be done carefully, since especially with preprocessor functions
 * # the none check is often required before calling the preprocessing functions to keep the current behaviour
 * cdef inline bool conv_sequence_with_none(seq, RF_String* c_seq) except False:             # <<<<<<<<<<<<<<
 *     if is_valid_string(seq):
 *         c_seq[0] = move(convert_string(seq))
 */
  __Pyx_TraceLine(343,0,__PYX_ERR(1, 343, __pyx_L1_error))


  /* "cpp_common.pxd":356
 *     return True
 * 
 * cdef inline RF_String conv_sequence(seq) except *:             # <<<<<<<<<<<<<<
 *     cdef RF_String c_seq
 *     if is_valid_string(seq):
 */
  __Pyx_TraceLine(356,0,__PYX_ERR(1, 356, __pyx_L1_error))


  /* "cpp_common.pxd":367
 *     return move(c_seq)
 * 
 * cdef inline double get_score_cutoff_f64(score_cutoff, float worst_score, float optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef float c_score_cutoff = worst_score
 * 
 */
  __Pyx_TraceLine(367,0,__PYX_ERR(1, 367, __pyx_L1_error))


  /* "cpp_common.pxd":383
 *     return c_score_cutoff
 * 
 * cdef inline int64_t get_score_cutoff_i64(score_cutoff, int64_t worst_score, int64_t optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef int64_t c_score_cutoff = worst_score
 * 
 */
  __Pyx_TraceLine(383,0,__PYX_ERR(1, 383, __pyx_L1_error))


  /* "cpp_common.pxd":398
 *     return c_score_cutoff
 * 
 * cdef inline size_t get_score_cutoff_size_t(score_cutoff, size_t worst_score, size_t optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef uint64_t c_score_cutoff = worst_score
 * 
 */
  __Pyx_TraceLine(398,0,__PYX_ERR(1, 398, __pyx_L1_error))


  /* "cpp_common.pxd":417
 *     return <size_t>c_score_cutoff
 * 
 * cdef inline bool preprocess_strings(s1, s2, processor, RF_StringWrapper* s1_proc, RF_StringWrapper* s2_proc) except False:             # <<<<<<<<<<<<<<
 *     cdef RF_Preprocessor* preprocess_context = NULL
 * 
 */
  __Pyx_TraceLine(417,0,__PYX_ERR(1, 417, __pyx_L1_error))


  /* "cpp_common.pxd":439
 *     return True
 * 
 * cdef inline bool NoKwargsInit(RF_Kwargs* self, dict kwargs) except False:             # <<<<<<<<<<<<<<
 *     if len(kwargs):
 *         raise TypeError("Got unexpected keyword arguments: ", ", ".join(kwargs.keys()))
 */
  __Pyx_TraceLine(439,0,__PYX_ERR(1, 439, __pyx_L1_error))


  /* "cpp_common.pxd":447
 *     return True
 * 
 * cdef inline RF_Scorer CreateScorerContext(RF_KwargsInit kwargs_init, RF_GetScorerFlags get_scorer_flags, RF_ScorerFuncInit scorer_func_init, RF_UncachedScorerFunc uncached_scorer_func) noexcept:             # <<<<<<<<<<<<<<
 *     cdef RF_Scorer context
 *     context.version = SCORER_STRUCT_VERSION
 */
  __Pyx_TraceLine(447,0,__PYX_ERR(1, 447, __pyx_L1_error))


  /* "cpp_common.pxd":456
 *     return context
 * 
 * cdef inline void SetFuncAttrs(cpp_func, py_func) except *:             # <<<<<<<<<<<<<<
 *     cpp_func.__name__ = py_func.__name__
 *     cpp_func.__qualname__ = py_func.__qualname__
 */
  __Pyx_TraceLine(456,0,__PYX_ERR(1, 456, __pyx_L1_error))


  /* "cpp_common.pxd":461
 *     cpp_func.__doc__ = py_func.__doc__
 * 
 * cdef inline void SetScorerAttrs(cpp_func, py_func, RF_Scorer* context) except *:             # <<<<<<<<<<<<<<
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Scorer = PyCapsule_New(context, NULL, NULL)
 */
  __Pyx_TraceLine(461,0,__PYX_ERR(1, 461, __pyx_L1_error))


  /* "cpp_common.pxd":469
 *     cpp_func._RF_OriginalScorer = cpp_func
 * 
 * cdef inline RF_Preprocessor CreateProcessorContext(RF_Preprocess preprocess) except *:             # <<<<<<<<<<<<<<
 *     cdef RF_Preprocessor context
 *     context.version = PREPROCESSOR_STRUCT_VERSION
 */
  __Pyx_TraceLine(469,0,__PYX_ERR(1, 469, __pyx_L1_error))


  /* "cpp_common.pxd":475
 *     return context
 * 
 * cdef inline void SetProcessorAttrs(cpp_func, py_func, RF_Preprocessor* context) except *:             # <<<<<<<<<<<<<<
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Preprocess = PyCapsule_New(context, NULL, NULL)
 */
  __Pyx_TraceLine(475,0,__PYX_ERR(1, 475, __pyx_L1_error))


  /* "rapidfuzz/distance/_initialize_cpp.pyx":27
 *     object editops_apply(const RfEditops& ops, const RF_String& str1, const RF_String& str2) except + nogil
 * 
 * cdef str edit_type_to_str(EditType edit_type):             # <<<<<<<<<<<<<<
 *     if edit_type == EditType.Insert:
 *         return "insert"
 */
  __Pyx_TraceLine(27,0,__PYX_ERR(0, 27, __pyx_L1_error))


  /* "rapidfuzz/distance/_initialize_cpp.pyx":37
 *         return "equal"
 * 
 * cdef EditType str_to_edit_type(edit_type) except *:             # <<<<<<<<<<<<<<
 *     # todo fix compiler warning about potentially uninitialized return value
 *     if edit_type == "insert":
 */
  __Pyx_TraceLine(37,0,__PYX_ERR(0, 37, __pyx_L1_error))


  /* "rapidfuzz/distance/_initialize_cpp.pyx":50
 *         raise ValueError("Invalid Edit Type")
 * 
 * cdef RfEditops list_to_editops(ops, size_t src_len, size_t dest_len) except *:             # <<<<<<<<<<<<<<
 *     cdef RfEditops result
 *     cdef size_t i
 */
  __Pyx_TraceLine(50,0,__PYX_ERR(0, 50, __pyx_L1_error))


  /* "rapidfuzz/distance/_initialize_cpp.pyx":99
 *     return result
 * 
 * cdef RfOpcodes list_to_opcodes(ops, size_t src_len, size_t dest_len) except *:             # <<<<<<<<<<<<<<
 *     cdef RfOpcodes result
 *     cdef size_t i
 */
  __Pyx_TraceLine(99,0,__PYX_ERR(0, 99, __pyx_L1_error))


  /* "rapidfuzz/distance/_initialize_cpp.pyx":157
 *     return result
 * 
 * cdef list editops_to_list(const RfEditops& ops):             # <<<<<<<<<<<<<<
 *     cdef size_t op_count = ops.size()
 *     cdef list result_list = PyList_New(<Py_ssize_t>op_count)
 */
  __Pyx_TraceLine(157,0,__PYX_ERR(0, 157, __pyx_L1_error))


  /* "rapidfuzz/distance/_initialize_cpp.pyx":167
 *     return result_list
 * 
 * cdef list opcodes_to_list(const RfOpcodes& ops):             # <<<<<<<<<<<<<<
 *     cdef size_t op_count = ops.size()
 *     cdef list result_list = PyList_New(<Py_ssize_t>op_count)
 */
  __Pyx_TraceLine(167,0,__PYX_ERR(0, 167, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(2, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_14__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_MatchingBlock___reduce_cython, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_TraceLine(3,0,__PYX_ERR(2, 3, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_13MatchingBlock_16__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_MatchingBlock___setstate_cython, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/_initialize_cpp.pyx":223
 *         return f"MatchingBlock(a={self.a}, b={self.b}, size={self.size})"
 * 
 * cdef list editops_to_matching_blocks(const RfEditops& ops):             # <<<<<<<<<<<<<<
 *     cdef MatchingBlock result_item
 *     cdef Py_ssize_t block_num = 0
 */
  __Pyx_TraceLine(223,0,__PYX_ERR(0, 223, __pyx_L1_error))


  /* "rapidfuzz/distance/_initialize_cpp.pyx":284
 *     return result_list
 * 
 * cdef list opcodes_to_matching_blocks(const RfOpcodes& ops):             # <<<<<<<<<<<<<<
 *     cdef MatchingBlock result_item
 *     cdef Py_ssize_t block_num = 0
 */
  __Pyx_TraceLine(284,0,__PYX_ERR(0, 284, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(2, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_6Editop_14__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Editop___reduce_cython, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Editop, (type(self), 0xd03a775, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Editop__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(2, 16, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_6Editop_16__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Editop___setstate_cython, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__17)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(2, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editop);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":373
 *             self.editops = list_to_editops(editops, src_len, dest_len)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_opcodes(cls, Opcodes opcodes):
 *         """
 */
  __Pyx_TraceLine(373,0,__PYX_ERR(0, 373, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_3from_opcodes, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Editops_from_opcodes, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops, __pyx_n_s_from_opcodes, __pyx_t_2) < 0) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops, __pyx_n_s_from_opcodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops, __pyx_n_s_from_opcodes, __pyx_t_3) < 0) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":392
 *         return self
 * 
 *     def as_opcodes(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert to Opcodes
 */
  __Pyx_TraceLine(392,0,__PYX_ERR(0, 392, __pyx_L1_error))
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_5as_opcodes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Editops_as_opcodes, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops, __pyx_n_s_as_opcodes, __pyx_t_3) < 0) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":405
 *         return opcodes
 * 
 *     def as_matching_blocks(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert to matching blocks
 */
  __Pyx_TraceLine(405,0,__PYX_ERR(0, 405, __pyx_L1_error))
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_7as_matching_blocks, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Editops_as_matching_blocks, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops, __pyx_n_s_as_matching_blocks, __pyx_t_3) < 0) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":416
 *         return editops_to_matching_blocks(self.editops)
 * 
 *     def as_list(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert Editops to a list of tuples.
 */
  __Pyx_TraceLine(416,0,__PYX_ERR(0, 416, __pyx_L1_error))
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_9as_list, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Editops_as_list, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops, __pyx_n_s_as_list, __pyx_t_3) < 0) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":424
 *         return editops_to_list(self.editops)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         performs copy of Editops
 */
  __Pyx_TraceLine(424,0,__PYX_ERR(0, 424, __pyx_L1_error))
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_11copy, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Editops_copy, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops, __pyx_n_s_copy, __pyx_t_3) < 0) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":432
 *         return x
 * 
 *     def inverse(self):             # <<<<<<<<<<<<<<
 *         """
 *         Invert Editops, so it describes how to transform the destination string to
 */
  __Pyx_TraceLine(432,0,__PYX_ERR(0, 432, __pyx_L1_error))
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_13inverse, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Editops_inverse, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__23)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops, __pyx_n_s_inverse, __pyx_t_3) < 0) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":459
 *         return x
 * 
 *     def apply(self, source_string, destination_string):             # <<<<<<<<<<<<<<
 *         """
 *         apply editops to source_string
 */
  __Pyx_TraceLine(459,0,__PYX_ERR(0, 459, __pyx_L1_error))
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_15apply, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Editops_apply, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__24)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops, __pyx_n_s_apply, __pyx_t_3) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":481
 *         return editops_apply(self.editops, convert_string(source_string), convert_string(destination_string))
 * 
 *     def remove_subsequence(self, Editops subsequence):             # <<<<<<<<<<<<<<
 *         """
 *         remove a subsequence
 */
  __Pyx_TraceLine(481,0,__PYX_ERR(0, 481, __pyx_L1_error))
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_17remove_subsequence, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Editops_remove_subsequence, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops, __pyx_n_s_remove_subsequence, __pyx_t_3) < 0) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.editops cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(2, 1, __pyx_L1_error))
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_32__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Editops___reduce_cython, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.editops cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.editops cannot be converted to a Python object for pickling"
 */
  __Pyx_TraceLine(3,0,__PYX_ERR(2, 3, __pyx_L1_error))
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Editops_34__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Editops___setstate_cython, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(2, 1, __pyx_L1_error))
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_14__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Opcode___reduce_cython, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Opcode, (type(self), 0xac2429d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Opcode__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(2, 16, __pyx_L1_error))
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_6Opcode_16__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Opcode___setstate_cython, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(2, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcode);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":673
 *             self.opcodes = list_to_opcodes(opcodes, src_len, dest_len)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_editops(cls, Editops editops):
 *         """
 */
  __Pyx_TraceLine(673,0,__PYX_ERR(0, 673, __pyx_L1_error))
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_3from_editops, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Opcodes_from_editops, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes, __pyx_n_s_from_editops, __pyx_t_3) < 0) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes);
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes, __pyx_n_s_from_editops); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes, __pyx_n_s_from_editops, __pyx_t_2) < 0) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":692
 *         return self
 * 
 *     def as_editops(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert to Editops
 */
  __Pyx_TraceLine(692,0,__PYX_ERR(0, 692, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_5as_editops, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Opcodes_as_editops, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__36)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes, __pyx_n_s_as_editops, __pyx_t_2) < 0) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":705
 *         return editops
 * 
 *     def as_matching_blocks(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert to matching blocks
 */
  __Pyx_TraceLine(705,0,__PYX_ERR(0, 705, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_7as_matching_blocks, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Opcodes_as_matching_blocks, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes, __pyx_n_s_as_matching_blocks, __pyx_t_2) < 0) __PYX_ERR(0, 705, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":716
 *         return opcodes_to_matching_blocks(self.opcodes)
 * 
 *     def as_list(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert Opcodes to a list of tuples, which is compatible
 */
  __Pyx_TraceLine(716,0,__PYX_ERR(0, 716, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_9as_list, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Opcodes_as_list, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes, __pyx_n_s_as_list, __pyx_t_2) < 0) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":725
 *         return opcodes_to_list(self.opcodes)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         performs copy of Opcodes
 */
  __Pyx_TraceLine(725,0,__PYX_ERR(0, 725, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_11copy, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Opcodes_copy, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes, __pyx_n_s_copy, __pyx_t_2) < 0) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":733
 *         return x
 * 
 *     def inverse(self):             # <<<<<<<<<<<<<<
 *         """
 *         Invert Opcodes, so it describes how to transform the destination string to
 */
  __Pyx_TraceLine(733,0,__PYX_ERR(0, 733, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_13inverse, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Opcodes_inverse, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes, __pyx_n_s_inverse, __pyx_t_2) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes);

  /* "rapidfuzz/distance/_initialize_cpp.pyx":762
 *         return x
 * 
 *     def apply(self, source_string, destination_string):             # <<<<<<<<<<<<<<
 *         """
 *         apply opcodes to source_string
 */
  __Pyx_TraceLine(762,0,__PYX_ERR(0, 762, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_15apply, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Opcodes_apply, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes, __pyx_n_s_apply, __pyx_t_2) < 0) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.opcodes cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(2, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_28__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Opcodes___reduce_cython, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.opcodes cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.opcodes cannot be converted to a Python object for pickling"
 */
  __Pyx_TraceLine(3,0,__PYX_ERR(2, 3, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_7Opcodes_30__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Opcodes___setstate_cython, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(2, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_14__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ScoreAlignment___reduce_cython, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ScoreAlignment, (type(self), 0xa8367f7, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ScoreAlignment__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(2, 16, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_14ScoreAlignment_16__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ScoreAlignment___setstate_cython, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(2, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Editop(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(2, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_1__pyx_unpickle_Editop, 0, __pyx_n_s_pyx_unpickle_Editop, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Editop, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Editop__set_state(<Editop> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Editop__set_state(Editop __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.dest_pos = __pyx_state[0]; __pyx_result.src_pos = __pyx_state[1]; __pyx_result.tag = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(2, 11, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __pyx_unpickle_Opcode(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(2, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_3__pyx_unpickle_Opcode, 0, __pyx_n_s_pyx_unpickle_Opcode, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__51)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Opcode, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Opcode__set_state(<Opcode> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Opcode__set_state(Opcode __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.dest_end = __pyx_state[0]; __pyx_result.dest_start = __pyx_state[1]; __pyx_result.src_end = __pyx_state[2]; __pyx_result.src_start = __pyx_state[3]; __pyx_result.tag = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(2, 11, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __pyx_unpickle_ScoreAlignment(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(2, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_15_initialize_cpp_5__pyx_unpickle_ScoreAlignment, 0, __pyx_n_s_pyx_unpickle_ScoreAlignment, NULL, __pyx_n_s_rapidfuzz_distance__initialize_c, __pyx_d, ((PyObject *)__pyx_codeobj__53)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_ScoreAlignment, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_ScoreAlignment__set_state(<ScoreAlignment> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ScoreAlignment__set_state(ScoreAlignment __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.dest_end = __pyx_state[0]; __pyx_result.dest_start = __pyx_state[1]; __pyx_result.score = __pyx_state[2]; __pyx_result.src_end = __pyx_state[3]; __pyx_result.src_start = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(2, 11, __pyx_L1_error))


  /* "rapidfuzz/distance/_initialize_cpp.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * # cython: language_level=3, binding=True, linetrace=True
 * 
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(0, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Editops_inverse_line_432, __pyx_kp_u_Invert_Editops_so_it_describes) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Opcodes_inverse_line_733, __pyx_kp_u_Invert_Opcodes_so_it_describes) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init rapidfuzz.distance._initialize_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init rapidfuzz.distance._initialize_cpp");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    __Pyx_EnterTracing(tstate);
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    __Pyx_LeaveTracing(tstate);
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return __Pyx_IsTracing(tstate, 0, 0) && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyIntCompare */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 1;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        return (a == b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) == 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 0;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 0;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal == 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        return ((double)a == (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    CYTHON_UNUSED_VAR(clineno);
    CYTHON_UNUSED_VAR(lineno);
    CYTHON_UNUSED_VAR(filename);
    CYTHON_MAYBE_UNUSED_VAR(nogil);
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(0);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result;
    if (unlikely(!s)) return NULL;
    result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if PY_VERSION_HEX >= 0x030d0000
            if (unlikely(PyUnicode_CopyCharacters(result_uval, char_pos, uval, 0, ulength) < 0)) goto bad;
            #elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSsize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_size_t(size_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(size_t)*3+2];
    char *dpos, *end = digits + sizeof(size_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    size_t remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (size_t) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (size_t) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (size_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* GetAttr3 */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
#endif
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    int res = PyObject_GetOptionalAttr(o, n, &r);
    return (res != 0) ? r : __Pyx_NewRef(d);
#else
  #if CYTHON_USE_TYPE_SLOTS
    if (likely(PyString_Check(n))) {
        r = __Pyx_PyObject_GetAttrStrNoError(o, n);
        if (unlikely(!r) && likely(!PyErr_Occurred())) {
            r = __Pyx_NewRef(d);
        }
        return r;
    }
  #endif
    r = PyObject_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
#endif
}

/* UnpackUnboundCMethod */
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *args, PyObject *kwargs) {
    PyObject *result;
    PyObject *selfless_args = PyTuple_GetSlice(args, 1, PyTuple_Size(args));
    if (unlikely(!selfless_args)) return NULL;
    result = PyObject_Call(method, selfless_args, kwargs);
    Py_DECREF(selfless_args);
    return result;
}
static PyMethodDef __Pyx_UnboundCMethod_Def = {
     "CythonUnboundCMethod",
     __PYX_REINTERPRET_FUNCION(PyCFunction, __Pyx_SelflessCall),
     METH_VARARGS | METH_KEYWORDS,
     NULL
};
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #else
    if (likely(!__Pyx_CyOrPyCFunction_Check(method)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    } else
#endif
#if CYTHON_COMPILING_IN_PYPY
#else
    if (PyCFunction_Check(method))
#endif
    {
        PyObject *self;
        int self_found;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        self = PyObject_GetAttrString(method, "__self__");
        if (!self) {
            PyErr_Clear();
        }
#else
        self = PyCFunction_GET_SELF(method);
#endif
        self_found = (self && self != Py_None);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        Py_XDECREF(self);
#endif
        if (self_found) {
            PyObject *unbound_method = PyCFunction_New(&__Pyx_UnboundCMethod_Def, method);
            if (unlikely(!unbound_method)) return -1;
            Py_DECREF(method);
            target->method = unbound_method;
        }
    }
    return 0;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_keys */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* pep479 */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen) {
    PyObject *exc, *val, *tb, *cur_exc;
    __Pyx_PyThreadState_declare
    #ifdef __Pyx_StopAsyncIteration_USED
    int is_async_stopiteration = 0;
    #endif
    CYTHON_MAYBE_UNUSED_VAR(in_async_gen);
    cur_exc = PyErr_Occurred();
    if (likely(!__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopIteration))) {
        #ifdef __Pyx_StopAsyncIteration_USED
        if (in_async_gen && unlikely(__Pyx_PyErr_GivenExceptionMatches(cur_exc, __Pyx_PyExc_StopAsyncIteration))) {
            is_async_stopiteration = 1;
        } else
        #endif
            return;
    }
    __Pyx_PyThreadState_assign
    __Pyx_GetException(&exc, &val, &tb);
    Py_XDECREF(exc);
    Py_XDECREF(val);
    Py_XDECREF(tb);
    PyErr_SetString(PyExc_RuntimeError,
        #ifdef __Pyx_StopAsyncIteration_USED
        is_async_stopiteration ? "async generator raised StopAsyncIteration" :
        in_async_gen ? "async generator raised StopIteration" :
        #endif
        "generator raised StopIteration");
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyUnicode_Unicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {
    if (unlikely(obj == Py_None))
        obj = __pyx_kp_u_None;
    return __Pyx_NewRef(obj);
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(Py_ssize_t)*3+2];
    char *dpos, *end = digits + sizeof(Py_ssize_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    Py_ssize_t remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_ssize_t neg_one = (Py_ssize_t) -1, const_zero = (Py_ssize_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (Py_ssize_t) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (Py_ssize_t) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (Py_ssize_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* RaiseUnboundLocalError */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* UnicodeConcatInPlace */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
static int
__Pyx_unicode_modifiable(PyObject *unicode)
{
    if (Py_REFCNT(unicode) != 1)
        return 0;
    if (!PyUnicode_CheckExact(unicode))
        return 0;
    if (PyUnicode_CHECK_INTERNED(unicode))
        return 0;
    return 1;
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    ) {
    PyObject *left = *p_left;
    Py_ssize_t left_len, right_len, new_len;
    if (unlikely(__Pyx_PyUnicode_READY(left) == -1))
        return NULL;
    if (unlikely(__Pyx_PyUnicode_READY(right) == -1))
        return NULL;
    left_len = PyUnicode_GET_LENGTH(left);
    if (left_len == 0) {
        Py_INCREF(right);
        return right;
    }
    right_len = PyUnicode_GET_LENGTH(right);
    if (right_len == 0) {
        Py_INCREF(left);
        return left;
    }
    if (unlikely(left_len > PY_SSIZE_T_MAX - right_len)) {
        PyErr_SetString(PyExc_OverflowError,
                        "strings are too large to concat");
        return NULL;
    }
    new_len = left_len + right_len;
    if (__Pyx_unicode_modifiable(left)
            && PyUnicode_CheckExact(right)
            && PyUnicode_KIND(right) <= PyUnicode_KIND(left)
            && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {
        int ret;
        __Pyx_GIVEREF(*p_left);
        ret = PyUnicode_Resize(p_left, new_len);
        __Pyx_GOTREF(*p_left);
        if (unlikely(ret != 0))
            return NULL;
        #if PY_VERSION_HEX >= 0x030d0000
        if (unlikely(PyUnicode_CopyCharacters(*p_left, left_len, right, 0, right_len) < 0)) return NULL;
        #else
        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);
        #endif
        __Pyx_INCREF(*p_left);
        __Pyx_GIVEREF(*p_left);
        return *p_left;
    } else {
        return __Pyx_PyUnicode_Concat(left, right);
    }
  }
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__50);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (!r) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !(CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY)
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_11
#define __PYX_HAVE_RT_ImportType_3_0_11
static PyTypeObject *__Pyx_ImportType_3_0_11(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_11 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_11 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_11 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if PY_VERSION_HEX >= 0x030d00A4
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (unlikely(methoddescr_type == NULL)) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (unlikely(!meth)) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* GetNameInClass */
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    PyObject *dict;
    assert(PyType_Check(nmspace));
#if CYTHON_USE_TYPE_SLOTS
    dict = ((PyTypeObject*)nmspace)->tp_dict;
    Py_XINCREF(dict);
#else
    dict = PyObject_GetAttr(nmspace, __pyx_n_s_dict);
#endif
    if (likely(dict)) {
        result = PyObject_GetItem(dict, name);
        Py_DECREF(dict);
        if (result) {
            return result;
        }
    }
    PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* UnicodeAsUCS4 */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject* x) {
   Py_ssize_t length;
   #if CYTHON_PEP393_ENABLED
   length = PyUnicode_GET_LENGTH(x);
   if (likely(length == 1)) {
       return PyUnicode_READ_CHAR(x, 0);
   }
   #else
   length = PyUnicode_GET_SIZE(x);
   if (likely(length == 1)) {
       return PyUnicode_AS_UNICODE(x)[0];
   }
   #if Py_UNICODE_SIZE == 2
   else if (PyUnicode_GET_SIZE(x) == 2) {
       Py_UCS4 high_val = PyUnicode_AS_UNICODE(x)[0];
       if (high_val >= 0xD800 && high_val <= 0xDBFF) {
           Py_UCS4 low_val = PyUnicode_AS_UNICODE(x)[1];
           if (low_val >= 0xDC00 && low_val <= 0xDFFF) {
               return 0x10000 + (((high_val & ((1<<10)-1)) << 10) | (low_val & ((1<<10)-1)));
           }
       }
   }
   #endif
   #endif
   PyErr_Format(PyExc_ValueError,
                "only single character unicode strings can be converted to Py_UCS4, "
                "got length %" CYTHON_FORMAT_SSIZE_T "d", length);
   return (Py_UCS4)-1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (size_t) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(size_t) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(size_t) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        size_t val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (size_t) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (size_t) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (size_t) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (size_t) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((size_t) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((size_t) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (size_t) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (long) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(long) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(long) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        long val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (long) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (long) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (long) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (long) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((long) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((long) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int64_t));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int64_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int64_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 2 * PyLong_SHIFT)) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 3 * PyLong_SHIFT)) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 4 * PyLong_SHIFT)) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int64_t) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int64_t) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int64_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int64_t) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int64_t) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int64_t val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int64_t) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int64_t) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int64_t) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int64_t) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int64_t) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int64_t) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int64_t) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int64_t) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int64_t) 1) << (sizeof(int64_t) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int64_t) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(uint64_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(uint64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT)) {
                            return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(uint64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT)) {
                            return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(uint64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT)) {
                            return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (uint64_t) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(uint64_t) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(uint64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(uint64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(uint64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(uint64_t) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(uint64_t) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        uint64_t val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (uint64_t) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (uint64_t) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (uint64_t) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (uint64_t) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(uint64_t) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((uint64_t) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(uint64_t) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((uint64_t) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((uint64_t) 1) << (sizeof(uint64_t) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (uint64_t) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* ObjectAsUCS4 */
static Py_UCS4 __Pyx__PyObject_AsPy_UCS4_raise_error(long ival) {
   if (ival < 0) {
       if (!PyErr_Occurred())
           PyErr_SetString(PyExc_OverflowError,
                           "cannot convert negative value to Py_UCS4");
   } else {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to Py_UCS4");
   }
   return (Py_UCS4)-1;
}
static Py_UCS4 __Pyx__PyObject_AsPy_UCS4(PyObject* x) {
   long ival;
   ival = __Pyx_PyInt_As_long(x);
   if (unlikely(!__Pyx_is_valid_index(ival, 1114111 + 1))) {
       return __Pyx__PyObject_AsPy_UCS4_raise_error(ival);
   }
   return (Py_UCS4)ival;
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__66);
    }
    return name;
}
#endif

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallMethod1 */
#if !(CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C00A2)
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
#endif
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
#if CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C00A2
    PyObject *args[2] = {obj, arg};
    (void) __Pyx_PyObject_GetMethod;
    (void) __Pyx_PyObject_CallOneArg;
    (void) __Pyx_PyObject_Call2Args;
    return PyObject_VectorcallMethod(method_name, args, 2 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);
#else
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
#endif
}

/* CoroutineBase */
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    CYTHON_UNUSED_VAR(__pyx_tstate);
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (likely(__Pyx_IS_TYPE(ev, (PyTypeObject*)PyExc_StopIteration))) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_CLEAR(exc_state->exc_value);
#else
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
#endif
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(__pyx_CoroutineObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(PyObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(PyObject *gen, PyObject *value, int closing) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    CYTHON_MAYBE_UNUSED_VAR(closing);
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_value) {
        #if CYTHON_COMPILING_IN_PYPY
        #else
        PyObject *exc_tb;
        #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
        exc_tb = PyException_GetTraceback(exc_state->exc_value);
        #elif PY_VERSION_HEX >= 0x030B00a4
        exc_tb = ((PyBaseExceptionObject*) exc_state->exc_value)->traceback;
        #else
        exc_tb = exc_state->exc_traceback;
        #endif
        if (exc_tb) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
            #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
            Py_DECREF(exc_tb);
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body(self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
#if CYTHON_COMPILING_IN_PYPY
    CYTHON_UNUSED_VAR(exc_state);
#else
    PyObject *exc_tb;
    #if PY_VERSION_HEX >= 0x030B00a4
    if (!exc_state->exc_value) return;
    exc_tb = PyException_GetTraceback(exc_state->exc_value);
    #else
    exc_tb = exc_state->exc_traceback;
    #endif
    if (likely(exc_tb)) {
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
        #if PY_VERSION_HEX >= 0x030B00a4
        Py_DECREF(exc_tb);
        #endif
    }
#endif
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject* gen, PyObject *retval) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
#if PY_VERSION_HEX < 0x030d00A1
            _PyGen_SetStopIterationValue(result);
#else
            if (!PyTuple_Check(result) && !PyExceptionInstance_Check(result)) {
                PyErr_SetObject(PyExc_StopIteration, result);
            } else {
                PyObject *exc = __Pyx_PyObject_CallOneArg(PyExc_StopIteration, result);
                if (likely(exc != NULL)) {
                    PyErr_SetObject(PyExc_StopIteration, exc);
                    Py_DECREF(exc);
                }
            }
#endif
        }
        Py_DECREF(result);
        result = NULL;
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (unlikely(PyErr_Occurred())) {
                PyErr_WriteUnraisable(yf);
            }
        } else {
            retval = __Pyx_PyObject_CallNoArg(meth);
            Py_DECREF(meth);
            if (unlikely(!retval))
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (unlikely(PyErr_Occurred())) {
                    gen->is_running = 0;
                    return NULL;
                }
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = __Pyx_PyObject_Call(meth, args, NULL);
            } else {
                PyObject *cargs[4] = {NULL, typ, val, tb};
                ret = __Pyx_PyObject_FastCall(meth, cargs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (unlikely(!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb)))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_VISIT(exc_state->exc_value);
#else
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
#endif
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (unlikely(PyObject_CallFinalizerFromDealloc(self)))
#else
        Py_TYPE(gen)->tp_del(self);
        if (unlikely(Py_REFCNT(self) > 0))
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    __Pyx_PyHeapTypeObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (likely(--self->ob_refcnt == 0)) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_name;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_name, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_qualname;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_qualname, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, void *context)
{
    PyObject *frame = self->gi_frame;
    CYTHON_UNUSED_VAR(context);
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    #if PY_VERSION_HEX >= 0x030B00a4
    gen->gi_exc_state.exc_value = NULL;
    #else
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
    #endif
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (unlikely(!module)) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_modulename), 0, 0},
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CoroutineObject, gi_weakreflist), READONLY, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_GeneratorType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_Coroutine_dealloc},
    {Py_tp_traverse, (void *)__Pyx_Coroutine_traverse},
    {Py_tp_iter, (void *)PyObject_SelfIter},
    {Py_tp_iternext, (void *)__Pyx_Generator_Next},
    {Py_tp_methods, (void *)__pyx_Generator_methods},
    {Py_tp_members, (void *)__pyx_Generator_memberlist},
    {Py_tp_getset, (void *)__pyx_Generator_getsets},
    {Py_tp_getattro, (void *) __Pyx_PyObject_GenericGetAttrNoDict},
#if CYTHON_USE_TP_FINALIZE
    {Py_tp_finalize, (void *)__Pyx_Coroutine_del},
#endif
    {0, 0},
};
static PyType_Spec __pyx_GeneratorType_spec = {
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    __pyx_GeneratorType_slots
};
#else
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if PY_VERSION_HEX >= 0x030d00A4
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_Generator_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_GeneratorType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_GeneratorType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
#endif
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
