/* Generated by Cython 3.0.11 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_11" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x03000BF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__;  (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__rapidfuzz__distance__metrics_cpp
#define __PYX_HAVE_API__rapidfuzz__distance__metrics_cpp
/* Early includes */
#include <stdint.h>
#include "rapidfuzz.h"
#include <string.h>
#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>
#include <math.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <cmath>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <vector>
#include "rapidfuzz/details/types.hpp"
#include "cpp_common.hpp"
#include "metrics.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "src/rapidfuzz/distance/metrics_cpp.pyx",
  "./src/rapidfuzz/cpp_common.pxd",
  "type.pxd",
  "src/rapidfuzz/distance/_initialize_cpp.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* EnumClassDecl.proto */
#if defined (_MSC_VER)
  #if _MSC_VER >= 1910
    #define __PYX_ENUM_CLASS_DECL enum
  #else
    #define __PYX_ENUM_CLASS_DECL
  #endif
#else
  #define __PYX_ENUM_CLASS_DECL enum
#endif

/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops;
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes;
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment;

/* "_initialize_cpp.pxd":9
 * 
 * 
 * cdef class Editops:             # <<<<<<<<<<<<<<
 *     cdef RfEditops editops
 * 
 */
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops {
  PyObject_HEAD
  rapidfuzz::Editops editops;
};


/* "_initialize_cpp.pxd":12
 *     cdef RfEditops editops
 * 
 * cdef class Opcodes:             # <<<<<<<<<<<<<<
 *     cdef RfOpcodes opcodes
 * 
 */
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes {
  PyObject_HEAD
  rapidfuzz::Opcodes opcodes;
};


/* "_initialize_cpp.pxd":15
 *     cdef RfOpcodes opcodes
 * 
 * cdef class ScoreAlignment:             # <<<<<<<<<<<<<<
 *     cdef public object score
 *     cdef public Py_ssize_t src_start
 */
struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment {
  PyObject_HEAD
  PyObject *score;
  Py_ssize_t src_start;
  Py_ssize_t src_end;
  Py_ssize_t dest_start;
  Py_ssize_t dest_end;
};

/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
      static PyCodeObject *__pyx_frame_code = NULL;\
      CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
      int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
      if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
#if PY_VERSION_HEX >= 0x030b00a2
  #if PY_VERSION_HEX >= 0x030C00b1
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     ((!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #else
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #endif
  #define __Pyx_EnterTracing(tstate)  PyThreadState_EnterTracing(tstate)
  #define __Pyx_LeaveTracing(tstate)  PyThreadState_LeaveTracing(tstate)
#elif PY_VERSION_HEX >= 0x030a00b1
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->cframe->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->cframe->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                 || tstate->c_profilefunc != NULL);\
      } while (0)
#else
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                         || tstate->c_profilefunc != NULL);\
      } while (0)
#endif
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 1, 1)) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 1)) {\
          __Pyx_EnterTracing(tstate);\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          __Pyx_LeaveTracing(tstate);\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_EnterTracing(tstate);
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      __Pyx_LeaveTracing(tstate);
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0)) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0)) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0)) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      __Pyx_EnterTracing(tstate);
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      __Pyx_LeaveTracing(tstate);
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = __Pyx_PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              __Pyx_PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_size_t(size_t value, Py_ssize_t width, char padding_char, char format_char);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* tp_new.proto */
#define __Pyx_tp_new(type_obj, args) __Pyx_tp_new_kwargs(type_obj, args, NULL)
static CYTHON_INLINE PyObject* __Pyx_tp_new_kwargs(PyObject* type_obj, PyObject* args, PyObject* kwargs) {
    return (PyObject*) (((PyTypeObject*)type_obj)->tp_new((PyTypeObject*)type_obj, args, kwargs));
}

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_11
#define __PYX_HAVE_RT_ImportType_proto_3_0_11
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_11(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_11(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_11 {
   __Pyx_ImportType_CheckSize_Error_3_0_11 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_11 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_11 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_11(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_11 check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* UnicodeAsUCS4.proto */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject*);

/* None.proto */
#include <new>

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* ObjectAsUCS4.proto */
#define __Pyx_PyObject_AsPy_UCS4(x)\
    (likely(PyUnicode_Check(x)) ? __Pyx_PyUnicode_AsPy_UCS4(x) : __Pyx__PyObject_AsPy_UCS4(x))
static Py_UCS4 __Pyx__PyObject_AsPy_UCS4(PyObject*);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */

/* Module declarations from "libc.stdint" */

/* Module declarations from "libcpp" */

/* Module declarations from "rapidfuzz" */

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "cpython" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.pycapsule" */

/* Module declarations from "libc.stddef" */

/* Module declarations from "libc.stdlib" */

/* Module declarations from "libc.math" */

/* Module declarations from "libcpp.cmath" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "cpp_common" */
static CYTHON_INLINE bool __pyx_f_10cpp_common_hash_array(PyObject *, RF_String *); /*proto*/
static CYTHON_INLINE bool __pyx_f_10cpp_common_hash_sequence(PyObject *, RF_String *); /*proto*/
static CYTHON_INLINE bool __pyx_f_10cpp_common_is_none(PyObject *); /*proto*/
static CYTHON_INLINE RF_String __pyx_f_10cpp_common_conv_sequence(PyObject *); /*proto*/
static CYTHON_INLINE double __pyx_f_10cpp_common_get_score_cutoff_f64(PyObject *, float, float); /*proto*/
static CYTHON_INLINE size_t __pyx_f_10cpp_common_get_score_cutoff_size_t(PyObject *, size_t, size_t); /*proto*/
static CYTHON_INLINE bool __pyx_f_10cpp_common_preprocess_strings(PyObject *, PyObject *, PyObject *, RF_StringWrapper *, RF_StringWrapper *); /*proto*/
static CYTHON_INLINE bool __pyx_f_10cpp_common_NoKwargsInit(RF_Kwargs *, PyObject *); /*proto*/
static CYTHON_INLINE RF_Scorer __pyx_f_10cpp_common_CreateScorerContext(RF_KwargsInit, RF_GetScorerFlags, RF_ScorerFuncInit, RF_UncachedScorerFunc); /*proto*/
static CYTHON_INLINE void __pyx_f_10cpp_common_SetFuncAttrs(PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE void __pyx_f_10cpp_common_SetScorerAttrs(PyObject *, PyObject *, RF_Scorer *); /*proto*/

/* Module declarations from "rapidfuzz.distance._initialize_cpp" */

/* Module declarations from "rapidfuzz.distance.metrics_cpp" */
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_LevenshteinDistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_LevenshteinSimilarityContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_LevenshteinNormalizedDistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_LevenshteinNormalizedSimilarityContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_DamerauLevenshteinDistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_DamerauLevenshteinNormalizedDistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_DamerauLevenshteinSimilarityContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_DamerauLevenshteinNormalizedSimilarityContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_LCSseqDistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_LCSseqNormalizedDistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_LCSseqSimilarityContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_LCSseqNormalizedSimilarityContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_IndelDistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_IndelNormalizedDistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_IndelSimilarityContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_IndelNormalizedSimilarityContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_HammingDistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_HammingNormalizedDistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_HammingSimilarityContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_HammingNormalizedSimilarityContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_OSADistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_OSANormalizedDistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_OSASimilarityContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_OSANormalizedSimilarityContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_JaroDistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_JaroSimilarityContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_JaroWinklerDistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_JaroWinklerSimilarityContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_PostfixDistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_PostfixNormalizedDistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_PostfixSimilarityContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_PostfixNormalizedSimilarityContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_PrefixDistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_PrefixNormalizedDistanceContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_PrefixSimilarityContext;
static RF_Scorer __pyx_v_9rapidfuzz_8distance_11metrics_cpp_PrefixNormalizedSimilarityContext;
static CYTHON_INLINE void __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas(void); /*proto*/
static void __pyx_f_9rapidfuzz_8distance_11metrics_cpp_KwargsDeinit(RF_Kwargs *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_LevenshteinKwargsInit(RF_Kwargs *, PyObject *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLevenshteinDistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLevenshteinSimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLevenshteinNormalizedDistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLevenshteinNormalizedSimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsDamerauLevenshteinDistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsDamerauLevenshteinNormalizedDistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsDamerauLevenshteinSimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsDamerauLevenshteinNormalizedSimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLCSseqDistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLCSseqNormalizedDistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLCSseqSimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLCSseqNormalizedSimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsIndelDistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsIndelNormalizedDistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsIndelSimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsIndelNormalizedSimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_HammingKwargsInit(RF_Kwargs *, PyObject *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsHammingDistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsHammingNormalizedDistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsHammingSimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsHammingNormalizedSimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsOSADistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsOSANormalizedDistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsOSASimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsOSANormalizedSimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsJaroDistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsJaroSimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_JaroWinklerKwargsInit(RF_Kwargs *, PyObject *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsJaroWinklerDistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsJaroWinklerSimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPostfixDistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPostfixNormalizedDistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPostfixSimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPostfixNormalizedSimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPrefixDistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPrefixNormalizedDistance(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPrefixSimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPrefixNormalizedSimilarity(RF_Kwargs const *, RF_ScorerFlags *); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "rapidfuzz.distance.metrics_cpp"
extern int __pyx_module_is_main_rapidfuzz__distance__metrics_cpp;
int __pyx_module_is_main_rapidfuzz__distance__metrics_cpp = 0;

/* Implementation of "rapidfuzz.distance.metrics_cpp" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = " - ";
static const char __pyx_k_NA[] = "NA";
static const char __pyx_k__2[] = ", ";
static const char __pyx_k_s1[] = "s1";
static const char __pyx_k_s2[] = "s2";
static const char __pyx_k__52[] = "";
static const char __pyx_k__53[] = ".";
static const char __pyx_k__54[] = "*";
static const char __pyx_k__64[] = "?";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_msg[] = "msg";
static const char __pyx_k_ops[] = "ops";
static const char __pyx_k_pad[] = "pad";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_pandas[] = "pandas";
static const char __pyx_k_Editops[] = "Editops";
static const char __pyx_k_modules[] = "modules";
static const char __pyx_k_s1_proc[] = "s1_proc";
static const char __pyx_k_s2_proc[] = "s2_proc";
static const char __pyx_k_weights[] = "weights";
static const char __pyx_k_deletion[] = "deletion";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_typecode[] = "typecode";
static const char __pyx_k_RF_Scorer[] = "_RF_Scorer";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_insertion[] = "insertion";
static const char __pyx_k_pandas_NA[] = "pandas_NA";
static const char __pyx_k_processor[] = "processor";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_as_opcodes[] = "as_opcodes";
static const char __pyx_k_metrics_py[] = "metrics_py";
static const char __pyx_k_score_hint[] = "score_hint";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_RF_ScorerPy[] = "_RF_ScorerPy";
static const char __pyx_k_c_score_hint[] = "c_score_hint";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_osa_distance[] = "osa_distance";
static const char __pyx_k_score_cutoff[] = "score_cutoff";
static const char __pyx_k_substitution[] = "substitution";
static const char __pyx_k_RF_Preprocess[] = "_RF_Preprocess";
static const char __pyx_k_indel_editops[] = "indel_editops";
static const char __pyx_k_indel_opcodes[] = "indel_opcodes";
static const char __pyx_k_jaro_distance[] = "jaro_distance";
static const char __pyx_k_prefix_weight[] = "prefix_weight";
static const char __pyx_k_c_score_cutoff[] = "c_score_cutoff";
static const char __pyx_k_indel_distance[] = "indel_distance";
static const char __pyx_k_initialize_cpp[] = "_initialize_cpp";
static const char __pyx_k_osa_similarity[] = "osa_similarity";
static const char __pyx_k_hamming_editops[] = "hamming_editops";
static const char __pyx_k_hamming_opcodes[] = "hamming_opcodes";
static const char __pyx_k_jaro_similarity[] = "jaro_similarity";
static const char __pyx_k_lcs_seq_editops[] = "lcs_seq_editops";
static const char __pyx_k_lcs_seq_opcodes[] = "lcs_seq_opcodes";
static const char __pyx_k_prefix_distance[] = "prefix_distance";
static const char __pyx_k_hamming_distance[] = "hamming_distance";
static const char __pyx_k_indel_similarity[] = "indel_similarity";
static const char __pyx_k_lcs_seq_distance[] = "lcs_seq_distance";
static const char __pyx_k_postfix_distance[] = "postfix_distance";
static const char __pyx_k_RF_OriginalScorer[] = "_RF_OriginalScorer";
static const char __pyx_k_prefix_similarity[] = "prefix_similarity";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_hamming_similarity[] = "hamming_similarity";
static const char __pyx_k_lcs_seq_similarity[] = "lcs_seq_similarity";
static const char __pyx_k_postfix_similarity[] = "postfix_similarity";
static const char __pyx_k_levenshtein_editops[] = "levenshtein_editops";
static const char __pyx_k_levenshtein_opcodes[] = "levenshtein_opcodes";
static const char __pyx_k_levenshtein_distance[] = "levenshtein_distance";
static const char __pyx_k_jaro_winkler_distance[] = "jaro_winkler_distance";
static const char __pyx_k_levenshtein_similarity[] = "levenshtein_similarity";
static const char __pyx_k_jaro_winkler_similarity[] = "jaro_winkler_similarity";
static const char __pyx_k_osa_normalized_distance[] = "osa_normalized_distance";
static const char __pyx_k_jaro_normalized_distance[] = "jaro_normalized_distance";
static const char __pyx_k_indel_normalized_distance[] = "indel_normalized_distance";
static const char __pyx_k_osa_normalized_similarity[] = "osa_normalized_similarity";
static const char __pyx_k_jaro_normalized_similarity[] = "jaro_normalized_similarity";
static const char __pyx_k_prefix_normalized_distance[] = "prefix_normalized_distance";
static const char __pyx_k_hamming_normalized_distance[] = "hamming_normalized_distance";
static const char __pyx_k_indel_normalized_similarity[] = "indel_normalized_similarity";
static const char __pyx_k_lcs_seq_normalized_distance[] = "lcs_seq_normalized_distance";
static const char __pyx_k_postfix_normalized_distance[] = "postfix_normalized_distance";
static const char __pyx_k_damerau_levenshtein_distance[] = "damerau_levenshtein_distance";
static const char __pyx_k_prefix_normalized_similarity[] = "prefix_normalized_similarity";
static const char __pyx_k_hamming_normalized_similarity[] = "hamming_normalized_similarity";
static const char __pyx_k_lcs_seq_normalized_similarity[] = "lcs_seq_normalized_similarity";
static const char __pyx_k_postfix_normalized_similarity[] = "postfix_normalized_similarity";
static const char __pyx_k_damerau_levenshtein_similarity[] = "damerau_levenshtein_similarity";
static const char __pyx_k_rapidfuzz_distance_metrics_cpp[] = "rapidfuzz.distance.metrics_cpp";
static const char __pyx_k_levenshtein_normalized_distance[] = "levenshtein_normalized_distance";
static const char __pyx_k_Got_unexpected_keyword_arguments[] = "Got unexpected keyword arguments: ";
static const char __pyx_k_damerau_levenshtein_normalized_d[] = "damerau_levenshtein_normalized_distance";
static const char __pyx_k_damerau_levenshtein_normalized_s[] = "damerau_levenshtein_normalized_similarity";
static const char __pyx_k_jaro_winkler_normalized_distance[] = "jaro_winkler_normalized_distance";
static const char __pyx_k_jaro_winkler_normalized_similari[] = "jaro_winkler_normalized_similarity";
static const char __pyx_k_levenshtein_normalized_similarit[] = "levenshtein_normalized_similarity";
static const char __pyx_k_prefix_weight_has_to_be_in_the_r[] = "prefix_weight has to be in the range 0.0 - 1.0";
static const char __pyx_k_score_cutoff_has_to_be_in_the_ra[] = "score_cutoff has to be in the range of ";
static const char __pyx_k_src_rapidfuzz_distance_metrics_c[] = "src/rapidfuzz/distance/metrics_cpp.pyx";
/* #### Code section: decls ### */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_levenshtein_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_weights, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff, PyObject *__pyx_v_score_hint); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_2levenshtein_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_weights, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff, PyObject *__pyx_v_score_hint); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_4levenshtein_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_weights, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff, PyObject *__pyx_v_score_hint); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_6levenshtein_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_weights, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff, PyObject *__pyx_v_score_hint); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_8levenshtein_editops(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_hint); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_10levenshtein_opcodes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_hint); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_12damerau_levenshtein_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_14damerau_levenshtein_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_16damerau_levenshtein_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_18damerau_levenshtein_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_20lcs_seq_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_22lcs_seq_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_24lcs_seq_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_26lcs_seq_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_28lcs_seq_editops(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_30lcs_seq_opcodes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_32indel_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_34indel_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_36indel_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_38indel_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_40indel_editops(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_42indel_opcodes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_44hamming_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_pad, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_46hamming_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_pad, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_48hamming_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_pad, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_50hamming_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_pad, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_52hamming_editops(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_pad, PyObject *__pyx_v_processor); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_54hamming_opcodes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_pad, PyObject *__pyx_v_processor); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_56osa_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_58osa_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_60osa_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_62osa_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_64jaro_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_66jaro_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_68jaro_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_70jaro_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_72jaro_winkler_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, double __pyx_v_prefix_weight, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_74jaro_winkler_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, double __pyx_v_prefix_weight, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_76jaro_winkler_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, double __pyx_v_prefix_weight, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_78jaro_winkler_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, double __pyx_v_prefix_weight, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_80postfix_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_82postfix_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_84postfix_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_86postfix_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_88prefix_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_90prefix_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_92prefix_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_94prefix_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff); /* proto */
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, 0, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, 0, 0, 0, 0};
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops;
  PyTypeObject *__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes;
  PyTypeObject *__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyObject *__pyx_kp_u_;
  PyObject *__pyx_n_s_Editops;
  PyObject *__pyx_kp_u_Got_unexpected_keyword_arguments;
  PyObject *__pyx_n_s_MemoryError;
  PyObject *__pyx_n_s_NA;
  PyObject *__pyx_n_u_NA;
  PyObject *__pyx_n_s_RF_OriginalScorer;
  PyObject *__pyx_n_s_RF_Preprocess;
  PyObject *__pyx_n_u_RF_Preprocess;
  PyObject *__pyx_n_s_RF_Scorer;
  PyObject *__pyx_n_s_RF_ScorerPy;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_kp_u__2;
  PyObject *__pyx_n_s__52;
  PyObject *__pyx_kp_u__53;
  PyObject *__pyx_n_s__54;
  PyObject *__pyx_n_s__64;
  PyObject *__pyx_n_s_array;
  PyObject *__pyx_n_s_as_opcodes;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_c_score_cutoff;
  PyObject *__pyx_n_s_c_score_hint;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_damerau_levenshtein_distance;
  PyObject *__pyx_n_s_damerau_levenshtein_normalized_d;
  PyObject *__pyx_n_s_damerau_levenshtein_normalized_s;
  PyObject *__pyx_n_s_damerau_levenshtein_similarity;
  PyObject *__pyx_n_s_deletion;
  PyObject *__pyx_n_s_doc;
  PyObject *__pyx_n_s_get;
  PyObject *__pyx_n_s_hamming_distance;
  PyObject *__pyx_n_s_hamming_editops;
  PyObject *__pyx_n_s_hamming_normalized_distance;
  PyObject *__pyx_n_s_hamming_normalized_similarity;
  PyObject *__pyx_n_s_hamming_opcodes;
  PyObject *__pyx_n_s_hamming_similarity;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_indel_distance;
  PyObject *__pyx_n_s_indel_editops;
  PyObject *__pyx_n_s_indel_normalized_distance;
  PyObject *__pyx_n_s_indel_normalized_similarity;
  PyObject *__pyx_n_s_indel_opcodes;
  PyObject *__pyx_n_s_indel_similarity;
  PyObject *__pyx_n_s_initialize_cpp;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_insertion;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_jaro_distance;
  PyObject *__pyx_n_s_jaro_normalized_distance;
  PyObject *__pyx_n_s_jaro_normalized_similarity;
  PyObject *__pyx_n_s_jaro_similarity;
  PyObject *__pyx_n_s_jaro_winkler_distance;
  PyObject *__pyx_n_s_jaro_winkler_normalized_distance;
  PyObject *__pyx_n_s_jaro_winkler_normalized_similari;
  PyObject *__pyx_n_s_jaro_winkler_similarity;
  PyObject *__pyx_n_s_keys;
  PyObject *__pyx_n_s_lcs_seq_distance;
  PyObject *__pyx_n_s_lcs_seq_editops;
  PyObject *__pyx_n_s_lcs_seq_normalized_distance;
  PyObject *__pyx_n_s_lcs_seq_normalized_similarity;
  PyObject *__pyx_n_s_lcs_seq_opcodes;
  PyObject *__pyx_n_s_lcs_seq_similarity;
  PyObject *__pyx_n_s_levenshtein_distance;
  PyObject *__pyx_n_s_levenshtein_editops;
  PyObject *__pyx_n_s_levenshtein_normalized_distance;
  PyObject *__pyx_n_s_levenshtein_normalized_similarit;
  PyObject *__pyx_n_s_levenshtein_opcodes;
  PyObject *__pyx_n_s_levenshtein_similarity;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_metrics_py;
  PyObject *__pyx_n_s_modules;
  PyObject *__pyx_n_s_msg;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_ops;
  PyObject *__pyx_n_s_osa_distance;
  PyObject *__pyx_n_s_osa_normalized_distance;
  PyObject *__pyx_n_s_osa_normalized_similarity;
  PyObject *__pyx_n_s_osa_similarity;
  PyObject *__pyx_n_s_pad;
  PyObject *__pyx_n_u_pad;
  PyObject *__pyx_n_u_pandas;
  PyObject *__pyx_n_s_pandas_NA;
  PyObject *__pyx_n_s_postfix_distance;
  PyObject *__pyx_n_s_postfix_normalized_distance;
  PyObject *__pyx_n_s_postfix_normalized_similarity;
  PyObject *__pyx_n_s_postfix_similarity;
  PyObject *__pyx_n_s_prefix_distance;
  PyObject *__pyx_n_s_prefix_normalized_distance;
  PyObject *__pyx_n_s_prefix_normalized_similarity;
  PyObject *__pyx_n_s_prefix_similarity;
  PyObject *__pyx_n_s_prefix_weight;
  PyObject *__pyx_n_u_prefix_weight;
  PyObject *__pyx_kp_u_prefix_weight_has_to_be_in_the_r;
  PyObject *__pyx_n_s_processor;
  PyObject *__pyx_n_s_qualname;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_rapidfuzz_distance_metrics_cpp;
  PyObject *__pyx_n_s_s1;
  PyObject *__pyx_n_s_s1_proc;
  PyObject *__pyx_n_s_s2;
  PyObject *__pyx_n_s_s2_proc;
  PyObject *__pyx_n_s_score_cutoff;
  PyObject *__pyx_kp_u_score_cutoff_has_to_be_in_the_ra;
  PyObject *__pyx_n_s_score_hint;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_kp_s_src_rapidfuzz_distance_metrics_c;
  PyObject *__pyx_n_s_substitution;
  PyObject *__pyx_n_s_sys;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_typecode;
  PyObject *__pyx_n_s_weights;
  PyObject *__pyx_n_u_weights;
  PyObject *__pyx_float_0_0;
  PyObject *__pyx_float_0_1;
  PyObject *__pyx_float_1_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_neg_1;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__55;
  PyObject *__pyx_tuple__56;
  PyObject *__pyx_tuple__57;
  PyObject *__pyx_tuple__58;
  PyObject *__pyx_tuple__59;
  PyObject *__pyx_tuple__60;
  PyObject *__pyx_tuple__61;
  PyObject *__pyx_tuple__62;
  PyObject *__pyx_tuple__63;
  PyObject *__pyx_codeobj__4;
  PyObject *__pyx_codeobj__5;
  PyObject *__pyx_codeobj__6;
  PyObject *__pyx_codeobj__7;
  PyObject *__pyx_codeobj__8;
  PyObject *__pyx_codeobj__9;
  PyObject *__pyx_codeobj__10;
  PyObject *__pyx_codeobj__11;
  PyObject *__pyx_codeobj__12;
  PyObject *__pyx_codeobj__13;
  PyObject *__pyx_codeobj__14;
  PyObject *__pyx_codeobj__15;
  PyObject *__pyx_codeobj__16;
  PyObject *__pyx_codeobj__17;
  PyObject *__pyx_codeobj__18;
  PyObject *__pyx_codeobj__19;
  PyObject *__pyx_codeobj__20;
  PyObject *__pyx_codeobj__21;
  PyObject *__pyx_codeobj__22;
  PyObject *__pyx_codeobj__23;
  PyObject *__pyx_codeobj__24;
  PyObject *__pyx_codeobj__25;
  PyObject *__pyx_codeobj__26;
  PyObject *__pyx_codeobj__27;
  PyObject *__pyx_codeobj__28;
  PyObject *__pyx_codeobj__29;
  PyObject *__pyx_codeobj__30;
  PyObject *__pyx_codeobj__31;
  PyObject *__pyx_codeobj__32;
  PyObject *__pyx_codeobj__33;
  PyObject *__pyx_codeobj__34;
  PyObject *__pyx_codeobj__35;
  PyObject *__pyx_codeobj__36;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__38;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__40;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__42;
  PyObject *__pyx_codeobj__43;
  PyObject *__pyx_codeobj__44;
  PyObject *__pyx_codeobj__45;
  PyObject *__pyx_codeobj__46;
  PyObject *__pyx_codeobj__47;
  PyObject *__pyx_codeobj__48;
  PyObject *__pyx_codeobj__49;
  PyObject *__pyx_codeobj__50;
  PyObject *__pyx_codeobj__51;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops);
  Py_CLEAR(clear_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes);
  Py_CLEAR(clear_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment);
  Py_CLEAR(clear_module_state->__pyx_kp_u_);
  Py_CLEAR(clear_module_state->__pyx_n_s_Editops);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Got_unexpected_keyword_arguments);
  Py_CLEAR(clear_module_state->__pyx_n_s_MemoryError);
  Py_CLEAR(clear_module_state->__pyx_n_s_NA);
  Py_CLEAR(clear_module_state->__pyx_n_u_NA);
  Py_CLEAR(clear_module_state->__pyx_n_s_RF_OriginalScorer);
  Py_CLEAR(clear_module_state->__pyx_n_s_RF_Preprocess);
  Py_CLEAR(clear_module_state->__pyx_n_u_RF_Preprocess);
  Py_CLEAR(clear_module_state->__pyx_n_s_RF_Scorer);
  Py_CLEAR(clear_module_state->__pyx_n_s_RF_ScorerPy);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_kp_u__2);
  Py_CLEAR(clear_module_state->__pyx_n_s__52);
  Py_CLEAR(clear_module_state->__pyx_kp_u__53);
  Py_CLEAR(clear_module_state->__pyx_n_s__54);
  Py_CLEAR(clear_module_state->__pyx_n_s__64);
  Py_CLEAR(clear_module_state->__pyx_n_s_array);
  Py_CLEAR(clear_module_state->__pyx_n_s_as_opcodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_score_cutoff);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_score_hint);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_damerau_levenshtein_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_damerau_levenshtein_normalized_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_damerau_levenshtein_normalized_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_damerau_levenshtein_similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_deletion);
  Py_CLEAR(clear_module_state->__pyx_n_s_doc);
  Py_CLEAR(clear_module_state->__pyx_n_s_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_hamming_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_hamming_editops);
  Py_CLEAR(clear_module_state->__pyx_n_s_hamming_normalized_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_hamming_normalized_similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_hamming_opcodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_hamming_similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_indel_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_indel_editops);
  Py_CLEAR(clear_module_state->__pyx_n_s_indel_normalized_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_indel_normalized_similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_indel_opcodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_indel_similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_initialize_cpp);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_insertion);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_jaro_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_jaro_normalized_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_jaro_normalized_similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_jaro_similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_jaro_winkler_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_jaro_winkler_normalized_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_jaro_winkler_normalized_similari);
  Py_CLEAR(clear_module_state->__pyx_n_s_jaro_winkler_similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_keys);
  Py_CLEAR(clear_module_state->__pyx_n_s_lcs_seq_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_lcs_seq_editops);
  Py_CLEAR(clear_module_state->__pyx_n_s_lcs_seq_normalized_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_lcs_seq_normalized_similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_lcs_seq_opcodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_lcs_seq_similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_levenshtein_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_levenshtein_editops);
  Py_CLEAR(clear_module_state->__pyx_n_s_levenshtein_normalized_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_levenshtein_normalized_similarit);
  Py_CLEAR(clear_module_state->__pyx_n_s_levenshtein_opcodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_levenshtein_similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_metrics_py);
  Py_CLEAR(clear_module_state->__pyx_n_s_modules);
  Py_CLEAR(clear_module_state->__pyx_n_s_msg);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_ops);
  Py_CLEAR(clear_module_state->__pyx_n_s_osa_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_osa_normalized_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_osa_normalized_similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_osa_similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_pad);
  Py_CLEAR(clear_module_state->__pyx_n_u_pad);
  Py_CLEAR(clear_module_state->__pyx_n_u_pandas);
  Py_CLEAR(clear_module_state->__pyx_n_s_pandas_NA);
  Py_CLEAR(clear_module_state->__pyx_n_s_postfix_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_postfix_normalized_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_postfix_normalized_similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_postfix_similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_prefix_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_prefix_normalized_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_prefix_normalized_similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_prefix_similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_prefix_weight);
  Py_CLEAR(clear_module_state->__pyx_n_u_prefix_weight);
  Py_CLEAR(clear_module_state->__pyx_kp_u_prefix_weight_has_to_be_in_the_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_processor);
  Py_CLEAR(clear_module_state->__pyx_n_s_qualname);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_rapidfuzz_distance_metrics_cpp);
  Py_CLEAR(clear_module_state->__pyx_n_s_s1);
  Py_CLEAR(clear_module_state->__pyx_n_s_s1_proc);
  Py_CLEAR(clear_module_state->__pyx_n_s_s2);
  Py_CLEAR(clear_module_state->__pyx_n_s_s2_proc);
  Py_CLEAR(clear_module_state->__pyx_n_s_score_cutoff);
  Py_CLEAR(clear_module_state->__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
  Py_CLEAR(clear_module_state->__pyx_n_s_score_hint);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_kp_s_src_rapidfuzz_distance_metrics_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_substitution);
  Py_CLEAR(clear_module_state->__pyx_n_s_sys);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_typecode);
  Py_CLEAR(clear_module_state->__pyx_n_s_weights);
  Py_CLEAR(clear_module_state->__pyx_n_u_weights);
  Py_CLEAR(clear_module_state->__pyx_float_0_0);
  Py_CLEAR(clear_module_state->__pyx_float_0_1);
  Py_CLEAR(clear_module_state->__pyx_float_1_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_neg_1);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__55);
  Py_CLEAR(clear_module_state->__pyx_tuple__56);
  Py_CLEAR(clear_module_state->__pyx_tuple__57);
  Py_CLEAR(clear_module_state->__pyx_tuple__58);
  Py_CLEAR(clear_module_state->__pyx_tuple__59);
  Py_CLEAR(clear_module_state->__pyx_tuple__60);
  Py_CLEAR(clear_module_state->__pyx_tuple__61);
  Py_CLEAR(clear_module_state->__pyx_tuple__62);
  Py_CLEAR(clear_module_state->__pyx_tuple__63);
  Py_CLEAR(clear_module_state->__pyx_codeobj__4);
  Py_CLEAR(clear_module_state->__pyx_codeobj__5);
  Py_CLEAR(clear_module_state->__pyx_codeobj__6);
  Py_CLEAR(clear_module_state->__pyx_codeobj__7);
  Py_CLEAR(clear_module_state->__pyx_codeobj__8);
  Py_CLEAR(clear_module_state->__pyx_codeobj__9);
  Py_CLEAR(clear_module_state->__pyx_codeobj__10);
  Py_CLEAR(clear_module_state->__pyx_codeobj__11);
  Py_CLEAR(clear_module_state->__pyx_codeobj__12);
  Py_CLEAR(clear_module_state->__pyx_codeobj__13);
  Py_CLEAR(clear_module_state->__pyx_codeobj__14);
  Py_CLEAR(clear_module_state->__pyx_codeobj__15);
  Py_CLEAR(clear_module_state->__pyx_codeobj__16);
  Py_CLEAR(clear_module_state->__pyx_codeobj__17);
  Py_CLEAR(clear_module_state->__pyx_codeobj__18);
  Py_CLEAR(clear_module_state->__pyx_codeobj__19);
  Py_CLEAR(clear_module_state->__pyx_codeobj__20);
  Py_CLEAR(clear_module_state->__pyx_codeobj__21);
  Py_CLEAR(clear_module_state->__pyx_codeobj__22);
  Py_CLEAR(clear_module_state->__pyx_codeobj__23);
  Py_CLEAR(clear_module_state->__pyx_codeobj__24);
  Py_CLEAR(clear_module_state->__pyx_codeobj__25);
  Py_CLEAR(clear_module_state->__pyx_codeobj__26);
  Py_CLEAR(clear_module_state->__pyx_codeobj__27);
  Py_CLEAR(clear_module_state->__pyx_codeobj__28);
  Py_CLEAR(clear_module_state->__pyx_codeobj__29);
  Py_CLEAR(clear_module_state->__pyx_codeobj__30);
  Py_CLEAR(clear_module_state->__pyx_codeobj__31);
  Py_CLEAR(clear_module_state->__pyx_codeobj__32);
  Py_CLEAR(clear_module_state->__pyx_codeobj__33);
  Py_CLEAR(clear_module_state->__pyx_codeobj__34);
  Py_CLEAR(clear_module_state->__pyx_codeobj__35);
  Py_CLEAR(clear_module_state->__pyx_codeobj__36);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__38);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__40);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__42);
  Py_CLEAR(clear_module_state->__pyx_codeobj__43);
  Py_CLEAR(clear_module_state->__pyx_codeobj__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__45);
  Py_CLEAR(clear_module_state->__pyx_codeobj__46);
  Py_CLEAR(clear_module_state->__pyx_codeobj__47);
  Py_CLEAR(clear_module_state->__pyx_codeobj__48);
  Py_CLEAR(clear_module_state->__pyx_codeobj__49);
  Py_CLEAR(clear_module_state->__pyx_codeobj__50);
  Py_CLEAR(clear_module_state->__pyx_codeobj__51);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops);
  Py_VISIT(traverse_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes);
  Py_VISIT(traverse_module_state->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment);
  Py_VISIT(traverse_module_state->__pyx_kp_u_);
  Py_VISIT(traverse_module_state->__pyx_n_s_Editops);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Got_unexpected_keyword_arguments);
  Py_VISIT(traverse_module_state->__pyx_n_s_MemoryError);
  Py_VISIT(traverse_module_state->__pyx_n_s_NA);
  Py_VISIT(traverse_module_state->__pyx_n_u_NA);
  Py_VISIT(traverse_module_state->__pyx_n_s_RF_OriginalScorer);
  Py_VISIT(traverse_module_state->__pyx_n_s_RF_Preprocess);
  Py_VISIT(traverse_module_state->__pyx_n_u_RF_Preprocess);
  Py_VISIT(traverse_module_state->__pyx_n_s_RF_Scorer);
  Py_VISIT(traverse_module_state->__pyx_n_s_RF_ScorerPy);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_kp_u__2);
  Py_VISIT(traverse_module_state->__pyx_n_s__52);
  Py_VISIT(traverse_module_state->__pyx_kp_u__53);
  Py_VISIT(traverse_module_state->__pyx_n_s__54);
  Py_VISIT(traverse_module_state->__pyx_n_s__64);
  Py_VISIT(traverse_module_state->__pyx_n_s_array);
  Py_VISIT(traverse_module_state->__pyx_n_s_as_opcodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_score_cutoff);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_score_hint);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_damerau_levenshtein_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_damerau_levenshtein_normalized_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_damerau_levenshtein_normalized_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_damerau_levenshtein_similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_deletion);
  Py_VISIT(traverse_module_state->__pyx_n_s_doc);
  Py_VISIT(traverse_module_state->__pyx_n_s_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_hamming_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_hamming_editops);
  Py_VISIT(traverse_module_state->__pyx_n_s_hamming_normalized_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_hamming_normalized_similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_hamming_opcodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_hamming_similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_indel_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_indel_editops);
  Py_VISIT(traverse_module_state->__pyx_n_s_indel_normalized_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_indel_normalized_similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_indel_opcodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_indel_similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_initialize_cpp);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_insertion);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_jaro_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_jaro_normalized_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_jaro_normalized_similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_jaro_similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_jaro_winkler_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_jaro_winkler_normalized_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_jaro_winkler_normalized_similari);
  Py_VISIT(traverse_module_state->__pyx_n_s_jaro_winkler_similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_keys);
  Py_VISIT(traverse_module_state->__pyx_n_s_lcs_seq_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_lcs_seq_editops);
  Py_VISIT(traverse_module_state->__pyx_n_s_lcs_seq_normalized_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_lcs_seq_normalized_similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_lcs_seq_opcodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_lcs_seq_similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_levenshtein_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_levenshtein_editops);
  Py_VISIT(traverse_module_state->__pyx_n_s_levenshtein_normalized_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_levenshtein_normalized_similarit);
  Py_VISIT(traverse_module_state->__pyx_n_s_levenshtein_opcodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_levenshtein_similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_metrics_py);
  Py_VISIT(traverse_module_state->__pyx_n_s_modules);
  Py_VISIT(traverse_module_state->__pyx_n_s_msg);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_ops);
  Py_VISIT(traverse_module_state->__pyx_n_s_osa_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_osa_normalized_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_osa_normalized_similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_osa_similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_pad);
  Py_VISIT(traverse_module_state->__pyx_n_u_pad);
  Py_VISIT(traverse_module_state->__pyx_n_u_pandas);
  Py_VISIT(traverse_module_state->__pyx_n_s_pandas_NA);
  Py_VISIT(traverse_module_state->__pyx_n_s_postfix_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_postfix_normalized_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_postfix_normalized_similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_postfix_similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_prefix_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_prefix_normalized_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_prefix_normalized_similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_prefix_similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_prefix_weight);
  Py_VISIT(traverse_module_state->__pyx_n_u_prefix_weight);
  Py_VISIT(traverse_module_state->__pyx_kp_u_prefix_weight_has_to_be_in_the_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_processor);
  Py_VISIT(traverse_module_state->__pyx_n_s_qualname);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_rapidfuzz_distance_metrics_cpp);
  Py_VISIT(traverse_module_state->__pyx_n_s_s1);
  Py_VISIT(traverse_module_state->__pyx_n_s_s1_proc);
  Py_VISIT(traverse_module_state->__pyx_n_s_s2);
  Py_VISIT(traverse_module_state->__pyx_n_s_s2_proc);
  Py_VISIT(traverse_module_state->__pyx_n_s_score_cutoff);
  Py_VISIT(traverse_module_state->__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
  Py_VISIT(traverse_module_state->__pyx_n_s_score_hint);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_kp_s_src_rapidfuzz_distance_metrics_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_substitution);
  Py_VISIT(traverse_module_state->__pyx_n_s_sys);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_typecode);
  Py_VISIT(traverse_module_state->__pyx_n_s_weights);
  Py_VISIT(traverse_module_state->__pyx_n_u_weights);
  Py_VISIT(traverse_module_state->__pyx_float_0_0);
  Py_VISIT(traverse_module_state->__pyx_float_0_1);
  Py_VISIT(traverse_module_state->__pyx_float_1_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_neg_1);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__55);
  Py_VISIT(traverse_module_state->__pyx_tuple__56);
  Py_VISIT(traverse_module_state->__pyx_tuple__57);
  Py_VISIT(traverse_module_state->__pyx_tuple__58);
  Py_VISIT(traverse_module_state->__pyx_tuple__59);
  Py_VISIT(traverse_module_state->__pyx_tuple__60);
  Py_VISIT(traverse_module_state->__pyx_tuple__61);
  Py_VISIT(traverse_module_state->__pyx_tuple__62);
  Py_VISIT(traverse_module_state->__pyx_tuple__63);
  Py_VISIT(traverse_module_state->__pyx_codeobj__4);
  Py_VISIT(traverse_module_state->__pyx_codeobj__5);
  Py_VISIT(traverse_module_state->__pyx_codeobj__6);
  Py_VISIT(traverse_module_state->__pyx_codeobj__7);
  Py_VISIT(traverse_module_state->__pyx_codeobj__8);
  Py_VISIT(traverse_module_state->__pyx_codeobj__9);
  Py_VISIT(traverse_module_state->__pyx_codeobj__10);
  Py_VISIT(traverse_module_state->__pyx_codeobj__11);
  Py_VISIT(traverse_module_state->__pyx_codeobj__12);
  Py_VISIT(traverse_module_state->__pyx_codeobj__13);
  Py_VISIT(traverse_module_state->__pyx_codeobj__14);
  Py_VISIT(traverse_module_state->__pyx_codeobj__15);
  Py_VISIT(traverse_module_state->__pyx_codeobj__16);
  Py_VISIT(traverse_module_state->__pyx_codeobj__17);
  Py_VISIT(traverse_module_state->__pyx_codeobj__18);
  Py_VISIT(traverse_module_state->__pyx_codeobj__19);
  Py_VISIT(traverse_module_state->__pyx_codeobj__20);
  Py_VISIT(traverse_module_state->__pyx_codeobj__21);
  Py_VISIT(traverse_module_state->__pyx_codeobj__22);
  Py_VISIT(traverse_module_state->__pyx_codeobj__23);
  Py_VISIT(traverse_module_state->__pyx_codeobj__24);
  Py_VISIT(traverse_module_state->__pyx_codeobj__25);
  Py_VISIT(traverse_module_state->__pyx_codeobj__26);
  Py_VISIT(traverse_module_state->__pyx_codeobj__27);
  Py_VISIT(traverse_module_state->__pyx_codeobj__28);
  Py_VISIT(traverse_module_state->__pyx_codeobj__29);
  Py_VISIT(traverse_module_state->__pyx_codeobj__30);
  Py_VISIT(traverse_module_state->__pyx_codeobj__31);
  Py_VISIT(traverse_module_state->__pyx_codeobj__32);
  Py_VISIT(traverse_module_state->__pyx_codeobj__33);
  Py_VISIT(traverse_module_state->__pyx_codeobj__34);
  Py_VISIT(traverse_module_state->__pyx_codeobj__35);
  Py_VISIT(traverse_module_state->__pyx_codeobj__36);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__38);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__40);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__42);
  Py_VISIT(traverse_module_state->__pyx_codeobj__43);
  Py_VISIT(traverse_module_state->__pyx_codeobj__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__45);
  Py_VISIT(traverse_module_state->__pyx_codeobj__46);
  Py_VISIT(traverse_module_state->__pyx_codeobj__47);
  Py_VISIT(traverse_module_state->__pyx_codeobj__48);
  Py_VISIT(traverse_module_state->__pyx_codeobj__49);
  Py_VISIT(traverse_module_state->__pyx_codeobj__50);
  Py_VISIT(traverse_module_state->__pyx_codeobj__51);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops __pyx_mstate_global->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops
#define __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes __pyx_mstate_global->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes
#define __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment __pyx_mstate_global->__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_kp_u_ __pyx_mstate_global->__pyx_kp_u_
#define __pyx_n_s_Editops __pyx_mstate_global->__pyx_n_s_Editops
#define __pyx_kp_u_Got_unexpected_keyword_arguments __pyx_mstate_global->__pyx_kp_u_Got_unexpected_keyword_arguments
#define __pyx_n_s_MemoryError __pyx_mstate_global->__pyx_n_s_MemoryError
#define __pyx_n_s_NA __pyx_mstate_global->__pyx_n_s_NA
#define __pyx_n_u_NA __pyx_mstate_global->__pyx_n_u_NA
#define __pyx_n_s_RF_OriginalScorer __pyx_mstate_global->__pyx_n_s_RF_OriginalScorer
#define __pyx_n_s_RF_Preprocess __pyx_mstate_global->__pyx_n_s_RF_Preprocess
#define __pyx_n_u_RF_Preprocess __pyx_mstate_global->__pyx_n_u_RF_Preprocess
#define __pyx_n_s_RF_Scorer __pyx_mstate_global->__pyx_n_s_RF_Scorer
#define __pyx_n_s_RF_ScorerPy __pyx_mstate_global->__pyx_n_s_RF_ScorerPy
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_kp_u__2 __pyx_mstate_global->__pyx_kp_u__2
#define __pyx_n_s__52 __pyx_mstate_global->__pyx_n_s__52
#define __pyx_kp_u__53 __pyx_mstate_global->__pyx_kp_u__53
#define __pyx_n_s__54 __pyx_mstate_global->__pyx_n_s__54
#define __pyx_n_s__64 __pyx_mstate_global->__pyx_n_s__64
#define __pyx_n_s_array __pyx_mstate_global->__pyx_n_s_array
#define __pyx_n_s_as_opcodes __pyx_mstate_global->__pyx_n_s_as_opcodes
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_c_score_cutoff __pyx_mstate_global->__pyx_n_s_c_score_cutoff
#define __pyx_n_s_c_score_hint __pyx_mstate_global->__pyx_n_s_c_score_hint
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_damerau_levenshtein_distance __pyx_mstate_global->__pyx_n_s_damerau_levenshtein_distance
#define __pyx_n_s_damerau_levenshtein_normalized_d __pyx_mstate_global->__pyx_n_s_damerau_levenshtein_normalized_d
#define __pyx_n_s_damerau_levenshtein_normalized_s __pyx_mstate_global->__pyx_n_s_damerau_levenshtein_normalized_s
#define __pyx_n_s_damerau_levenshtein_similarity __pyx_mstate_global->__pyx_n_s_damerau_levenshtein_similarity
#define __pyx_n_s_deletion __pyx_mstate_global->__pyx_n_s_deletion
#define __pyx_n_s_doc __pyx_mstate_global->__pyx_n_s_doc
#define __pyx_n_s_get __pyx_mstate_global->__pyx_n_s_get
#define __pyx_n_s_hamming_distance __pyx_mstate_global->__pyx_n_s_hamming_distance
#define __pyx_n_s_hamming_editops __pyx_mstate_global->__pyx_n_s_hamming_editops
#define __pyx_n_s_hamming_normalized_distance __pyx_mstate_global->__pyx_n_s_hamming_normalized_distance
#define __pyx_n_s_hamming_normalized_similarity __pyx_mstate_global->__pyx_n_s_hamming_normalized_similarity
#define __pyx_n_s_hamming_opcodes __pyx_mstate_global->__pyx_n_s_hamming_opcodes
#define __pyx_n_s_hamming_similarity __pyx_mstate_global->__pyx_n_s_hamming_similarity
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_indel_distance __pyx_mstate_global->__pyx_n_s_indel_distance
#define __pyx_n_s_indel_editops __pyx_mstate_global->__pyx_n_s_indel_editops
#define __pyx_n_s_indel_normalized_distance __pyx_mstate_global->__pyx_n_s_indel_normalized_distance
#define __pyx_n_s_indel_normalized_similarity __pyx_mstate_global->__pyx_n_s_indel_normalized_similarity
#define __pyx_n_s_indel_opcodes __pyx_mstate_global->__pyx_n_s_indel_opcodes
#define __pyx_n_s_indel_similarity __pyx_mstate_global->__pyx_n_s_indel_similarity
#define __pyx_n_s_initialize_cpp __pyx_mstate_global->__pyx_n_s_initialize_cpp
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_insertion __pyx_mstate_global->__pyx_n_s_insertion
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_jaro_distance __pyx_mstate_global->__pyx_n_s_jaro_distance
#define __pyx_n_s_jaro_normalized_distance __pyx_mstate_global->__pyx_n_s_jaro_normalized_distance
#define __pyx_n_s_jaro_normalized_similarity __pyx_mstate_global->__pyx_n_s_jaro_normalized_similarity
#define __pyx_n_s_jaro_similarity __pyx_mstate_global->__pyx_n_s_jaro_similarity
#define __pyx_n_s_jaro_winkler_distance __pyx_mstate_global->__pyx_n_s_jaro_winkler_distance
#define __pyx_n_s_jaro_winkler_normalized_distance __pyx_mstate_global->__pyx_n_s_jaro_winkler_normalized_distance
#define __pyx_n_s_jaro_winkler_normalized_similari __pyx_mstate_global->__pyx_n_s_jaro_winkler_normalized_similari
#define __pyx_n_s_jaro_winkler_similarity __pyx_mstate_global->__pyx_n_s_jaro_winkler_similarity
#define __pyx_n_s_keys __pyx_mstate_global->__pyx_n_s_keys
#define __pyx_n_s_lcs_seq_distance __pyx_mstate_global->__pyx_n_s_lcs_seq_distance
#define __pyx_n_s_lcs_seq_editops __pyx_mstate_global->__pyx_n_s_lcs_seq_editops
#define __pyx_n_s_lcs_seq_normalized_distance __pyx_mstate_global->__pyx_n_s_lcs_seq_normalized_distance
#define __pyx_n_s_lcs_seq_normalized_similarity __pyx_mstate_global->__pyx_n_s_lcs_seq_normalized_similarity
#define __pyx_n_s_lcs_seq_opcodes __pyx_mstate_global->__pyx_n_s_lcs_seq_opcodes
#define __pyx_n_s_lcs_seq_similarity __pyx_mstate_global->__pyx_n_s_lcs_seq_similarity
#define __pyx_n_s_levenshtein_distance __pyx_mstate_global->__pyx_n_s_levenshtein_distance
#define __pyx_n_s_levenshtein_editops __pyx_mstate_global->__pyx_n_s_levenshtein_editops
#define __pyx_n_s_levenshtein_normalized_distance __pyx_mstate_global->__pyx_n_s_levenshtein_normalized_distance
#define __pyx_n_s_levenshtein_normalized_similarit __pyx_mstate_global->__pyx_n_s_levenshtein_normalized_similarit
#define __pyx_n_s_levenshtein_opcodes __pyx_mstate_global->__pyx_n_s_levenshtein_opcodes
#define __pyx_n_s_levenshtein_similarity __pyx_mstate_global->__pyx_n_s_levenshtein_similarity
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_metrics_py __pyx_mstate_global->__pyx_n_s_metrics_py
#define __pyx_n_s_modules __pyx_mstate_global->__pyx_n_s_modules
#define __pyx_n_s_msg __pyx_mstate_global->__pyx_n_s_msg
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_ops __pyx_mstate_global->__pyx_n_s_ops
#define __pyx_n_s_osa_distance __pyx_mstate_global->__pyx_n_s_osa_distance
#define __pyx_n_s_osa_normalized_distance __pyx_mstate_global->__pyx_n_s_osa_normalized_distance
#define __pyx_n_s_osa_normalized_similarity __pyx_mstate_global->__pyx_n_s_osa_normalized_similarity
#define __pyx_n_s_osa_similarity __pyx_mstate_global->__pyx_n_s_osa_similarity
#define __pyx_n_s_pad __pyx_mstate_global->__pyx_n_s_pad
#define __pyx_n_u_pad __pyx_mstate_global->__pyx_n_u_pad
#define __pyx_n_u_pandas __pyx_mstate_global->__pyx_n_u_pandas
#define __pyx_n_s_pandas_NA __pyx_mstate_global->__pyx_n_s_pandas_NA
#define __pyx_n_s_postfix_distance __pyx_mstate_global->__pyx_n_s_postfix_distance
#define __pyx_n_s_postfix_normalized_distance __pyx_mstate_global->__pyx_n_s_postfix_normalized_distance
#define __pyx_n_s_postfix_normalized_similarity __pyx_mstate_global->__pyx_n_s_postfix_normalized_similarity
#define __pyx_n_s_postfix_similarity __pyx_mstate_global->__pyx_n_s_postfix_similarity
#define __pyx_n_s_prefix_distance __pyx_mstate_global->__pyx_n_s_prefix_distance
#define __pyx_n_s_prefix_normalized_distance __pyx_mstate_global->__pyx_n_s_prefix_normalized_distance
#define __pyx_n_s_prefix_normalized_similarity __pyx_mstate_global->__pyx_n_s_prefix_normalized_similarity
#define __pyx_n_s_prefix_similarity __pyx_mstate_global->__pyx_n_s_prefix_similarity
#define __pyx_n_s_prefix_weight __pyx_mstate_global->__pyx_n_s_prefix_weight
#define __pyx_n_u_prefix_weight __pyx_mstate_global->__pyx_n_u_prefix_weight
#define __pyx_kp_u_prefix_weight_has_to_be_in_the_r __pyx_mstate_global->__pyx_kp_u_prefix_weight_has_to_be_in_the_r
#define __pyx_n_s_processor __pyx_mstate_global->__pyx_n_s_processor
#define __pyx_n_s_qualname __pyx_mstate_global->__pyx_n_s_qualname
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_rapidfuzz_distance_metrics_cpp __pyx_mstate_global->__pyx_n_s_rapidfuzz_distance_metrics_cpp
#define __pyx_n_s_s1 __pyx_mstate_global->__pyx_n_s_s1
#define __pyx_n_s_s1_proc __pyx_mstate_global->__pyx_n_s_s1_proc
#define __pyx_n_s_s2 __pyx_mstate_global->__pyx_n_s_s2
#define __pyx_n_s_s2_proc __pyx_mstate_global->__pyx_n_s_s2_proc
#define __pyx_n_s_score_cutoff __pyx_mstate_global->__pyx_n_s_score_cutoff
#define __pyx_kp_u_score_cutoff_has_to_be_in_the_ra __pyx_mstate_global->__pyx_kp_u_score_cutoff_has_to_be_in_the_ra
#define __pyx_n_s_score_hint __pyx_mstate_global->__pyx_n_s_score_hint
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_kp_s_src_rapidfuzz_distance_metrics_c __pyx_mstate_global->__pyx_kp_s_src_rapidfuzz_distance_metrics_c
#define __pyx_n_s_substitution __pyx_mstate_global->__pyx_n_s_substitution
#define __pyx_n_s_sys __pyx_mstate_global->__pyx_n_s_sys
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_typecode __pyx_mstate_global->__pyx_n_s_typecode
#define __pyx_n_s_weights __pyx_mstate_global->__pyx_n_s_weights
#define __pyx_n_u_weights __pyx_mstate_global->__pyx_n_u_weights
#define __pyx_float_0_0 __pyx_mstate_global->__pyx_float_0_0
#define __pyx_float_0_1 __pyx_mstate_global->__pyx_float_0_1
#define __pyx_float_1_0 __pyx_mstate_global->__pyx_float_1_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_neg_1 __pyx_mstate_global->__pyx_int_neg_1
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__55 __pyx_mstate_global->__pyx_tuple__55
#define __pyx_tuple__56 __pyx_mstate_global->__pyx_tuple__56
#define __pyx_tuple__57 __pyx_mstate_global->__pyx_tuple__57
#define __pyx_tuple__58 __pyx_mstate_global->__pyx_tuple__58
#define __pyx_tuple__59 __pyx_mstate_global->__pyx_tuple__59
#define __pyx_tuple__60 __pyx_mstate_global->__pyx_tuple__60
#define __pyx_tuple__61 __pyx_mstate_global->__pyx_tuple__61
#define __pyx_tuple__62 __pyx_mstate_global->__pyx_tuple__62
#define __pyx_tuple__63 __pyx_mstate_global->__pyx_tuple__63
#define __pyx_codeobj__4 __pyx_mstate_global->__pyx_codeobj__4
#define __pyx_codeobj__5 __pyx_mstate_global->__pyx_codeobj__5
#define __pyx_codeobj__6 __pyx_mstate_global->__pyx_codeobj__6
#define __pyx_codeobj__7 __pyx_mstate_global->__pyx_codeobj__7
#define __pyx_codeobj__8 __pyx_mstate_global->__pyx_codeobj__8
#define __pyx_codeobj__9 __pyx_mstate_global->__pyx_codeobj__9
#define __pyx_codeobj__10 __pyx_mstate_global->__pyx_codeobj__10
#define __pyx_codeobj__11 __pyx_mstate_global->__pyx_codeobj__11
#define __pyx_codeobj__12 __pyx_mstate_global->__pyx_codeobj__12
#define __pyx_codeobj__13 __pyx_mstate_global->__pyx_codeobj__13
#define __pyx_codeobj__14 __pyx_mstate_global->__pyx_codeobj__14
#define __pyx_codeobj__15 __pyx_mstate_global->__pyx_codeobj__15
#define __pyx_codeobj__16 __pyx_mstate_global->__pyx_codeobj__16
#define __pyx_codeobj__17 __pyx_mstate_global->__pyx_codeobj__17
#define __pyx_codeobj__18 __pyx_mstate_global->__pyx_codeobj__18
#define __pyx_codeobj__19 __pyx_mstate_global->__pyx_codeobj__19
#define __pyx_codeobj__20 __pyx_mstate_global->__pyx_codeobj__20
#define __pyx_codeobj__21 __pyx_mstate_global->__pyx_codeobj__21
#define __pyx_codeobj__22 __pyx_mstate_global->__pyx_codeobj__22
#define __pyx_codeobj__23 __pyx_mstate_global->__pyx_codeobj__23
#define __pyx_codeobj__24 __pyx_mstate_global->__pyx_codeobj__24
#define __pyx_codeobj__25 __pyx_mstate_global->__pyx_codeobj__25
#define __pyx_codeobj__26 __pyx_mstate_global->__pyx_codeobj__26
#define __pyx_codeobj__27 __pyx_mstate_global->__pyx_codeobj__27
#define __pyx_codeobj__28 __pyx_mstate_global->__pyx_codeobj__28
#define __pyx_codeobj__29 __pyx_mstate_global->__pyx_codeobj__29
#define __pyx_codeobj__30 __pyx_mstate_global->__pyx_codeobj__30
#define __pyx_codeobj__31 __pyx_mstate_global->__pyx_codeobj__31
#define __pyx_codeobj__32 __pyx_mstate_global->__pyx_codeobj__32
#define __pyx_codeobj__33 __pyx_mstate_global->__pyx_codeobj__33
#define __pyx_codeobj__34 __pyx_mstate_global->__pyx_codeobj__34
#define __pyx_codeobj__35 __pyx_mstate_global->__pyx_codeobj__35
#define __pyx_codeobj__36 __pyx_mstate_global->__pyx_codeobj__36
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__38 __pyx_mstate_global->__pyx_codeobj__38
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__40 __pyx_mstate_global->__pyx_codeobj__40
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__42 __pyx_mstate_global->__pyx_codeobj__42
#define __pyx_codeobj__43 __pyx_mstate_global->__pyx_codeobj__43
#define __pyx_codeobj__44 __pyx_mstate_global->__pyx_codeobj__44
#define __pyx_codeobj__45 __pyx_mstate_global->__pyx_codeobj__45
#define __pyx_codeobj__46 __pyx_mstate_global->__pyx_codeobj__46
#define __pyx_codeobj__47 __pyx_mstate_global->__pyx_codeobj__47
#define __pyx_codeobj__48 __pyx_mstate_global->__pyx_codeobj__48
#define __pyx_codeobj__49 __pyx_mstate_global->__pyx_codeobj__49
#define __pyx_codeobj__50 __pyx_mstate_global->__pyx_codeobj__50
#define __pyx_codeobj__51 __pyx_mstate_global->__pyx_codeobj__51
/* #### Code section: module_code ### */

/* "cpp_common.pxd":255
 *     void validate_string(object py_str, const char* err) except +
 * 
 * cdef inline bool hash_array(arr, RF_String* s_proc) except False:             # <<<<<<<<<<<<<<
 *     # TODO on Cpython this does not require any copies
 *     cdef Py_UCS4 typecode = <Py_UCS4>arr.typecode
 */

static CYTHON_INLINE bool __pyx_f_10cpp_common_hash_array(PyObject *__pyx_v_arr, RF_String *__pyx_v_s_proc) {
  Py_UCS4 __pyx_v_typecode;
  int64_t __pyx_v_i;
  CYTHON_UNUSED PyObject *__pyx_v_e = NULL;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_UCS4 __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int64_t __pyx_t_8;
  int64_t __pyx_t_9;
  int64_t __pyx_t_10;
  uint64_t __pyx_t_11;
  Py_hash_t __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hash_array", 1);
  __Pyx_TraceCall("hash_array", __pyx_f[1], 255, 0, __PYX_ERR(1, 255, __pyx_L1_error));

  /* "cpp_common.pxd":257
 * cdef inline bool hash_array(arr, RF_String* s_proc) except False:
 *     # TODO on Cpython this does not require any copies
 *     cdef Py_UCS4 typecode = <Py_UCS4>arr.typecode             # <<<<<<<<<<<<<<
 *     s_proc.length = <int64_t>len(arr)
 * 
 */
  __Pyx_TraceLine(257,0,__PYX_ERR(1, 257, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_arr, __pyx_n_s_typecode); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(1, 257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_typecode = ((Py_UCS4)__pyx_t_2);

  /* "cpp_common.pxd":258
 *     # TODO on Cpython this does not require any copies
 *     cdef Py_UCS4 typecode = <Py_UCS4>arr.typecode
 *     s_proc.length = <int64_t>len(arr)             # <<<<<<<<<<<<<<
 * 
 *     s_proc.data = malloc(s_proc.length * sizeof(uint64_t))
 */
  __Pyx_TraceLine(258,0,__PYX_ERR(1, 258, __pyx_L1_error))
  __pyx_t_3 = PyObject_Length(__pyx_v_arr); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 258, __pyx_L1_error)
  __pyx_v_s_proc->length = ((int64_t)__pyx_t_3);

  /* "cpp_common.pxd":260
 *     s_proc.length = <int64_t>len(arr)
 * 
 *     s_proc.data = malloc(s_proc.length * sizeof(uint64_t))             # <<<<<<<<<<<<<<
 * 
 *     if s_proc.data == NULL:
 */
  __Pyx_TraceLine(260,0,__PYX_ERR(1, 260, __pyx_L1_error))
  __pyx_v_s_proc->data = malloc((__pyx_v_s_proc->length * (sizeof(uint64_t))));

  /* "cpp_common.pxd":262
 *     s_proc.data = malloc(s_proc.length * sizeof(uint64_t))
 * 
 *     if s_proc.data == NULL:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  __Pyx_TraceLine(262,0,__PYX_ERR(1, 262, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v_s_proc->data == NULL);
  if (unlikely(__pyx_t_4)) {

    /* "cpp_common.pxd":263
 * 
 *     if s_proc.data == NULL:
 *         raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __Pyx_TraceLine(263,0,__PYX_ERR(1, 263, __pyx_L1_error))
    PyErr_NoMemory(); __PYX_ERR(1, 263, __pyx_L1_error)

    /* "cpp_common.pxd":262
 *     s_proc.data = malloc(s_proc.length * sizeof(uint64_t))
 * 
 *     if s_proc.data == NULL:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  }

  /* "cpp_common.pxd":265
 *         raise MemoryError
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # ignore signed/unsigned, since it is not relevant in any of the algorithms
 *         if typecode in {'b', 'B'}: # signed/unsigned char
 */
  __Pyx_TraceLine(265,0,__PYX_ERR(1, 265, __pyx_L1_error))
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "cpp_common.pxd":267
 *     try:
 *         # ignore signed/unsigned, since it is not relevant in any of the algorithms
 *         if typecode in {'b', 'B'}: # signed/unsigned char             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
      __Pyx_TraceLine(267,0,__PYX_ERR(1, 267, __pyx_L4_error))
      switch (__pyx_v_typecode) {
        case 98:
        CYTHON_FALLTHROUGH;
        case 66:

        /* "cpp_common.pxd":268
 *         # ignore signed/unsigned, since it is not relevant in any of the algorithms
 *         if typecode in {'b', 'B'}: # signed/unsigned char
 *             s_proc.kind = RF_StringType.RF_UINT64             # <<<<<<<<<<<<<<
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 */
        __Pyx_TraceLine(268,0,__PYX_ERR(1, 268, __pyx_L4_error))
        __pyx_v_s_proc->kind = RF_UINT64;

        /* "cpp_common.pxd":269
 *         if typecode in {'b', 'B'}: # signed/unsigned char
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode == 'u': # 'u' wchar_t
 */
        __Pyx_TraceLine(269,0,__PYX_ERR(1, 269, __pyx_L4_error))
        __pyx_t_8 = __pyx_v_s_proc->length;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_i = __pyx_t_10;

          /* "cpp_common.pxd":270
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]             # <<<<<<<<<<<<<<
 *         elif typecode == 'u': # 'u' wchar_t
 *             s_proc.kind = RF_StringType.RF_UINT64
 */
          __Pyx_TraceLine(270,0,__PYX_ERR(1, 270, __pyx_L4_error))
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_arr, __pyx_v_i, int64_t, 1, __Pyx_PyInt_From_int64_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 270, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_11 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 270, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)__pyx_t_11);
        }

        /* "cpp_common.pxd":267
 *     try:
 *         # ignore signed/unsigned, since it is not relevant in any of the algorithms
 *         if typecode in {'b', 'B'}: # signed/unsigned char             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        break;
        case 0x75:

        /* "cpp_common.pxd":272
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode == 'u': # 'u' wchar_t
 *             s_proc.kind = RF_StringType.RF_UINT64             # <<<<<<<<<<<<<<
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>arr[i]
 */
        __Pyx_TraceLine(272,0,__PYX_ERR(1, 272, __pyx_L4_error))
        __pyx_v_s_proc->kind = RF_UINT64;

        /* "cpp_common.pxd":273
 *         elif typecode == 'u': # 'u' wchar_t
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>arr[i]
 *         elif typecode in {'h', 'H'}: #  signed/unsigned short
 */
        __Pyx_TraceLine(273,0,__PYX_ERR(1, 273, __pyx_L4_error))
        __pyx_t_8 = __pyx_v_s_proc->length;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_i = __pyx_t_10;

          /* "cpp_common.pxd":274
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>arr[i]             # <<<<<<<<<<<<<<
 *         elif typecode in {'h', 'H'}: #  signed/unsigned short
 *             s_proc.kind = RF_StringType.RF_UINT64
 */
          __Pyx_TraceLine(274,0,__PYX_ERR(1, 274, __pyx_L4_error))
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_arr, __pyx_v_i, int64_t, 1, __Pyx_PyInt_From_int64_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 274, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(1, 274, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)((Py_UCS4)__pyx_t_2));
        }

        /* "cpp_common.pxd":271
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode == 'u': # 'u' wchar_t             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        break;
        case 0x68:

        /* "cpp_common.pxd":275
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>arr[i]
 *         elif typecode in {'h', 'H'}: #  signed/unsigned short             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        __Pyx_TraceLine(275,0,__PYX_ERR(1, 275, __pyx_L4_error))
        CYTHON_FALLTHROUGH;
        case 72:

        /* "cpp_common.pxd":276
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>arr[i]
 *         elif typecode in {'h', 'H'}: #  signed/unsigned short
 *             s_proc.kind = RF_StringType.RF_UINT64             # <<<<<<<<<<<<<<
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 */
        __Pyx_TraceLine(276,0,__PYX_ERR(1, 276, __pyx_L4_error))
        __pyx_v_s_proc->kind = RF_UINT64;

        /* "cpp_common.pxd":277
 *         elif typecode in {'h', 'H'}: #  signed/unsigned short
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'i', 'I'}: # signed/unsigned int
 */
        __Pyx_TraceLine(277,0,__PYX_ERR(1, 277, __pyx_L4_error))
        __pyx_t_8 = __pyx_v_s_proc->length;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_i = __pyx_t_10;

          /* "cpp_common.pxd":278
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]             # <<<<<<<<<<<<<<
 *         elif typecode in {'i', 'I'}: # signed/unsigned int
 *             s_proc.kind = RF_StringType.RF_UINT64
 */
          __Pyx_TraceLine(278,0,__PYX_ERR(1, 278, __pyx_L4_error))
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_arr, __pyx_v_i, int64_t, 1, __Pyx_PyInt_From_int64_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 278, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_11 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 278, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)__pyx_t_11);
        }

        /* "cpp_common.pxd":275
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>arr[i]
 *         elif typecode in {'h', 'H'}: #  signed/unsigned short             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        break;
        case 0x69:

        /* "cpp_common.pxd":279
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'i', 'I'}: # signed/unsigned int             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        __Pyx_TraceLine(279,0,__PYX_ERR(1, 279, __pyx_L4_error))
        CYTHON_FALLTHROUGH;
        case 73:

        /* "cpp_common.pxd":280
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'i', 'I'}: # signed/unsigned int
 *             s_proc.kind = RF_StringType.RF_UINT64             # <<<<<<<<<<<<<<
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 */
        __Pyx_TraceLine(280,0,__PYX_ERR(1, 280, __pyx_L4_error))
        __pyx_v_s_proc->kind = RF_UINT64;

        /* "cpp_common.pxd":281
 *         elif typecode in {'i', 'I'}: # signed/unsigned int
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'l', 'L'}: # signed/unsigned long
 */
        __Pyx_TraceLine(281,0,__PYX_ERR(1, 281, __pyx_L4_error))
        __pyx_t_8 = __pyx_v_s_proc->length;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_i = __pyx_t_10;

          /* "cpp_common.pxd":282
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]             # <<<<<<<<<<<<<<
 *         elif typecode in {'l', 'L'}: # signed/unsigned long
 *             s_proc.kind = RF_StringType.RF_UINT64
 */
          __Pyx_TraceLine(282,0,__PYX_ERR(1, 282, __pyx_L4_error))
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_arr, __pyx_v_i, int64_t, 1, __Pyx_PyInt_From_int64_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 282, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_11 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 282, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)__pyx_t_11);
        }

        /* "cpp_common.pxd":279
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'i', 'I'}: # signed/unsigned int             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        break;
        case 0x6C:

        /* "cpp_common.pxd":283
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'l', 'L'}: # signed/unsigned long             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        __Pyx_TraceLine(283,0,__PYX_ERR(1, 283, __pyx_L4_error))
        CYTHON_FALLTHROUGH;
        case 76:

        /* "cpp_common.pxd":284
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'l', 'L'}: # signed/unsigned long
 *             s_proc.kind = RF_StringType.RF_UINT64             # <<<<<<<<<<<<<<
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 */
        __Pyx_TraceLine(284,0,__PYX_ERR(1, 284, __pyx_L4_error))
        __pyx_v_s_proc->kind = RF_UINT64;

        /* "cpp_common.pxd":285
 *         elif typecode in {'l', 'L'}: # signed/unsigned long
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'q', 'Q'}: # signed/unsigned long long
 */
        __Pyx_TraceLine(285,0,__PYX_ERR(1, 285, __pyx_L4_error))
        __pyx_t_8 = __pyx_v_s_proc->length;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_i = __pyx_t_10;

          /* "cpp_common.pxd":286
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]             # <<<<<<<<<<<<<<
 *         elif typecode in {'q', 'Q'}: # signed/unsigned long long
 *             s_proc.kind = RF_StringType.RF_UINT64
 */
          __Pyx_TraceLine(286,0,__PYX_ERR(1, 286, __pyx_L4_error))
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_arr, __pyx_v_i, int64_t, 1, __Pyx_PyInt_From_int64_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 286, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_11 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 286, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)__pyx_t_11);
        }

        /* "cpp_common.pxd":283
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'l', 'L'}: # signed/unsigned long             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        break;
        case 0x71:

        /* "cpp_common.pxd":287
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'q', 'Q'}: # signed/unsigned long long             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        __Pyx_TraceLine(287,0,__PYX_ERR(1, 287, __pyx_L4_error))
        CYTHON_FALLTHROUGH;
        case 81:

        /* "cpp_common.pxd":288
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'q', 'Q'}: # signed/unsigned long long
 *             s_proc.kind = RF_StringType.RF_UINT64             # <<<<<<<<<<<<<<
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 */
        __Pyx_TraceLine(288,0,__PYX_ERR(1, 288, __pyx_L4_error))
        __pyx_v_s_proc->kind = RF_UINT64;

        /* "cpp_common.pxd":289
 *         elif typecode in {'q', 'Q'}: # signed/unsigned long long
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         else: # float/double are hashed
 */
        __Pyx_TraceLine(289,0,__PYX_ERR(1, 289, __pyx_L4_error))
        __pyx_t_8 = __pyx_v_s_proc->length;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_i = __pyx_t_10;

          /* "cpp_common.pxd":290
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]             # <<<<<<<<<<<<<<
 *         else: # float/double are hashed
 *             s_proc.kind = RF_StringType.RF_UINT64
 */
          __Pyx_TraceLine(290,0,__PYX_ERR(1, 290, __pyx_L4_error))
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_arr, __pyx_v_i, int64_t, 1, __Pyx_PyInt_From_int64_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 290, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_11 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 290, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)__pyx_t_11);
        }

        /* "cpp_common.pxd":287
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         elif typecode in {'q', 'Q'}: # signed/unsigned long long             # <<<<<<<<<<<<<<
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 */
        break;
        default:

        /* "cpp_common.pxd":292
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>arr[i]
 *         else: # float/double are hashed
 *             s_proc.kind = RF_StringType.RF_UINT64             # <<<<<<<<<<<<<<
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(arr[i])
 */
        __Pyx_TraceLine(292,0,__PYX_ERR(1, 292, __pyx_L4_error))
        __pyx_v_s_proc->kind = RF_UINT64;

        /* "cpp_common.pxd":293
 *         else: # float/double are hashed
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(arr[i])
 *     except Exception as e:
 */
        __Pyx_TraceLine(293,0,__PYX_ERR(1, 293, __pyx_L4_error))
        __pyx_t_8 = __pyx_v_s_proc->length;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_i = __pyx_t_10;

          /* "cpp_common.pxd":294
 *             s_proc.kind = RF_StringType.RF_UINT64
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(arr[i])             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         free(s_proc.data)
 */
          __Pyx_TraceLine(294,0,__PYX_ERR(1, 294, __pyx_L4_error))
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_arr, __pyx_v_i, int64_t, 1, __Pyx_PyInt_From_int64_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 294, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_12 = PyObject_Hash(__pyx_t_1); if (unlikely(__pyx_t_12 == ((Py_hash_t)-1))) __PYX_ERR(1, 294, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)__pyx_t_12);
        }
        break;
      }

      /* "cpp_common.pxd":265
 *         raise MemoryError
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # ignore signed/unsigned, since it is not relevant in any of the algorithms
 *         if typecode in {'b', 'B'}: # signed/unsigned char
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cpp_common.pxd":295
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(arr[i])
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         free(s_proc.data)
 *         s_proc.data = NULL
 */
    __Pyx_TraceLine(295,0,__PYX_ERR(1, 295, __pyx_L6_except_error))
    __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_13) {
      __Pyx_AddTraceback("cpp_common.hash_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_14, &__pyx_t_15) < 0) __PYX_ERR(1, 295, __pyx_L6_except_error)
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_14);
      __pyx_v_e = __pyx_t_14;
      /*try:*/ {

        /* "cpp_common.pxd":296
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(arr[i])
 *     except Exception as e:
 *         free(s_proc.data)             # <<<<<<<<<<<<<<
 *         s_proc.data = NULL
 *         raise
 */
        __Pyx_TraceLine(296,0,__PYX_ERR(1, 296, __pyx_L29_error))
        free(__pyx_v_s_proc->data);

        /* "cpp_common.pxd":297
 *     except Exception as e:
 *         free(s_proc.data)
 *         s_proc.data = NULL             # <<<<<<<<<<<<<<
 *         raise
 * 
 */
        __Pyx_TraceLine(297,0,__PYX_ERR(1, 297, __pyx_L29_error))
        __pyx_v_s_proc->data = NULL;

        /* "cpp_common.pxd":298
 *         free(s_proc.data)
 *         s_proc.data = NULL
 *         raise             # <<<<<<<<<<<<<<
 * 
 *     s_proc.dtor = default_string_deinit
 */
        __Pyx_TraceLine(298,0,__PYX_ERR(1, 298, __pyx_L29_error))
        __Pyx_GIVEREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_14, __pyx_t_15);
        __pyx_t_1 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; 
        __PYX_ERR(1, 298, __pyx_L29_error)
      }

      /* "cpp_common.pxd":295
 *             for i in range(s_proc.length):
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(arr[i])
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         free(s_proc.data)
 *         s_proc.data = NULL
 */
      __Pyx_TraceLine(295,0,__PYX_ERR(1, 295, __pyx_L29_error))
      /*finally:*/ {
        __pyx_L29_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_22);
          __Pyx_XGOTREF(__pyx_t_23);
          __pyx_t_13 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_XGIVEREF(__pyx_t_22);
            __Pyx_XGIVEREF(__pyx_t_23);
            __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
          }
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_XGIVEREF(__pyx_t_19);
          __Pyx_XGIVEREF(__pyx_t_20);
          __Pyx_ErrRestore(__pyx_t_18, __pyx_t_19, __pyx_t_20);
          __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
          __pyx_lineno = __pyx_t_13; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_17;
          goto __pyx_L6_except_error;
        }
      }
    }
    goto __pyx_L6_except_error;

    /* "cpp_common.pxd":265
 *         raise MemoryError
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # ignore signed/unsigned, since it is not relevant in any of the algorithms
 *         if typecode in {'b', 'B'}: # signed/unsigned char
 */
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "cpp_common.pxd":300
 *         raise
 * 
 *     s_proc.dtor = default_string_deinit             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(300,0,__PYX_ERR(1, 300, __pyx_L1_error))
  __pyx_v_s_proc->dtor = default_string_deinit;

  /* "cpp_common.pxd":301
 * 
 *     s_proc.dtor = default_string_deinit
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(301,0,__PYX_ERR(1, 301, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cpp_common.pxd":255
 *     void validate_string(object py_str, const char* err) except +
 * 
 * cdef inline bool hash_array(arr, RF_String* s_proc) except False:             # <<<<<<<<<<<<<<
 *     # TODO on Cpython this does not require any copies
 *     cdef Py_UCS4 typecode = <Py_UCS4>arr.typecode
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("cpp_common.hash_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":304
 * 
 * 
 * cdef inline bool hash_sequence(seq, RF_String* s_proc) except False:             # <<<<<<<<<<<<<<
 *     s_proc.length = <int64_t>len(seq)
 * 
 */

static CYTHON_INLINE bool __pyx_f_10cpp_common_hash_sequence(PyObject *__pyx_v_seq, RF_String *__pyx_v_s_proc) {
  int64_t __pyx_v_i;
  PyObject *__pyx_v_elem = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_e = NULL;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int64_t __pyx_t_6;
  int64_t __pyx_t_7;
  int64_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  Py_hash_t __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hash_sequence", 1);
  __Pyx_TraceCall("hash_sequence", __pyx_f[1], 304, 0, __PYX_ERR(1, 304, __pyx_L1_error));

  /* "cpp_common.pxd":305
 * 
 * cdef inline bool hash_sequence(seq, RF_String* s_proc) except False:
 *     s_proc.length = <int64_t>len(seq)             # <<<<<<<<<<<<<<
 * 
 *     s_proc.data = malloc(s_proc.length * sizeof(uint64_t))
 */
  __Pyx_TraceLine(305,0,__PYX_ERR(1, 305, __pyx_L1_error))
  __pyx_t_1 = PyObject_Length(__pyx_v_seq); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 305, __pyx_L1_error)
  __pyx_v_s_proc->length = ((int64_t)__pyx_t_1);

  /* "cpp_common.pxd":307
 *     s_proc.length = <int64_t>len(seq)
 * 
 *     s_proc.data = malloc(s_proc.length * sizeof(uint64_t))             # <<<<<<<<<<<<<<
 * 
 *     if s_proc.data == NULL:
 */
  __Pyx_TraceLine(307,0,__PYX_ERR(1, 307, __pyx_L1_error))
  __pyx_v_s_proc->data = malloc((__pyx_v_s_proc->length * (sizeof(uint64_t))));

  /* "cpp_common.pxd":309
 *     s_proc.data = malloc(s_proc.length * sizeof(uint64_t))
 * 
 *     if s_proc.data == NULL:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  __Pyx_TraceLine(309,0,__PYX_ERR(1, 309, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v_s_proc->data == NULL);
  if (unlikely(__pyx_t_2)) {

    /* "cpp_common.pxd":310
 * 
 *     if s_proc.data == NULL:
 *         raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __Pyx_TraceLine(310,0,__PYX_ERR(1, 310, __pyx_L1_error))
    PyErr_NoMemory(); __PYX_ERR(1, 310, __pyx_L1_error)

    /* "cpp_common.pxd":309
 *     s_proc.data = malloc(s_proc.length * sizeof(uint64_t))
 * 
 *     if s_proc.data == NULL:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  }

  /* "cpp_common.pxd":312
 *         raise MemoryError
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         s_proc.kind = RF_StringType.RF_UINT64
 *         for i in range(s_proc.length):
 */
  __Pyx_TraceLine(312,0,__PYX_ERR(1, 312, __pyx_L1_error))
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "cpp_common.pxd":313
 * 
 *     try:
 *         s_proc.kind = RF_StringType.RF_UINT64             # <<<<<<<<<<<<<<
 *         for i in range(s_proc.length):
 *             elem = seq[i]
 */
      __Pyx_TraceLine(313,0,__PYX_ERR(1, 313, __pyx_L4_error))
      __pyx_v_s_proc->kind = RF_UINT64;

      /* "cpp_common.pxd":314
 *     try:
 *         s_proc.kind = RF_StringType.RF_UINT64
 *         for i in range(s_proc.length):             # <<<<<<<<<<<<<<
 *             elem = seq[i]
 *             # this is required so e.g. a list of char can be compared to a string
 */
      __Pyx_TraceLine(314,0,__PYX_ERR(1, 314, __pyx_L4_error))
      __pyx_t_6 = __pyx_v_s_proc->length;
      __pyx_t_7 = __pyx_t_6;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "cpp_common.pxd":315
 *         s_proc.kind = RF_StringType.RF_UINT64
 *         for i in range(s_proc.length):
 *             elem = seq[i]             # <<<<<<<<<<<<<<
 *             # this is required so e.g. a list of char can be compared to a string
 *             if isinstance(elem, str) and len(elem) == 1:
 */
        __Pyx_TraceLine(315,0,__PYX_ERR(1, 315, __pyx_L4_error))
        __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_seq, __pyx_v_i, int64_t, 1, __Pyx_PyInt_From_int64_t, 0, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 315, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_XDECREF_SET(__pyx_v_elem, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "cpp_common.pxd":317
 *             elem = seq[i]
 *             # this is required so e.g. a list of char can be compared to a string
 *             if isinstance(elem, str) and len(elem) == 1:             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>elem
 *             elif isinstance(elem, int) and elem == -1:
 */
        __Pyx_TraceLine(317,0,__PYX_ERR(1, 317, __pyx_L4_error))
        __pyx_t_10 = PyUnicode_Check(__pyx_v_elem); 
        if (__pyx_t_10) {
        } else {
          __pyx_t_2 = __pyx_t_10;
          goto __pyx_L13_bool_binop_done;
        }
        __pyx_t_1 = PyObject_Length(__pyx_v_elem); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 317, __pyx_L4_error)
        __pyx_t_10 = (__pyx_t_1 == 1);
        __pyx_t_2 = __pyx_t_10;
        __pyx_L13_bool_binop_done:;
        if (__pyx_t_2) {

          /* "cpp_common.pxd":318
 *             # this is required so e.g. a list of char can be compared to a string
 *             if isinstance(elem, str) and len(elem) == 1:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>elem             # <<<<<<<<<<<<<<
 *             elif isinstance(elem, int) and elem == -1:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>-1
 */
          __Pyx_TraceLine(318,0,__PYX_ERR(1, 318, __pyx_L4_error))
          __pyx_t_11 = __Pyx_PyObject_AsPy_UCS4(__pyx_v_elem); if (unlikely((__pyx_t_11 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(1, 318, __pyx_L4_error)
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)((Py_UCS4)__pyx_t_11));

          /* "cpp_common.pxd":317
 *             elem = seq[i]
 *             # this is required so e.g. a list of char can be compared to a string
 *             if isinstance(elem, str) and len(elem) == 1:             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>elem
 *             elif isinstance(elem, int) and elem == -1:
 */
          goto __pyx_L12;
        }

        /* "cpp_common.pxd":319
 *             if isinstance(elem, str) and len(elem) == 1:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>elem
 *             elif isinstance(elem, int) and elem == -1:             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>-1
 *             else:
 */
        __Pyx_TraceLine(319,0,__PYX_ERR(1, 319, __pyx_L4_error))
        __pyx_t_10 = PyInt_Check(__pyx_v_elem); 
        if (__pyx_t_10) {
        } else {
          __pyx_t_2 = __pyx_t_10;
          goto __pyx_L15_bool_binop_done;
        }
        __pyx_t_10 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_elem, __pyx_int_neg_1, -1L, 0)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(1, 319, __pyx_L4_error)
        __pyx_t_2 = __pyx_t_10;
        __pyx_L15_bool_binop_done:;
        if (__pyx_t_2) {

          /* "cpp_common.pxd":320
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>elem
 *             elif isinstance(elem, int) and elem == -1:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>-1             # <<<<<<<<<<<<<<
 *             else:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(elem)
 */
          __Pyx_TraceLine(320,0,__PYX_ERR(1, 320, __pyx_L4_error))
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)-1L);

          /* "cpp_common.pxd":319
 *             if isinstance(elem, str) and len(elem) == 1:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t><Py_UCS4>elem
 *             elif isinstance(elem, int) and elem == -1:             # <<<<<<<<<<<<<<
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>-1
 *             else:
 */
          goto __pyx_L12;
        }

        /* "cpp_common.pxd":322
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>-1
 *             else:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(elem)             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         free(s_proc.data)
 */
        __Pyx_TraceLine(322,0,__PYX_ERR(1, 322, __pyx_L4_error))
        /*else*/ {
          __pyx_t_12 = PyObject_Hash(__pyx_v_elem); if (unlikely(__pyx_t_12 == ((Py_hash_t)-1))) __PYX_ERR(1, 322, __pyx_L4_error)
          (((uint64_t *)__pyx_v_s_proc->data)[__pyx_v_i]) = ((uint64_t)__pyx_t_12);
        }
        __pyx_L12:;
      }

      /* "cpp_common.pxd":312
 *         raise MemoryError
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         s_proc.kind = RF_StringType.RF_UINT64
 *         for i in range(s_proc.length):
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "cpp_common.pxd":323
 *             else:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(elem)
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         free(s_proc.data)
 *         s_proc.data = NULL
 */
    __Pyx_TraceLine(323,0,__PYX_ERR(1, 323, __pyx_L6_except_error))
    __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_13) {
      __Pyx_AddTraceback("cpp_common.hash_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_14, &__pyx_t_15) < 0) __PYX_ERR(1, 323, __pyx_L6_except_error)
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_14);
      __pyx_v_e = __pyx_t_14;
      /*try:*/ {

        /* "cpp_common.pxd":324
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(elem)
 *     except Exception as e:
 *         free(s_proc.data)             # <<<<<<<<<<<<<<
 *         s_proc.data = NULL
 *         raise
 */
        __Pyx_TraceLine(324,0,__PYX_ERR(1, 324, __pyx_L22_error))
        free(__pyx_v_s_proc->data);

        /* "cpp_common.pxd":325
 *     except Exception as e:
 *         free(s_proc.data)
 *         s_proc.data = NULL             # <<<<<<<<<<<<<<
 *         raise
 * 
 */
        __Pyx_TraceLine(325,0,__PYX_ERR(1, 325, __pyx_L22_error))
        __pyx_v_s_proc->data = NULL;

        /* "cpp_common.pxd":326
 *         free(s_proc.data)
 *         s_proc.data = NULL
 *         raise             # <<<<<<<<<<<<<<
 * 
 *     s_proc.dtor = default_string_deinit
 */
        __Pyx_TraceLine(326,0,__PYX_ERR(1, 326, __pyx_L22_error))
        __Pyx_GIVEREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_ErrRestoreWithState(__pyx_t_9, __pyx_t_14, __pyx_t_15);
        __pyx_t_9 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; 
        __PYX_ERR(1, 326, __pyx_L22_error)
      }

      /* "cpp_common.pxd":323
 *             else:
 *                 (<uint64_t*>s_proc.data)[i] = <uint64_t>hash(elem)
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         free(s_proc.data)
 *         s_proc.data = NULL
 */
      __Pyx_TraceLine(323,0,__PYX_ERR(1, 323, __pyx_L22_error))
      /*finally:*/ {
        __pyx_L22_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_22);
          __Pyx_XGOTREF(__pyx_t_23);
          __pyx_t_13 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_XGIVEREF(__pyx_t_22);
            __Pyx_XGIVEREF(__pyx_t_23);
            __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
          }
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_XGIVEREF(__pyx_t_19);
          __Pyx_XGIVEREF(__pyx_t_20);
          __Pyx_ErrRestore(__pyx_t_18, __pyx_t_19, __pyx_t_20);
          __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
          __pyx_lineno = __pyx_t_13; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_17;
          goto __pyx_L6_except_error;
        }
      }
    }
    goto __pyx_L6_except_error;

    /* "cpp_common.pxd":312
 *         raise MemoryError
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         s_proc.kind = RF_StringType.RF_UINT64
 *         for i in range(s_proc.length):
 */
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "cpp_common.pxd":328
 *         raise
 * 
 *     s_proc.dtor = default_string_deinit             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(328,0,__PYX_ERR(1, 328, __pyx_L1_error))
  __pyx_v_s_proc->dtor = default_string_deinit;

  /* "cpp_common.pxd":329
 * 
 *     s_proc.dtor = default_string_deinit
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline bool is_none(s) noexcept:
 */
  __Pyx_TraceLine(329,0,__PYX_ERR(1, 329, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cpp_common.pxd":304
 * 
 * 
 * cdef inline bool hash_sequence(seq, RF_String* s_proc) except False:             # <<<<<<<<<<<<<<
 *     s_proc.length = <int64_t>len(seq)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("cpp_common.hash_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_elem);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":331
 *     return True
 * 
 * cdef inline bool is_none(s) noexcept:             # <<<<<<<<<<<<<<
 *     if s is None or s is pandas_NA:
 *         return True
 */

static CYTHON_INLINE bool __pyx_f_10cpp_common_is_none(PyObject *__pyx_v_s) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_none", 1);
  __Pyx_TraceCall("is_none", __pyx_f[1], 331, 0, __PYX_ERR(1, 331, __pyx_L1_error));

  /* "cpp_common.pxd":332
 * 
 * cdef inline bool is_none(s) noexcept:
 *     if s is None or s is pandas_NA:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __Pyx_TraceLine(332,0,__PYX_ERR(1, 332, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v_s == Py_None);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pandas_NA); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = (__pyx_v_s == __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cpp_common.pxd":333
 * cdef inline bool is_none(s) noexcept:
 *     if s is None or s is pandas_NA:
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(s, float) and isnan(<double>s):
 */
    __Pyx_TraceLine(333,0,__PYX_ERR(1, 333, __pyx_L1_error))
    __pyx_r = 1;
    goto __pyx_L0;

    /* "cpp_common.pxd":332
 * 
 * cdef inline bool is_none(s) noexcept:
 *     if s is None or s is pandas_NA:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "cpp_common.pxd":335
 *         return True
 * 
 *     if isinstance(s, float) and isnan(<double>s):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __Pyx_TraceLine(335,0,__PYX_ERR(1, 335, __pyx_L1_error))
  __pyx_t_2 = PyFloat_Check(__pyx_v_s); 
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_s); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 335, __pyx_L1_error)
  try {
    __pyx_t_2 = std::isnan(((double)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 335, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cpp_common.pxd":336
 * 
 *     if isinstance(s, float) and isnan(<double>s):
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     return False
 */
    __Pyx_TraceLine(336,0,__PYX_ERR(1, 336, __pyx_L1_error))
    __pyx_r = 1;
    goto __pyx_L0;

    /* "cpp_common.pxd":335
 *         return True
 * 
 *     if isinstance(s, float) and isnan(<double>s):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "cpp_common.pxd":338
 *         return True
 * 
 *     return False             # <<<<<<<<<<<<<<
 * 
 * # todo we will probably want to clean up the various methods of
 */
  __Pyx_TraceLine(338,0,__PYX_ERR(1, 338, __pyx_L1_error))
  __pyx_r = 0;
  goto __pyx_L0;

  /* "cpp_common.pxd":331
 *     return True
 * 
 * cdef inline bool is_none(s) noexcept:             # <<<<<<<<<<<<<<
 *     if s is None or s is pandas_NA:
 *         return True
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cpp_common.is_none", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":343
 * # converting strings. This has to be done carefully, since especially with preprocessor functions
 * # the none check is often required before calling the preprocessing functions to keep the current behaviour
 * cdef inline bool conv_sequence_with_none(seq, RF_String* c_seq) except False:             # <<<<<<<<<<<<<<
 *     if is_valid_string(seq):
 *         c_seq[0] = move(convert_string(seq))
 */

static CYTHON_INLINE bool __pyx_f_10cpp_common_conv_sequence_with_none(PyObject *__pyx_v_seq, RF_String *__pyx_v_c_seq) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("conv_sequence_with_none", 1);
  __Pyx_TraceCall("conv_sequence_with_none", __pyx_f[1], 343, 0, __PYX_ERR(1, 343, __pyx_L1_error));

  /* "cpp_common.pxd":344
 * # the none check is often required before calling the preprocessing functions to keep the current behaviour
 * cdef inline bool conv_sequence_with_none(seq, RF_String* c_seq) except False:
 *     if is_valid_string(seq):             # <<<<<<<<<<<<<<
 *         c_seq[0] = move(convert_string(seq))
 *     elif is_none(seq):
 */
  __Pyx_TraceLine(344,0,__PYX_ERR(1, 344, __pyx_L1_error))
  try {
    __pyx_t_1 = is_valid_string(__pyx_v_seq);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 344, __pyx_L1_error)
  }
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cpp_common.pxd":345
 * cdef inline bool conv_sequence_with_none(seq, RF_String* c_seq) except False:
 *     if is_valid_string(seq):
 *         c_seq[0] = move(convert_string(seq))             # <<<<<<<<<<<<<<
 *     elif is_none(seq):
 *         c_seq.length = 0
 */
    __Pyx_TraceLine(345,0,__PYX_ERR(1, 345, __pyx_L1_error))
    (__pyx_v_c_seq[0]) = cython_std::move<RF_String>(convert_string(__pyx_v_seq));

    /* "cpp_common.pxd":344
 * # the none check is often required before calling the preprocessing functions to keep the current behaviour
 * cdef inline bool conv_sequence_with_none(seq, RF_String* c_seq) except False:
 *     if is_valid_string(seq):             # <<<<<<<<<<<<<<
 *         c_seq[0] = move(convert_string(seq))
 *     elif is_none(seq):
 */
    goto __pyx_L3;
  }

  /* "cpp_common.pxd":346
 *     if is_valid_string(seq):
 *         c_seq[0] = move(convert_string(seq))
 *     elif is_none(seq):             # <<<<<<<<<<<<<<
 *         c_seq.length = 0
 *         c_seq.data = NULL
 */
  __Pyx_TraceLine(346,0,__PYX_ERR(1, 346, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_seq) != 0);
  if (__pyx_t_2) {

    /* "cpp_common.pxd":347
 *         c_seq[0] = move(convert_string(seq))
 *     elif is_none(seq):
 *         c_seq.length = 0             # <<<<<<<<<<<<<<
 *         c_seq.data = NULL
 *     elif isinstance(seq, array):
 */
    __Pyx_TraceLine(347,0,__PYX_ERR(1, 347, __pyx_L1_error))
    __pyx_v_c_seq->length = 0;

    /* "cpp_common.pxd":348
 *     elif is_none(seq):
 *         c_seq.length = 0
 *         c_seq.data = NULL             # <<<<<<<<<<<<<<
 *     elif isinstance(seq, array):
 *         hash_array(seq, c_seq)
 */
    __Pyx_TraceLine(348,0,__PYX_ERR(1, 348, __pyx_L1_error))
    __pyx_v_c_seq->data = NULL;

    /* "cpp_common.pxd":346
 *     if is_valid_string(seq):
 *         c_seq[0] = move(convert_string(seq))
 *     elif is_none(seq):             # <<<<<<<<<<<<<<
 *         c_seq.length = 0
 *         c_seq.data = NULL
 */
    goto __pyx_L3;
  }

  /* "cpp_common.pxd":349
 *         c_seq.length = 0
 *         c_seq.data = NULL
 *     elif isinstance(seq, array):             # <<<<<<<<<<<<<<
 *         hash_array(seq, c_seq)
 *     else:
 */
  __Pyx_TraceLine(349,0,__PYX_ERR(1, 349, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_seq, __pyx_t_3); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(1, 349, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "cpp_common.pxd":350
 *         c_seq.data = NULL
 *     elif isinstance(seq, array):
 *         hash_array(seq, c_seq)             # <<<<<<<<<<<<<<
 *     else:
 *         hash_sequence(seq, c_seq)
 */
    __Pyx_TraceLine(350,0,__PYX_ERR(1, 350, __pyx_L1_error))
    __pyx_t_4 = __pyx_f_10cpp_common_hash_array(__pyx_v_seq, __pyx_v_c_seq); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(1, 350, __pyx_L1_error)

    /* "cpp_common.pxd":349
 *         c_seq.length = 0
 *         c_seq.data = NULL
 *     elif isinstance(seq, array):             # <<<<<<<<<<<<<<
 *         hash_array(seq, c_seq)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "cpp_common.pxd":352
 *         hash_array(seq, c_seq)
 *     else:
 *         hash_sequence(seq, c_seq)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
  __Pyx_TraceLine(352,0,__PYX_ERR(1, 352, __pyx_L1_error))
  /*else*/ {
    __pyx_t_4 = __pyx_f_10cpp_common_hash_sequence(__pyx_v_seq, __pyx_v_c_seq); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(1, 352, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cpp_common.pxd":354
 *         hash_sequence(seq, c_seq)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline RF_String conv_sequence(seq) except *:
 */
  __Pyx_TraceLine(354,0,__PYX_ERR(1, 354, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cpp_common.pxd":343
 * # converting strings. This has to be done carefully, since especially with preprocessor functions
 * # the none check is often required before calling the preprocessing functions to keep the current behaviour
 * cdef inline bool conv_sequence_with_none(seq, RF_String* c_seq) except False:             # <<<<<<<<<<<<<<
 *     if is_valid_string(seq):
 *         c_seq[0] = move(convert_string(seq))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpp_common.conv_sequence_with_none", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":356
 *     return True
 * 
 * cdef inline RF_String conv_sequence(seq) except *:             # <<<<<<<<<<<<<<
 *     cdef RF_String c_seq
 *     if is_valid_string(seq):
 */

static CYTHON_INLINE RF_String __pyx_f_10cpp_common_conv_sequence(PyObject *__pyx_v_seq) {
  RF_String __pyx_v_c_seq;
  RF_String __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("conv_sequence", 1);
  __Pyx_TraceCall("conv_sequence", __pyx_f[1], 356, 0, __PYX_ERR(1, 356, __pyx_L1_error));

  /* "cpp_common.pxd":358
 * cdef inline RF_String conv_sequence(seq) except *:
 *     cdef RF_String c_seq
 *     if is_valid_string(seq):             # <<<<<<<<<<<<<<
 *         c_seq = move(convert_string(seq))
 *     elif isinstance(seq, array):
 */
  __Pyx_TraceLine(358,0,__PYX_ERR(1, 358, __pyx_L1_error))
  try {
    __pyx_t_1 = is_valid_string(__pyx_v_seq);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 358, __pyx_L1_error)
  }
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cpp_common.pxd":359
 *     cdef RF_String c_seq
 *     if is_valid_string(seq):
 *         c_seq = move(convert_string(seq))             # <<<<<<<<<<<<<<
 *     elif isinstance(seq, array):
 *         hash_array(seq, &c_seq)
 */
    __Pyx_TraceLine(359,0,__PYX_ERR(1, 359, __pyx_L1_error))
    __pyx_v_c_seq = cython_std::move<RF_String>(convert_string(__pyx_v_seq));

    /* "cpp_common.pxd":358
 * cdef inline RF_String conv_sequence(seq) except *:
 *     cdef RF_String c_seq
 *     if is_valid_string(seq):             # <<<<<<<<<<<<<<
 *         c_seq = move(convert_string(seq))
 *     elif isinstance(seq, array):
 */
    goto __pyx_L3;
  }

  /* "cpp_common.pxd":360
 *     if is_valid_string(seq):
 *         c_seq = move(convert_string(seq))
 *     elif isinstance(seq, array):             # <<<<<<<<<<<<<<
 *         hash_array(seq, &c_seq)
 *     else:
 */
  __Pyx_TraceLine(360,0,__PYX_ERR(1, 360, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_seq, __pyx_t_3); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(1, 360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "cpp_common.pxd":361
 *         c_seq = move(convert_string(seq))
 *     elif isinstance(seq, array):
 *         hash_array(seq, &c_seq)             # <<<<<<<<<<<<<<
 *     else:
 *         hash_sequence(seq, &c_seq)
 */
    __Pyx_TraceLine(361,0,__PYX_ERR(1, 361, __pyx_L1_error))
    __pyx_t_4 = __pyx_f_10cpp_common_hash_array(__pyx_v_seq, (&__pyx_v_c_seq)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(1, 361, __pyx_L1_error)

    /* "cpp_common.pxd":360
 *     if is_valid_string(seq):
 *         c_seq = move(convert_string(seq))
 *     elif isinstance(seq, array):             # <<<<<<<<<<<<<<
 *         hash_array(seq, &c_seq)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "cpp_common.pxd":363
 *         hash_array(seq, &c_seq)
 *     else:
 *         hash_sequence(seq, &c_seq)             # <<<<<<<<<<<<<<
 * 
 *     return move(c_seq)
 */
  __Pyx_TraceLine(363,0,__PYX_ERR(1, 363, __pyx_L1_error))
  /*else*/ {
    __pyx_t_4 = __pyx_f_10cpp_common_hash_sequence(__pyx_v_seq, (&__pyx_v_c_seq)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(1, 363, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cpp_common.pxd":365
 *         hash_sequence(seq, &c_seq)
 * 
 *     return move(c_seq)             # <<<<<<<<<<<<<<
 * 
 * cdef inline double get_score_cutoff_f64(score_cutoff, float worst_score, float optimal_score) except *:
 */
  __Pyx_TraceLine(365,0,__PYX_ERR(1, 365, __pyx_L1_error))
  __pyx_r = cython_std::move<RF_String>(__pyx_v_c_seq);
  goto __pyx_L0;

  /* "cpp_common.pxd":356
 *     return True
 * 
 * cdef inline RF_String conv_sequence(seq) except *:             # <<<<<<<<<<<<<<
 *     cdef RF_String c_seq
 *     if is_valid_string(seq):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpp_common.conv_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":367
 *     return move(c_seq)
 * 
 * cdef inline double get_score_cutoff_f64(score_cutoff, float worst_score, float optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef float c_score_cutoff = worst_score
 * 
 */

static CYTHON_INLINE double __pyx_f_10cpp_common_get_score_cutoff_f64(PyObject *__pyx_v_score_cutoff, float __pyx_v_worst_score, float __pyx_v_optimal_score) {
  float __pyx_v_c_score_cutoff;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  float __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_score_cutoff_f64", 1);
  __Pyx_TraceCall("get_score_cutoff_f64", __pyx_f[1], 367, 0, __PYX_ERR(1, 367, __pyx_L1_error));

  /* "cpp_common.pxd":368
 * 
 * cdef inline double get_score_cutoff_f64(score_cutoff, float worst_score, float optimal_score) except *:
 *     cdef float c_score_cutoff = worst_score             # <<<<<<<<<<<<<<
 * 
 *     if score_cutoff is not None:
 */
  __Pyx_TraceLine(368,0,__PYX_ERR(1, 368, __pyx_L1_error))
  __pyx_v_c_score_cutoff = __pyx_v_worst_score;

  /* "cpp_common.pxd":370
 *     cdef float c_score_cutoff = worst_score
 * 
 *     if score_cutoff is not None:             # <<<<<<<<<<<<<<
 *         c_score_cutoff = score_cutoff
 *         if optimal_score > worst_score:
 */
  __Pyx_TraceLine(370,0,__PYX_ERR(1, 370, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_score_cutoff != Py_None);
  if (__pyx_t_1) {

    /* "cpp_common.pxd":371
 * 
 *     if score_cutoff is not None:
 *         c_score_cutoff = score_cutoff             # <<<<<<<<<<<<<<
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 */
    __Pyx_TraceLine(371,0,__PYX_ERR(1, 371, __pyx_L1_error))
    __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_v_score_cutoff); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 371, __pyx_L1_error)
    __pyx_v_c_score_cutoff = __pyx_t_2;

    /* "cpp_common.pxd":372
 *     if score_cutoff is not None:
 *         c_score_cutoff = score_cutoff
 *         if optimal_score > worst_score:             # <<<<<<<<<<<<<<
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 */
    __Pyx_TraceLine(372,0,__PYX_ERR(1, 372, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_optimal_score > __pyx_v_worst_score);
    if (__pyx_t_1) {

      /* "cpp_common.pxd":374
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError("score_cutoff has to be in the range of %s - %s" % (worst_score, optimal_score))
 *         else:
 */
      __Pyx_TraceLine(374,0,__PYX_ERR(1, 374, __pyx_L1_error))
      __pyx_t_3 = (__pyx_v_c_score_cutoff < __pyx_v_worst_score);
      if (!__pyx_t_3) {
      } else {
        __pyx_t_1 = __pyx_t_3;
        goto __pyx_L6_bool_binop_done;
      }
      __pyx_t_3 = (__pyx_v_c_score_cutoff > __pyx_v_optimal_score);
      __pyx_t_1 = __pyx_t_3;
      __pyx_L6_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "cpp_common.pxd":375
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 *                 raise TypeError("score_cutoff has to be in the range of %s - %s" % (worst_score, optimal_score))             # <<<<<<<<<<<<<<
 *         else:
 *             # e.g. DBL_MAX - 0
 */
        __Pyx_TraceLine(375,0,__PYX_ERR(1, 375, __pyx_L1_error))
        __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = 0;
        __pyx_t_6 = 127;
        __Pyx_INCREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_5 += 39;
        __Pyx_GIVEREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_7 = PyFloat_FromDouble(__pyx_v_worst_score); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_t_7), __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_kp_u_);
        __pyx_t_5 += 3;
        __Pyx_GIVEREF(__pyx_kp_u_);
        PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_);
        __pyx_t_8 = PyFloat_FromDouble(__pyx_v_optimal_score); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_t_8), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_4, 4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 375, __pyx_L1_error)

        /* "cpp_common.pxd":374
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError("score_cutoff has to be in the range of %s - %s" % (worst_score, optimal_score))
 *         else:
 */
      }

      /* "cpp_common.pxd":372
 *     if score_cutoff is not None:
 *         c_score_cutoff = score_cutoff
 *         if optimal_score > worst_score:             # <<<<<<<<<<<<<<
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 */
      goto __pyx_L4;
    }

    /* "cpp_common.pxd":378
 *         else:
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 */
    __Pyx_TraceLine(378,0,__PYX_ERR(1, 378, __pyx_L1_error))
    /*else*/ {
      __pyx_t_3 = (__pyx_v_c_score_cutoff > __pyx_v_worst_score);
      if (!__pyx_t_3) {
      } else {
        __pyx_t_1 = __pyx_t_3;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_3 = (__pyx_v_c_score_cutoff < __pyx_v_optimal_score);
      __pyx_t_1 = __pyx_t_3;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "cpp_common.pxd":379
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")             # <<<<<<<<<<<<<<
 * 
 *     return c_score_cutoff
 */
        __Pyx_TraceLine(379,0,__PYX_ERR(1, 379, __pyx_L1_error))
        __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 379, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = 0;
        __pyx_t_6 = 127;
        __Pyx_INCREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_5 += 39;
        __Pyx_GIVEREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_7 = PyFloat_FromDouble(__pyx_v_optimal_score); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 379, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 379, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_kp_u_);
        __pyx_t_5 += 3;
        __Pyx_GIVEREF(__pyx_kp_u_);
        PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_);
        __pyx_t_8 = PyFloat_FromDouble(__pyx_v_worst_score); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 379, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 379, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_4, 4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 379, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 379, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 379, __pyx_L1_error)

        /* "cpp_common.pxd":378
 *         else:
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 */
      }
    }
    __pyx_L4:;

    /* "cpp_common.pxd":370
 *     cdef float c_score_cutoff = worst_score
 * 
 *     if score_cutoff is not None:             # <<<<<<<<<<<<<<
 *         c_score_cutoff = score_cutoff
 *         if optimal_score > worst_score:
 */
  }

  /* "cpp_common.pxd":381
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 *     return c_score_cutoff             # <<<<<<<<<<<<<<
 * 
 * cdef inline int64_t get_score_cutoff_i64(score_cutoff, int64_t worst_score, int64_t optimal_score) except *:
 */
  __Pyx_TraceLine(381,0,__PYX_ERR(1, 381, __pyx_L1_error))
  __pyx_r = __pyx_v_c_score_cutoff;
  goto __pyx_L0;

  /* "cpp_common.pxd":367
 *     return move(c_seq)
 * 
 * cdef inline double get_score_cutoff_f64(score_cutoff, float worst_score, float optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef float c_score_cutoff = worst_score
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cpp_common.get_score_cutoff_f64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":383
 *     return c_score_cutoff
 * 
 * cdef inline int64_t get_score_cutoff_i64(score_cutoff, int64_t worst_score, int64_t optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef int64_t c_score_cutoff = worst_score
 * 
 */

static CYTHON_INLINE int64_t __pyx_f_10cpp_common_get_score_cutoff_i64(PyObject *__pyx_v_score_cutoff, int64_t __pyx_v_worst_score, int64_t __pyx_v_optimal_score) {
  int64_t __pyx_v_c_score_cutoff;
  int64_t __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_score_cutoff_i64", 1);
  __Pyx_TraceCall("get_score_cutoff_i64", __pyx_f[1], 383, 0, __PYX_ERR(1, 383, __pyx_L1_error));

  /* "cpp_common.pxd":384
 * 
 * cdef inline int64_t get_score_cutoff_i64(score_cutoff, int64_t worst_score, int64_t optimal_score) except *:
 *     cdef int64_t c_score_cutoff = worst_score             # <<<<<<<<<<<<<<
 * 
 *     if score_cutoff is not None:
 */
  __Pyx_TraceLine(384,0,__PYX_ERR(1, 384, __pyx_L1_error))
  __pyx_v_c_score_cutoff = __pyx_v_worst_score;

  /* "cpp_common.pxd":386
 *     cdef int64_t c_score_cutoff = worst_score
 * 
 *     if score_cutoff is not None:             # <<<<<<<<<<<<<<
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 */
  __Pyx_TraceLine(386,0,__PYX_ERR(1, 386, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_score_cutoff != Py_None);
  if (__pyx_t_1) {

    /* "cpp_common.pxd":387
 * 
 *     if score_cutoff is not None:
 *         if optimal_score > worst_score:             # <<<<<<<<<<<<<<
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 */
    __Pyx_TraceLine(387,0,__PYX_ERR(1, 387, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_optimal_score > __pyx_v_worst_score);
    if (__pyx_t_1) {

      /* "cpp_common.pxd":389
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {worst_score} - {optimal_score}")
 *         else:
 */
      __Pyx_TraceLine(389,0,__PYX_ERR(1, 389, __pyx_L1_error))
      __pyx_t_2 = (__pyx_v_c_score_cutoff < __pyx_v_worst_score);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L6_bool_binop_done;
      }
      __pyx_t_2 = (__pyx_v_c_score_cutoff > __pyx_v_optimal_score);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L6_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "cpp_common.pxd":390
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 *                 raise TypeError(f"score_cutoff has to be in the range of {worst_score} - {optimal_score}")             # <<<<<<<<<<<<<<
 *         else:
 *             # e.g. DBL_MAX - 0
 */
        __Pyx_TraceLine(390,0,__PYX_ERR(1, 390, __pyx_L1_error))
        __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = 0;
        __pyx_t_5 = 127;
        __Pyx_INCREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_4 += 39;
        __Pyx_GIVEREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_6 = __Pyx_PyInt_From_int64_t(__pyx_v_worst_score); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
        __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_);
        __pyx_t_4 += 3;
        __Pyx_GIVEREF(__pyx_kp_u_);
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_);
        __pyx_t_7 = __Pyx_PyInt_From_int64_t(__pyx_v_optimal_score); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
        __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_3, 4, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(1, 390, __pyx_L1_error)

        /* "cpp_common.pxd":389
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {worst_score} - {optimal_score}")
 *         else:
 */
      }

      /* "cpp_common.pxd":387
 * 
 *     if score_cutoff is not None:
 *         if optimal_score > worst_score:             # <<<<<<<<<<<<<<
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 */
      goto __pyx_L4;
    }

    /* "cpp_common.pxd":393
 *         else:
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 */
    __Pyx_TraceLine(393,0,__PYX_ERR(1, 393, __pyx_L1_error))
    /*else*/ {
      __pyx_t_2 = (__pyx_v_c_score_cutoff > __pyx_v_worst_score);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_2 = (__pyx_v_c_score_cutoff < __pyx_v_optimal_score);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "cpp_common.pxd":394
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")             # <<<<<<<<<<<<<<
 * 
 *     return c_score_cutoff
 */
        __Pyx_TraceLine(394,0,__PYX_ERR(1, 394, __pyx_L1_error))
        __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = 0;
        __pyx_t_5 = 127;
        __Pyx_INCREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_4 += 39;
        __Pyx_GIVEREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_6 = __Pyx_PyInt_From_int64_t(__pyx_v_optimal_score); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
        __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_);
        __pyx_t_4 += 3;
        __Pyx_GIVEREF(__pyx_kp_u_);
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_);
        __pyx_t_7 = __Pyx_PyInt_From_int64_t(__pyx_v_worst_score); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
        __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_3, 4, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(1, 394, __pyx_L1_error)

        /* "cpp_common.pxd":393
 *         else:
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 */
      }
    }
    __pyx_L4:;

    /* "cpp_common.pxd":386
 *     cdef int64_t c_score_cutoff = worst_score
 * 
 *     if score_cutoff is not None:             # <<<<<<<<<<<<<<
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 */
  }

  /* "cpp_common.pxd":396
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 *     return c_score_cutoff             # <<<<<<<<<<<<<<
 * 
 * cdef inline size_t get_score_cutoff_size_t(score_cutoff, size_t worst_score, size_t optimal_score) except *:
 */
  __Pyx_TraceLine(396,0,__PYX_ERR(1, 396, __pyx_L1_error))
  __pyx_r = __pyx_v_c_score_cutoff;
  goto __pyx_L0;

  /* "cpp_common.pxd":383
 *     return c_score_cutoff
 * 
 * cdef inline int64_t get_score_cutoff_i64(score_cutoff, int64_t worst_score, int64_t optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef int64_t c_score_cutoff = worst_score
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cpp_common.get_score_cutoff_i64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":398
 *     return c_score_cutoff
 * 
 * cdef inline size_t get_score_cutoff_size_t(score_cutoff, size_t worst_score, size_t optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef uint64_t c_score_cutoff = worst_score
 * 
 */

static CYTHON_INLINE size_t __pyx_f_10cpp_common_get_score_cutoff_size_t(PyObject *__pyx_v_score_cutoff, size_t __pyx_v_worst_score, size_t __pyx_v_optimal_score) {
  uint64_t __pyx_v_c_score_cutoff;
  size_t __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  uint64_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_score_cutoff_size_t", 1);
  __Pyx_TraceCall("get_score_cutoff_size_t", __pyx_f[1], 398, 0, __PYX_ERR(1, 398, __pyx_L1_error));

  /* "cpp_common.pxd":399
 * 
 * cdef inline size_t get_score_cutoff_size_t(score_cutoff, size_t worst_score, size_t optimal_score) except *:
 *     cdef uint64_t c_score_cutoff = worst_score             # <<<<<<<<<<<<<<
 * 
 *     if score_cutoff is not None:
 */
  __Pyx_TraceLine(399,0,__PYX_ERR(1, 399, __pyx_L1_error))
  __pyx_v_c_score_cutoff = __pyx_v_worst_score;

  /* "cpp_common.pxd":401
 *     cdef uint64_t c_score_cutoff = worst_score
 * 
 *     if score_cutoff is not None:             # <<<<<<<<<<<<<<
 *         c_score_cutoff = score_cutoff
 *         if c_score_cutoff > SIZE_MAX:
 */
  __Pyx_TraceLine(401,0,__PYX_ERR(1, 401, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_score_cutoff != Py_None);
  if (__pyx_t_1) {

    /* "cpp_common.pxd":402
 * 
 *     if score_cutoff is not None:
 *         c_score_cutoff = score_cutoff             # <<<<<<<<<<<<<<
 *         if c_score_cutoff > SIZE_MAX:
 *             c_score_cutoff = SIZE_MAX
 */
    __Pyx_TraceLine(402,0,__PYX_ERR(1, 402, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_v_score_cutoff); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 402, __pyx_L1_error)
    __pyx_v_c_score_cutoff = __pyx_t_2;

    /* "cpp_common.pxd":403
 *     if score_cutoff is not None:
 *         c_score_cutoff = score_cutoff
 *         if c_score_cutoff > SIZE_MAX:             # <<<<<<<<<<<<<<
 *             c_score_cutoff = SIZE_MAX
 * 
 */
    __Pyx_TraceLine(403,0,__PYX_ERR(1, 403, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_c_score_cutoff > SIZE_MAX);
    if (__pyx_t_1) {

      /* "cpp_common.pxd":404
 *         c_score_cutoff = score_cutoff
 *         if c_score_cutoff > SIZE_MAX:
 *             c_score_cutoff = SIZE_MAX             # <<<<<<<<<<<<<<
 * 
 *         if optimal_score > worst_score:
 */
      __Pyx_TraceLine(404,0,__PYX_ERR(1, 404, __pyx_L1_error))
      __pyx_v_c_score_cutoff = SIZE_MAX;

      /* "cpp_common.pxd":403
 *     if score_cutoff is not None:
 *         c_score_cutoff = score_cutoff
 *         if c_score_cutoff > SIZE_MAX:             # <<<<<<<<<<<<<<
 *             c_score_cutoff = SIZE_MAX
 * 
 */
    }

    /* "cpp_common.pxd":406
 *             c_score_cutoff = SIZE_MAX
 * 
 *         if optimal_score > worst_score:             # <<<<<<<<<<<<<<
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 */
    __Pyx_TraceLine(406,0,__PYX_ERR(1, 406, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_optimal_score > __pyx_v_worst_score);
    if (__pyx_t_1) {

      /* "cpp_common.pxd":408
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {worst_score} - {optimal_score}")
 *         else:
 */
      __Pyx_TraceLine(408,0,__PYX_ERR(1, 408, __pyx_L1_error))
      __pyx_t_3 = (__pyx_v_c_score_cutoff < __pyx_v_worst_score);
      if (!__pyx_t_3) {
      } else {
        __pyx_t_1 = __pyx_t_3;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_3 = (__pyx_v_c_score_cutoff > __pyx_v_optimal_score);
      __pyx_t_1 = __pyx_t_3;
      __pyx_L7_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "cpp_common.pxd":409
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 *                 raise TypeError(f"score_cutoff has to be in the range of {worst_score} - {optimal_score}")             # <<<<<<<<<<<<<<
 *         else:
 *             # e.g. DBL_MAX - 0
 */
        __Pyx_TraceLine(409,0,__PYX_ERR(1, 409, __pyx_L1_error))
        __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = 0;
        __pyx_t_6 = 127;
        __Pyx_INCREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_5 += 39;
        __Pyx_GIVEREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_7 = __Pyx_PyUnicode_From_size_t(__pyx_v_worst_score, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_);
        __pyx_t_5 += 3;
        __Pyx_GIVEREF(__pyx_kp_u_);
        PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_);
        __pyx_t_7 = __Pyx_PyUnicode_From_size_t(__pyx_v_optimal_score, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_4, 4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 409, __pyx_L1_error)

        /* "cpp_common.pxd":408
 *         if optimal_score > worst_score:
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {worst_score} - {optimal_score}")
 *         else:
 */
      }

      /* "cpp_common.pxd":406
 *             c_score_cutoff = SIZE_MAX
 * 
 *         if optimal_score > worst_score:             # <<<<<<<<<<<<<<
 *             # e.g. 0.0 - 100.0
 *             if c_score_cutoff < worst_score or c_score_cutoff > optimal_score:
 */
      goto __pyx_L5;
    }

    /* "cpp_common.pxd":412
 *         else:
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 */
    __Pyx_TraceLine(412,0,__PYX_ERR(1, 412, __pyx_L1_error))
    /*else*/ {
      __pyx_t_3 = (__pyx_v_c_score_cutoff > __pyx_v_worst_score);
      if (!__pyx_t_3) {
      } else {
        __pyx_t_1 = __pyx_t_3;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_3 = (__pyx_v_c_score_cutoff < __pyx_v_optimal_score);
      __pyx_t_1 = __pyx_t_3;
      __pyx_L10_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "cpp_common.pxd":413
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")             # <<<<<<<<<<<<<<
 * 
 *     return <size_t>c_score_cutoff
 */
        __Pyx_TraceLine(413,0,__PYX_ERR(1, 413, __pyx_L1_error))
        __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 413, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = 0;
        __pyx_t_6 = 127;
        __Pyx_INCREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_5 += 39;
        __Pyx_GIVEREF(__pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_score_cutoff_has_to_be_in_the_ra);
        __pyx_t_7 = __Pyx_PyUnicode_From_size_t(__pyx_v_optimal_score, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 413, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_);
        __pyx_t_5 += 3;
        __Pyx_GIVEREF(__pyx_kp_u_);
        PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_);
        __pyx_t_7 = __Pyx_PyUnicode_From_size_t(__pyx_v_worst_score, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 413, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_4, 4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 413, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 413, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 413, __pyx_L1_error)

        /* "cpp_common.pxd":412
 *         else:
 *             # e.g. DBL_MAX - 0
 *             if c_score_cutoff > worst_score or c_score_cutoff < optimal_score:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 */
      }
    }
    __pyx_L5:;

    /* "cpp_common.pxd":401
 *     cdef uint64_t c_score_cutoff = worst_score
 * 
 *     if score_cutoff is not None:             # <<<<<<<<<<<<<<
 *         c_score_cutoff = score_cutoff
 *         if c_score_cutoff > SIZE_MAX:
 */
  }

  /* "cpp_common.pxd":415
 *                 raise TypeError(f"score_cutoff has to be in the range of {optimal_score} - {worst_score}")
 * 
 *     return <size_t>c_score_cutoff             # <<<<<<<<<<<<<<
 * 
 * cdef inline bool preprocess_strings(s1, s2, processor, RF_StringWrapper* s1_proc, RF_StringWrapper* s2_proc) except False:
 */
  __Pyx_TraceLine(415,0,__PYX_ERR(1, 415, __pyx_L1_error))
  __pyx_r = ((size_t)__pyx_v_c_score_cutoff);
  goto __pyx_L0;

  /* "cpp_common.pxd":398
 *     return c_score_cutoff
 * 
 * cdef inline size_t get_score_cutoff_size_t(score_cutoff, size_t worst_score, size_t optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef uint64_t c_score_cutoff = worst_score
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cpp_common.get_score_cutoff_size_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":417
 *     return <size_t>c_score_cutoff
 * 
 * cdef inline bool preprocess_strings(s1, s2, processor, RF_StringWrapper* s1_proc, RF_StringWrapper* s2_proc) except False:             # <<<<<<<<<<<<<<
 *     cdef RF_Preprocessor* preprocess_context = NULL
 * 
 */

static CYTHON_INLINE bool __pyx_f_10cpp_common_preprocess_strings(PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, RF_StringWrapper *__pyx_v_s1_proc, RF_StringWrapper *__pyx_v_s2_proc) {
  RF_Preprocessor *__pyx_v_preprocess_context;
  PyObject *__pyx_v_processor_capsule = NULL;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  RF_String __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  void *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  unsigned int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("preprocess_strings", 0);
  __Pyx_TraceCall("preprocess_strings", __pyx_f[1], 417, 0, __PYX_ERR(1, 417, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_s1);
  __Pyx_INCREF(__pyx_v_s2);

  /* "cpp_common.pxd":418
 * 
 * cdef inline bool preprocess_strings(s1, s2, processor, RF_StringWrapper* s1_proc, RF_StringWrapper* s2_proc) except False:
 *     cdef RF_Preprocessor* preprocess_context = NULL             # <<<<<<<<<<<<<<
 * 
 *     if not processor:
 */
  __Pyx_TraceLine(418,0,__PYX_ERR(1, 418, __pyx_L1_error))
  __pyx_v_preprocess_context = NULL;

  /* "cpp_common.pxd":420
 *     cdef RF_Preprocessor* preprocess_context = NULL
 * 
 *     if not processor:             # <<<<<<<<<<<<<<
 *         s1_proc[0] = RF_StringWrapper(conv_sequence(s1))
 *         s2_proc[0] = RF_StringWrapper(conv_sequence(s2))
 */
  __Pyx_TraceLine(420,0,__PYX_ERR(1, 420, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_processor); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 420, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "cpp_common.pxd":421
 * 
 *     if not processor:
 *         s1_proc[0] = RF_StringWrapper(conv_sequence(s1))             # <<<<<<<<<<<<<<
 *         s2_proc[0] = RF_StringWrapper(conv_sequence(s2))
 *     else:
 */
    __Pyx_TraceLine(421,0,__PYX_ERR(1, 421, __pyx_L1_error))
    __pyx_t_3 = __pyx_f_10cpp_common_conv_sequence(__pyx_v_s1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 421, __pyx_L1_error)
    (__pyx_v_s1_proc[0]) = RF_StringWrapper(__pyx_t_3);

    /* "cpp_common.pxd":422
 *     if not processor:
 *         s1_proc[0] = RF_StringWrapper(conv_sequence(s1))
 *         s2_proc[0] = RF_StringWrapper(conv_sequence(s2))             # <<<<<<<<<<<<<<
 *     else:
 *         processor_capsule = getattr(processor, '_RF_Preprocess', processor)
 */
    __Pyx_TraceLine(422,0,__PYX_ERR(1, 422, __pyx_L1_error))
    __pyx_t_3 = __pyx_f_10cpp_common_conv_sequence(__pyx_v_s2); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 422, __pyx_L1_error)
    (__pyx_v_s2_proc[0]) = RF_StringWrapper(__pyx_t_3);

    /* "cpp_common.pxd":420
 *     cdef RF_Preprocessor* preprocess_context = NULL
 * 
 *     if not processor:             # <<<<<<<<<<<<<<
 *         s1_proc[0] = RF_StringWrapper(conv_sequence(s1))
 *         s2_proc[0] = RF_StringWrapper(conv_sequence(s2))
 */
    goto __pyx_L3;
  }

  /* "cpp_common.pxd":424
 *         s2_proc[0] = RF_StringWrapper(conv_sequence(s2))
 *     else:
 *         processor_capsule = getattr(processor, '_RF_Preprocess', processor)             # <<<<<<<<<<<<<<
 *         if PyCapsule_IsValid(processor_capsule, NULL):
 *             preprocess_context = <RF_Preprocessor*>PyCapsule_GetPointer(processor_capsule, NULL)
 */
  __Pyx_TraceLine(424,0,__PYX_ERR(1, 424, __pyx_L1_error))
  /*else*/ {
    __pyx_t_4 = __Pyx_GetAttr3(__pyx_v_processor, __pyx_n_u_RF_Preprocess, __pyx_v_processor); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_processor_capsule = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "cpp_common.pxd":425
 *     else:
 *         processor_capsule = getattr(processor, '_RF_Preprocess', processor)
 *         if PyCapsule_IsValid(processor_capsule, NULL):             # <<<<<<<<<<<<<<
 *             preprocess_context = <RF_Preprocessor*>PyCapsule_GetPointer(processor_capsule, NULL)
 * 
 */
    __Pyx_TraceLine(425,0,__PYX_ERR(1, 425, __pyx_L1_error))
    __pyx_t_2 = PyCapsule_IsValid(__pyx_v_processor_capsule, NULL);
    if (__pyx_t_2) {

      /* "cpp_common.pxd":426
 *         processor_capsule = getattr(processor, '_RF_Preprocess', processor)
 *         if PyCapsule_IsValid(processor_capsule, NULL):
 *             preprocess_context = <RF_Preprocessor*>PyCapsule_GetPointer(processor_capsule, NULL)             # <<<<<<<<<<<<<<
 * 
 *         if preprocess_context != NULL and preprocess_context.version == 1:
 */
      __Pyx_TraceLine(426,0,__PYX_ERR(1, 426, __pyx_L1_error))
      __pyx_t_5 = PyCapsule_GetPointer(__pyx_v_processor_capsule, NULL); if (unlikely(__pyx_t_5 == ((void *)NULL) && PyErr_Occurred())) __PYX_ERR(1, 426, __pyx_L1_error)
      __pyx_v_preprocess_context = ((RF_Preprocessor *)__pyx_t_5);

      /* "cpp_common.pxd":425
 *     else:
 *         processor_capsule = getattr(processor, '_RF_Preprocess', processor)
 *         if PyCapsule_IsValid(processor_capsule, NULL):             # <<<<<<<<<<<<<<
 *             preprocess_context = <RF_Preprocessor*>PyCapsule_GetPointer(processor_capsule, NULL)
 * 
 */
    }

    /* "cpp_common.pxd":428
 *             preprocess_context = <RF_Preprocessor*>PyCapsule_GetPointer(processor_capsule, NULL)
 * 
 *         if preprocess_context != NULL and preprocess_context.version == 1:             # <<<<<<<<<<<<<<
 *             preprocess_context.preprocess(s1, &(s1_proc[0].string))
 *             preprocess_context.preprocess(s2, &(s2_proc[0].string))
 */
    __Pyx_TraceLine(428,0,__PYX_ERR(1, 428, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_preprocess_context != NULL);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = (__pyx_v_preprocess_context->version == 1);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_2) {

      /* "cpp_common.pxd":429
 * 
 *         if preprocess_context != NULL and preprocess_context.version == 1:
 *             preprocess_context.preprocess(s1, &(s1_proc[0].string))             # <<<<<<<<<<<<<<
 *             preprocess_context.preprocess(s2, &(s2_proc[0].string))
 *         else:
 */
      __Pyx_TraceLine(429,0,__PYX_ERR(1, 429, __pyx_L1_error))
      __pyx_t_6 = __pyx_v_preprocess_context->preprocess(__pyx_v_s1, (&(__pyx_v_s1_proc[0]).string)); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(1, 429, __pyx_L1_error)

      /* "cpp_common.pxd":430
 *         if preprocess_context != NULL and preprocess_context.version == 1:
 *             preprocess_context.preprocess(s1, &(s1_proc[0].string))
 *             preprocess_context.preprocess(s2, &(s2_proc[0].string))             # <<<<<<<<<<<<<<
 *         else:
 *             s1 = processor(s1)
 */
      __Pyx_TraceLine(430,0,__PYX_ERR(1, 430, __pyx_L1_error))
      __pyx_t_6 = __pyx_v_preprocess_context->preprocess(__pyx_v_s2, (&(__pyx_v_s2_proc[0]).string)); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(1, 430, __pyx_L1_error)

      /* "cpp_common.pxd":428
 *             preprocess_context = <RF_Preprocessor*>PyCapsule_GetPointer(processor_capsule, NULL)
 * 
 *         if preprocess_context != NULL and preprocess_context.version == 1:             # <<<<<<<<<<<<<<
 *             preprocess_context.preprocess(s1, &(s1_proc[0].string))
 *             preprocess_context.preprocess(s2, &(s2_proc[0].string))
 */
      goto __pyx_L5;
    }

    /* "cpp_common.pxd":432
 *             preprocess_context.preprocess(s2, &(s2_proc[0].string))
 *         else:
 *             s1 = processor(s1)             # <<<<<<<<<<<<<<
 *             s1_proc[0] = RF_StringWrapper(conv_sequence(s1), s1)
 *             s2 = processor(s2)
 */
    __Pyx_TraceLine(432,0,__PYX_ERR(1, 432, __pyx_L1_error))
    /*else*/ {
      __Pyx_INCREF(__pyx_v_processor);
      __pyx_t_7 = __pyx_v_processor; __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_9 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_s1};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 432, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF_SET(__pyx_v_s1, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "cpp_common.pxd":433
 *         else:
 *             s1 = processor(s1)
 *             s1_proc[0] = RF_StringWrapper(conv_sequence(s1), s1)             # <<<<<<<<<<<<<<
 *             s2 = processor(s2)
 *             s2_proc[0] = RF_StringWrapper(conv_sequence(s2), s2)
 */
      __Pyx_TraceLine(433,0,__PYX_ERR(1, 433, __pyx_L1_error))
      __pyx_t_3 = __pyx_f_10cpp_common_conv_sequence(__pyx_v_s1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 433, __pyx_L1_error)
      (__pyx_v_s1_proc[0]) = RF_StringWrapper(__pyx_t_3, __pyx_v_s1);

      /* "cpp_common.pxd":434
 *             s1 = processor(s1)
 *             s1_proc[0] = RF_StringWrapper(conv_sequence(s1), s1)
 *             s2 = processor(s2)             # <<<<<<<<<<<<<<
 *             s2_proc[0] = RF_StringWrapper(conv_sequence(s2), s2)
 * 
 */
      __Pyx_TraceLine(434,0,__PYX_ERR(1, 434, __pyx_L1_error))
      __Pyx_INCREF(__pyx_v_processor);
      __pyx_t_7 = __pyx_v_processor; __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_9 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_s2};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 434, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF_SET(__pyx_v_s2, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "cpp_common.pxd":435
 *             s1_proc[0] = RF_StringWrapper(conv_sequence(s1), s1)
 *             s2 = processor(s2)
 *             s2_proc[0] = RF_StringWrapper(conv_sequence(s2), s2)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
      __Pyx_TraceLine(435,0,__PYX_ERR(1, 435, __pyx_L1_error))
      __pyx_t_3 = __pyx_f_10cpp_common_conv_sequence(__pyx_v_s2); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 435, __pyx_L1_error)
      (__pyx_v_s2_proc[0]) = RF_StringWrapper(__pyx_t_3, __pyx_v_s2);
    }
    __pyx_L5:;
  }
  __pyx_L3:;

  /* "cpp_common.pxd":437
 *             s2_proc[0] = RF_StringWrapper(conv_sequence(s2), s2)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline bool NoKwargsInit(RF_Kwargs* self, dict kwargs) except False:
 */
  __Pyx_TraceLine(437,0,__PYX_ERR(1, 437, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cpp_common.pxd":417
 *     return <size_t>c_score_cutoff
 * 
 * cdef inline bool preprocess_strings(s1, s2, processor, RF_StringWrapper* s1_proc, RF_StringWrapper* s2_proc) except False:             # <<<<<<<<<<<<<<
 *     cdef RF_Preprocessor* preprocess_context = NULL
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cpp_common.preprocess_strings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_processor_capsule);
  __Pyx_XDECREF(__pyx_v_s1);
  __Pyx_XDECREF(__pyx_v_s2);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":439
 *     return True
 * 
 * cdef inline bool NoKwargsInit(RF_Kwargs* self, dict kwargs) except False:             # <<<<<<<<<<<<<<
 *     if len(kwargs):
 *         raise TypeError("Got unexpected keyword arguments: ", ", ".join(kwargs.keys()))
 */

static CYTHON_INLINE bool __pyx_f_10cpp_common_NoKwargsInit(RF_Kwargs *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("NoKwargsInit", 1);
  __Pyx_TraceCall("NoKwargsInit", __pyx_f[1], 439, 0, __PYX_ERR(1, 439, __pyx_L1_error));

  /* "cpp_common.pxd":440
 * 
 * cdef inline bool NoKwargsInit(RF_Kwargs* self, dict kwargs) except False:
 *     if len(kwargs):             # <<<<<<<<<<<<<<
 *         raise TypeError("Got unexpected keyword arguments: ", ", ".join(kwargs.keys()))
 * 
 */
  __Pyx_TraceLine(440,0,__PYX_ERR(1, 440, __pyx_L1_error))
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 440, __pyx_L1_error)
  }
  __pyx_t_1 = PyDict_Size(__pyx_v_kwargs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 440, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cpp_common.pxd":441
 * cdef inline bool NoKwargsInit(RF_Kwargs* self, dict kwargs) except False:
 *     if len(kwargs):
 *         raise TypeError("Got unexpected keyword arguments: ", ", ".join(kwargs.keys()))             # <<<<<<<<<<<<<<
 * 
 *     self.context = NULL
 */
    __Pyx_TraceLine(441,0,__PYX_ERR(1, 441, __pyx_L1_error))
    if (unlikely(__pyx_v_kwargs == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
      __PYX_ERR(1, 441, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_Keys(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyUnicode_Join(__pyx_kp_u__2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_kp_u_Got_unexpected_keyword_arguments);
    __Pyx_GIVEREF(__pyx_kp_u_Got_unexpected_keyword_arguments);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Got_unexpected_keyword_arguments)) __PYX_ERR(1, 441, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4)) __PYX_ERR(1, 441, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 441, __pyx_L1_error)

    /* "cpp_common.pxd":440
 * 
 * cdef inline bool NoKwargsInit(RF_Kwargs* self, dict kwargs) except False:
 *     if len(kwargs):             # <<<<<<<<<<<<<<
 *         raise TypeError("Got unexpected keyword arguments: ", ", ".join(kwargs.keys()))
 * 
 */
  }

  /* "cpp_common.pxd":443
 *         raise TypeError("Got unexpected keyword arguments: ", ", ".join(kwargs.keys()))
 * 
 *     self.context = NULL             # <<<<<<<<<<<<<<
 *     self.dtor = NULL
 *     return True
 */
  __Pyx_TraceLine(443,0,__PYX_ERR(1, 443, __pyx_L1_error))
  __pyx_v_self->context = NULL;

  /* "cpp_common.pxd":444
 * 
 *     self.context = NULL
 *     self.dtor = NULL             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(444,0,__PYX_ERR(1, 444, __pyx_L1_error))
  __pyx_v_self->dtor = NULL;

  /* "cpp_common.pxd":445
 *     self.context = NULL
 *     self.dtor = NULL
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline RF_Scorer CreateScorerContext(RF_KwargsInit kwargs_init, RF_GetScorerFlags get_scorer_flags, RF_ScorerFuncInit scorer_func_init, RF_UncachedScorerFunc uncached_scorer_func) noexcept:
 */
  __Pyx_TraceLine(445,0,__PYX_ERR(1, 445, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cpp_common.pxd":439
 *     return True
 * 
 * cdef inline bool NoKwargsInit(RF_Kwargs* self, dict kwargs) except False:             # <<<<<<<<<<<<<<
 *     if len(kwargs):
 *         raise TypeError("Got unexpected keyword arguments: ", ", ".join(kwargs.keys()))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cpp_common.NoKwargsInit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp_common.pxd":447
 *     return True
 * 
 * cdef inline RF_Scorer CreateScorerContext(RF_KwargsInit kwargs_init, RF_GetScorerFlags get_scorer_flags, RF_ScorerFuncInit scorer_func_init, RF_UncachedScorerFunc uncached_scorer_func) noexcept:             # <<<<<<<<<<<<<<
 *     cdef RF_Scorer context
 *     context.version = SCORER_STRUCT_VERSION
 */

static CYTHON_INLINE RF_Scorer __pyx_f_10cpp_common_CreateScorerContext(RF_KwargsInit __pyx_v_kwargs_init, RF_GetScorerFlags __pyx_v_get_scorer_flags, RF_ScorerFuncInit __pyx_v_scorer_func_init, RF_UncachedScorerFunc __pyx_v_uncached_scorer_func) {
  RF_Scorer __pyx_v_context;
  RF_Scorer __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("CreateScorerContext", __pyx_f[1], 447, 0, __PYX_ERR(1, 447, __pyx_L1_error));

  /* "cpp_common.pxd":449
 * cdef inline RF_Scorer CreateScorerContext(RF_KwargsInit kwargs_init, RF_GetScorerFlags get_scorer_flags, RF_ScorerFuncInit scorer_func_init, RF_UncachedScorerFunc uncached_scorer_func) noexcept:
 *     cdef RF_Scorer context
 *     context.version = SCORER_STRUCT_VERSION             # <<<<<<<<<<<<<<
 *     context.kwargs_init = kwargs_init
 *     context.get_scorer_flags = get_scorer_flags
 */
  __Pyx_TraceLine(449,0,__PYX_ERR(1, 449, __pyx_L1_error))
  __pyx_v_context.version = SCORER_STRUCT_VERSION;

  /* "cpp_common.pxd":450
 *     cdef RF_Scorer context
 *     context.version = SCORER_STRUCT_VERSION
 *     context.kwargs_init = kwargs_init             # <<<<<<<<<<<<<<
 *     context.get_scorer_flags = get_scorer_flags
 *     context.scorer_func_init = scorer_func_init
 */
  __Pyx_TraceLine(450,0,__PYX_ERR(1, 450, __pyx_L1_error))
  __pyx_v_context.kwargs_init = __pyx_v_kwargs_init;

  /* "cpp_common.pxd":451
 *     context.version = SCORER_STRUCT_VERSION
 *     context.kwargs_init = kwargs_init
 *     context.get_scorer_flags = get_scorer_flags             # <<<<<<<<<<<<<<
 *     context.scorer_func_init = scorer_func_init
 *     context.uncached_scorer_func = uncached_scorer_func
 */
  __Pyx_TraceLine(451,0,__PYX_ERR(1, 451, __pyx_L1_error))
  __pyx_v_context.get_scorer_flags = __pyx_v_get_scorer_flags;

  /* "cpp_common.pxd":452
 *     context.kwargs_init = kwargs_init
 *     context.get_scorer_flags = get_scorer_flags
 *     context.scorer_func_init = scorer_func_init             # <<<<<<<<<<<<<<
 *     context.uncached_scorer_func = uncached_scorer_func
 *     return context
 */
  __Pyx_TraceLine(452,0,__PYX_ERR(1, 452, __pyx_L1_error))
  __pyx_v_context.scorer_func_init = __pyx_v_scorer_func_init;

  /* "cpp_common.pxd":453
 *     context.get_scorer_flags = get_scorer_flags
 *     context.scorer_func_init = scorer_func_init
 *     context.uncached_scorer_func = uncached_scorer_func             # <<<<<<<<<<<<<<
 *     return context
 * 
 */
  __Pyx_TraceLine(453,0,__PYX_ERR(1, 453, __pyx_L1_error))
  __pyx_v_context.uncached_scorer_func = __pyx_v_uncached_scorer_func;

  /* "cpp_common.pxd":454
 *     context.scorer_func_init = scorer_func_init
 *     context.uncached_scorer_func = uncached_scorer_func
 *     return context             # <<<<<<<<<<<<<<
 * 
 * cdef inline void SetFuncAttrs(cpp_func, py_func) except *:
 */
  __Pyx_TraceLine(454,0,__PYX_ERR(1, 454, __pyx_L1_error))
  __pyx_r = __pyx_v_context;
  goto __pyx_L0;

  /* "cpp_common.pxd":447
 *     return True
 * 
 * cdef inline RF_Scorer CreateScorerContext(RF_KwargsInit kwargs_init, RF_GetScorerFlags get_scorer_flags, RF_ScorerFuncInit scorer_func_init, RF_UncachedScorerFunc uncached_scorer_func) noexcept:             # <<<<<<<<<<<<<<
 *     cdef RF_Scorer context
 *     context.version = SCORER_STRUCT_VERSION
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cpp_common.CreateScorerContext", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "cpp_common.pxd":456
 *     return context
 * 
 * cdef inline void SetFuncAttrs(cpp_func, py_func) except *:             # <<<<<<<<<<<<<<
 *     cpp_func.__name__ = py_func.__name__
 *     cpp_func.__qualname__ = py_func.__qualname__
 */

static CYTHON_INLINE void __pyx_f_10cpp_common_SetFuncAttrs(PyObject *__pyx_v_cpp_func, PyObject *__pyx_v_py_func) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetFuncAttrs", 1);
  __Pyx_TraceCall("SetFuncAttrs", __pyx_f[1], 456, 0, __PYX_ERR(1, 456, __pyx_L1_error));

  /* "cpp_common.pxd":457
 * 
 * cdef inline void SetFuncAttrs(cpp_func, py_func) except *:
 *     cpp_func.__name__ = py_func.__name__             # <<<<<<<<<<<<<<
 *     cpp_func.__qualname__ = py_func.__qualname__
 *     cpp_func.__doc__ = py_func.__doc__
 */
  __Pyx_TraceLine(457,0,__PYX_ERR(1, 457, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_func, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_cpp_func, __pyx_n_s_name, __pyx_t_1) < 0) __PYX_ERR(1, 457, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cpp_common.pxd":458
 * cdef inline void SetFuncAttrs(cpp_func, py_func) except *:
 *     cpp_func.__name__ = py_func.__name__
 *     cpp_func.__qualname__ = py_func.__qualname__             # <<<<<<<<<<<<<<
 *     cpp_func.__doc__ = py_func.__doc__
 * 
 */
  __Pyx_TraceLine(458,0,__PYX_ERR(1, 458, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_func, __pyx_n_s_qualname); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_cpp_func, __pyx_n_s_qualname, __pyx_t_1) < 0) __PYX_ERR(1, 458, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cpp_common.pxd":459
 *     cpp_func.__name__ = py_func.__name__
 *     cpp_func.__qualname__ = py_func.__qualname__
 *     cpp_func.__doc__ = py_func.__doc__             # <<<<<<<<<<<<<<
 * 
 * cdef inline void SetScorerAttrs(cpp_func, py_func, RF_Scorer* context) except *:
 */
  __Pyx_TraceLine(459,0,__PYX_ERR(1, 459, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_func, __pyx_n_s_doc); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_cpp_func, __pyx_n_s_doc, __pyx_t_1) < 0) __PYX_ERR(1, 459, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cpp_common.pxd":456
 *     return context
 * 
 * cdef inline void SetFuncAttrs(cpp_func, py_func) except *:             # <<<<<<<<<<<<<<
 *     cpp_func.__name__ = py_func.__name__
 *     cpp_func.__qualname__ = py_func.__qualname__
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpp_common.SetFuncAttrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "cpp_common.pxd":461
 *     cpp_func.__doc__ = py_func.__doc__
 * 
 * cdef inline void SetScorerAttrs(cpp_func, py_func, RF_Scorer* context) except *:             # <<<<<<<<<<<<<<
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Scorer = PyCapsule_New(context, NULL, NULL)
 */

static CYTHON_INLINE void __pyx_f_10cpp_common_SetScorerAttrs(PyObject *__pyx_v_cpp_func, PyObject *__pyx_v_py_func, RF_Scorer *__pyx_v_context) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetScorerAttrs", 1);
  __Pyx_TraceCall("SetScorerAttrs", __pyx_f[1], 461, 0, __PYX_ERR(1, 461, __pyx_L1_error));

  /* "cpp_common.pxd":462
 * 
 * cdef inline void SetScorerAttrs(cpp_func, py_func, RF_Scorer* context) except *:
 *     SetFuncAttrs(cpp_func, py_func)             # <<<<<<<<<<<<<<
 *     cpp_func._RF_Scorer = PyCapsule_New(context, NULL, NULL)
 *     cpp_func._RF_ScorerPy = py_func._RF_ScorerPy
 */
  __Pyx_TraceLine(462,0,__PYX_ERR(1, 462, __pyx_L1_error))
  __pyx_f_10cpp_common_SetFuncAttrs(__pyx_v_cpp_func, __pyx_v_py_func); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 462, __pyx_L1_error)

  /* "cpp_common.pxd":463
 * cdef inline void SetScorerAttrs(cpp_func, py_func, RF_Scorer* context) except *:
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Scorer = PyCapsule_New(context, NULL, NULL)             # <<<<<<<<<<<<<<
 *     cpp_func._RF_ScorerPy = py_func._RF_ScorerPy
 * 
 */
  __Pyx_TraceLine(463,0,__PYX_ERR(1, 463, __pyx_L1_error))
  __pyx_t_1 = PyCapsule_New(__pyx_v_context, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_cpp_func, __pyx_n_s_RF_Scorer, __pyx_t_1) < 0) __PYX_ERR(1, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cpp_common.pxd":464
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Scorer = PyCapsule_New(context, NULL, NULL)
 *     cpp_func._RF_ScorerPy = py_func._RF_ScorerPy             # <<<<<<<<<<<<<<
 * 
 *     # used to detect the function hasn't been wrapped afterwards
 */
  __Pyx_TraceLine(464,0,__PYX_ERR(1, 464, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_func, __pyx_n_s_RF_ScorerPy); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_cpp_func, __pyx_n_s_RF_ScorerPy, __pyx_t_1) < 0) __PYX_ERR(1, 464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cpp_common.pxd":467
 * 
 *     # used to detect the function hasn't been wrapped afterwards
 *     cpp_func._RF_OriginalScorer = cpp_func             # <<<<<<<<<<<<<<
 * 
 * cdef inline RF_Preprocessor CreateProcessorContext(RF_Preprocess preprocess) except *:
 */
  __Pyx_TraceLine(467,0,__PYX_ERR(1, 467, __pyx_L1_error))
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_cpp_func, __pyx_n_s_RF_OriginalScorer, __pyx_v_cpp_func) < 0) __PYX_ERR(1, 467, __pyx_L1_error)

  /* "cpp_common.pxd":461
 *     cpp_func.__doc__ = py_func.__doc__
 * 
 * cdef inline void SetScorerAttrs(cpp_func, py_func, RF_Scorer* context) except *:             # <<<<<<<<<<<<<<
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Scorer = PyCapsule_New(context, NULL, NULL)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpp_common.SetScorerAttrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "cpp_common.pxd":469
 *     cpp_func._RF_OriginalScorer = cpp_func
 * 
 * cdef inline RF_Preprocessor CreateProcessorContext(RF_Preprocess preprocess) except *:             # <<<<<<<<<<<<<<
 *     cdef RF_Preprocessor context
 *     context.version = PREPROCESSOR_STRUCT_VERSION
 */

static CYTHON_INLINE RF_Preprocessor __pyx_f_10cpp_common_CreateProcessorContext(RF_Preprocess __pyx_v_preprocess) {
  RF_Preprocessor __pyx_v_context;
  RF_Preprocessor __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("CreateProcessorContext", __pyx_f[1], 469, 0, __PYX_ERR(1, 469, __pyx_L1_error));

  /* "cpp_common.pxd":471
 * cdef inline RF_Preprocessor CreateProcessorContext(RF_Preprocess preprocess) except *:
 *     cdef RF_Preprocessor context
 *     context.version = PREPROCESSOR_STRUCT_VERSION             # <<<<<<<<<<<<<<
 *     context.preprocess = preprocess
 *     return context
 */
  __Pyx_TraceLine(471,0,__PYX_ERR(1, 471, __pyx_L1_error))
  __pyx_v_context.version = PREPROCESSOR_STRUCT_VERSION;

  /* "cpp_common.pxd":472
 *     cdef RF_Preprocessor context
 *     context.version = PREPROCESSOR_STRUCT_VERSION
 *     context.preprocess = preprocess             # <<<<<<<<<<<<<<
 *     return context
 * 
 */
  __Pyx_TraceLine(472,0,__PYX_ERR(1, 472, __pyx_L1_error))
  __pyx_v_context.preprocess = __pyx_v_preprocess;

  /* "cpp_common.pxd":473
 *     context.version = PREPROCESSOR_STRUCT_VERSION
 *     context.preprocess = preprocess
 *     return context             # <<<<<<<<<<<<<<
 * 
 * cdef inline void SetProcessorAttrs(cpp_func, py_func, RF_Preprocessor* context) except *:
 */
  __Pyx_TraceLine(473,0,__PYX_ERR(1, 473, __pyx_L1_error))
  __pyx_r = __pyx_v_context;
  goto __pyx_L0;

  /* "cpp_common.pxd":469
 *     cpp_func._RF_OriginalScorer = cpp_func
 * 
 * cdef inline RF_Preprocessor CreateProcessorContext(RF_Preprocess preprocess) except *:             # <<<<<<<<<<<<<<
 *     cdef RF_Preprocessor context
 *     context.version = PREPROCESSOR_STRUCT_VERSION
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cpp_common.CreateProcessorContext", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  return __pyx_r;
}

/* "cpp_common.pxd":475
 *     return context
 * 
 * cdef inline void SetProcessorAttrs(cpp_func, py_func, RF_Preprocessor* context) except *:             # <<<<<<<<<<<<<<
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Preprocess = PyCapsule_New(context, NULL, NULL)
 */

static CYTHON_INLINE void __pyx_f_10cpp_common_SetProcessorAttrs(PyObject *__pyx_v_cpp_func, PyObject *__pyx_v_py_func, RF_Preprocessor *__pyx_v_context) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetProcessorAttrs", 1);
  __Pyx_TraceCall("SetProcessorAttrs", __pyx_f[1], 475, 0, __PYX_ERR(1, 475, __pyx_L1_error));

  /* "cpp_common.pxd":476
 * 
 * cdef inline void SetProcessorAttrs(cpp_func, py_func, RF_Preprocessor* context) except *:
 *     SetFuncAttrs(cpp_func, py_func)             # <<<<<<<<<<<<<<
 *     cpp_func._RF_Preprocess = PyCapsule_New(context, NULL, NULL)
 */
  __Pyx_TraceLine(476,0,__PYX_ERR(1, 476, __pyx_L1_error))
  __pyx_f_10cpp_common_SetFuncAttrs(__pyx_v_cpp_func, __pyx_v_py_func); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 476, __pyx_L1_error)

  /* "cpp_common.pxd":477
 * cdef inline void SetProcessorAttrs(cpp_func, py_func, RF_Preprocessor* context) except *:
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Preprocess = PyCapsule_New(context, NULL, NULL)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(477,0,__PYX_ERR(1, 477, __pyx_L1_error))
  __pyx_t_1 = PyCapsule_New(__pyx_v_context, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_cpp_func, __pyx_n_s_RF_Preprocess, __pyx_t_1) < 0) __PYX_ERR(1, 477, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cpp_common.pxd":475
 *     return context
 * 
 * cdef inline void SetProcessorAttrs(cpp_func, py_func, RF_Preprocessor* context) except *:             # <<<<<<<<<<<<<<
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Preprocess = PyCapsule_New(context, NULL, NULL)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpp_common.SetProcessorAttrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "rapidfuzz/distance/metrics_cpp.pyx":28
 * pandas_NA = None
 * 
 * cdef inline void setupPandas() noexcept:             # <<<<<<<<<<<<<<
 *     global pandas_NA
 *     if pandas_NA is None:
 */

static CYTHON_INLINE void __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas(void) {
  PyObject *__pyx_v_pandas = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setupPandas", 1);
  __Pyx_TraceCall("setupPandas", __pyx_f[0], 28, 0, __PYX_ERR(0, 28, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":30
 * cdef inline void setupPandas() noexcept:
 *     global pandas_NA
 *     if pandas_NA is None:             # <<<<<<<<<<<<<<
 *         pandas = sys.modules.get('pandas')
 *         if hasattr(pandas, 'NA'):
 */
  __Pyx_TraceLine(30,0,__PYX_ERR(0, 30, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pandas_NA); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":31
 *     global pandas_NA
 *     if pandas_NA is None:
 *         pandas = sys.modules.get('pandas')             # <<<<<<<<<<<<<<
 *         if hasattr(pandas, 'NA'):
 *             pandas_NA = pandas.NA
 */
    __Pyx_TraceLine(31,0,__PYX_ERR(0, 31, __pyx_L1_error))
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 31, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_modules); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 31, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 31, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_n_u_pandas};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_v_pandas = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":32
 *     if pandas_NA is None:
 *         pandas = sys.modules.get('pandas')
 *         if hasattr(pandas, 'NA'):             # <<<<<<<<<<<<<<
 *             pandas_NA = pandas.NA
 * 
 */
    __Pyx_TraceLine(32,0,__PYX_ERR(0, 32, __pyx_L1_error))
    __pyx_t_2 = __Pyx_HasAttr(__pyx_v_pandas, __pyx_n_u_NA); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 32, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "rapidfuzz/distance/metrics_cpp.pyx":33
 *         pandas = sys.modules.get('pandas')
 *         if hasattr(pandas, 'NA'):
 *             pandas_NA = pandas.NA             # <<<<<<<<<<<<<<
 * 
 * setupPandas()
 */
      __Pyx_TraceLine(33,0,__PYX_ERR(0, 33, __pyx_L1_error))
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_pandas, __pyx_n_s_NA); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_pandas_NA, __pyx_t_1) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "rapidfuzz/distance/metrics_cpp.pyx":32
 *     if pandas_NA is None:
 *         pandas = sys.modules.get('pandas')
 *         if hasattr(pandas, 'NA'):             # <<<<<<<<<<<<<<
 *             pandas_NA = pandas.NA
 * 
 */
    }

    /* "rapidfuzz/distance/metrics_cpp.pyx":30
 * cdef inline void setupPandas() noexcept:
 *     global pandas_NA
 *     if pandas_NA is None:             # <<<<<<<<<<<<<<
 *         pandas = sys.modules.get('pandas')
 *         if hasattr(pandas, 'NA'):
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":28
 * pandas_NA = None
 * 
 * cdef inline void setupPandas() noexcept:             # <<<<<<<<<<<<<<
 *     global pandas_NA
 *     if pandas_NA is None:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("rapidfuzz.distance.metrics_cpp.setupPandas", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pandas);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "rapidfuzz/distance/metrics_cpp.pyx":236
 * 
 * 
 * def levenshtein_distance(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef size_t insertion, deletion, substitution
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_1levenshtein_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_1levenshtein_distance = {"levenshtein_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_1levenshtein_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_1levenshtein_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_weights = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  PyObject *__pyx_v_score_hint = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("levenshtein_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_weights,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,&__pyx_n_s_score_hint,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject*)__pyx_tuple__3)));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 236, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 236, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("levenshtein_distance", 1, 2, 2, 1); __PYX_ERR(0, 236, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 4)) {
        Py_ssize_t index;
        for (index = 2; index < 6 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 236, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "levenshtein_distance") < 0)) __PYX_ERR(0, 236, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_weights = values[2];
    __pyx_v_processor = values[3];
    __pyx_v_score_cutoff = values[4];
    __pyx_v_score_hint = values[5];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("levenshtein_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 236, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.levenshtein_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_levenshtein_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_weights, __pyx_v_processor, __pyx_v_score_cutoff, __pyx_v_score_hint);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_levenshtein_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_weights, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff, PyObject *__pyx_v_score_hint) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  size_t __pyx_v_insertion;
  size_t __pyx_v_deletion;
  size_t __pyx_v_substitution;
  size_t __pyx_v_c_score_cutoff;
  size_t __pyx_v_c_score_hint;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  bool __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__4)
  __Pyx_RefNannySetupContext("levenshtein_distance", 1);
  __Pyx_TraceCall("levenshtein_distance", __pyx_f[0], 236, 0, __PYX_ERR(0, 236, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":239
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef size_t insertion, deletion, substitution
 *     insertion = deletion = substitution = 1             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         insertion, deletion, substitution = weights
 */
  __Pyx_TraceLine(239,0,__PYX_ERR(0, 239, __pyx_L1_error))
  __pyx_v_insertion = 1;
  __pyx_v_deletion = 1;
  __pyx_v_substitution = 1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":240
 *     cdef size_t insertion, deletion, substitution
 *     insertion = deletion = substitution = 1
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         insertion, deletion, substitution = weights
 * 
 */
  __Pyx_TraceLine(240,0,__PYX_ERR(0, 240, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_weights != Py_None);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":241
 *     insertion = deletion = substitution = 1
 *     if weights is not None:
 *         insertion, deletion, substitution = weights             # <<<<<<<<<<<<<<
 * 
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 */
    __Pyx_TraceLine(241,0,__PYX_ERR(0, 241, __pyx_L1_error))
    if ((likely(PyTuple_CheckExact(__pyx_v_weights))) || (PyList_CheckExact(__pyx_v_weights))) {
      PyObject* sequence = __pyx_v_weights;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 241, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_v_weights); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
      index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(0, 241, __pyx_L1_error)
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 241, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_t_7 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_7 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_insertion = __pyx_t_7;
    __pyx_v_deletion = __pyx_t_8;
    __pyx_v_substitution = __pyx_t_9;

    /* "rapidfuzz/distance/metrics_cpp.pyx":240
 *     cdef size_t insertion, deletion, substitution
 *     insertion = deletion = substitution = 1
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         insertion, deletion, substitution = weights
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":243
 *         insertion, deletion, substitution = weights
 * 
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_hint = get_score_cutoff_size_t(score_hint, SIZE_MAX, 0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(243,0,__PYX_ERR(0, 243, __pyx_L1_error))
  __pyx_t_9 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_cutoff, SIZE_MAX, 0); if (unlikely(__pyx_t_9 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 243, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_9;

  /* "rapidfuzz/distance/metrics_cpp.pyx":244
 * 
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef size_t c_score_hint = get_score_cutoff_size_t(score_hint, SIZE_MAX, 0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return levenshtein_distance_func(s1_proc.string, s2_proc.string, insertion, deletion, substitution, c_score_cutoff, c_score_hint)
 */
  __Pyx_TraceLine(244,0,__PYX_ERR(0, 244, __pyx_L1_error))
  __pyx_t_9 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_hint, SIZE_MAX, 0); if (unlikely(__pyx_t_9 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 244, __pyx_L1_error)
  __pyx_v_c_score_hint = __pyx_t_9;

  /* "rapidfuzz/distance/metrics_cpp.pyx":245
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef size_t c_score_hint = get_score_cutoff_size_t(score_hint, SIZE_MAX, 0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return levenshtein_distance_func(s1_proc.string, s2_proc.string, insertion, deletion, substitution, c_score_cutoff, c_score_hint)
 * 
 */
  __Pyx_TraceLine(245,0,__PYX_ERR(0, 245, __pyx_L1_error))
  __pyx_t_10 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_10 == ((bool)0))) __PYX_ERR(0, 245, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":246
 *     cdef size_t c_score_hint = get_score_cutoff_size_t(score_hint, SIZE_MAX, 0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return levenshtein_distance_func(s1_proc.string, s2_proc.string, insertion, deletion, substitution, c_score_cutoff, c_score_hint)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(246,0,__PYX_ERR(0, 246, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_9 = levenshtein_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_insertion, __pyx_v_deletion, __pyx_v_substitution, __pyx_v_c_score_cutoff, __pyx_v_c_score_hint);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 246, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":236
 * 
 * 
 * def levenshtein_distance(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef size_t insertion, deletion, substitution
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.levenshtein_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":249
 * 
 * 
 * def levenshtein_similarity(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef size_t insertion, deletion, substitution
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_3levenshtein_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_3levenshtein_similarity = {"levenshtein_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_3levenshtein_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_3levenshtein_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_weights = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  PyObject *__pyx_v_score_hint = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("levenshtein_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_weights,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,&__pyx_n_s_score_hint,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject*)__pyx_tuple__3)));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 249, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 249, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("levenshtein_similarity", 1, 2, 2, 1); __PYX_ERR(0, 249, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 4)) {
        Py_ssize_t index;
        for (index = 2; index < 6 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 249, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "levenshtein_similarity") < 0)) __PYX_ERR(0, 249, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_weights = values[2];
    __pyx_v_processor = values[3];
    __pyx_v_score_cutoff = values[4];
    __pyx_v_score_hint = values[5];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("levenshtein_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 249, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.levenshtein_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_2levenshtein_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_weights, __pyx_v_processor, __pyx_v_score_cutoff, __pyx_v_score_hint);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_2levenshtein_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_weights, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff, PyObject *__pyx_v_score_hint) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  size_t __pyx_v_insertion;
  size_t __pyx_v_deletion;
  size_t __pyx_v_substitution;
  size_t __pyx_v_c_score_cutoff;
  size_t __pyx_v_c_score_hint;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  bool __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__5)
  __Pyx_RefNannySetupContext("levenshtein_similarity", 1);
  __Pyx_TraceCall("levenshtein_similarity", __pyx_f[0], 249, 0, __PYX_ERR(0, 249, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":252
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef size_t insertion, deletion, substitution
 *     insertion = deletion = substitution = 1             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         insertion, deletion, substitution = weights
 */
  __Pyx_TraceLine(252,0,__PYX_ERR(0, 252, __pyx_L1_error))
  __pyx_v_insertion = 1;
  __pyx_v_deletion = 1;
  __pyx_v_substitution = 1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":253
 *     cdef size_t insertion, deletion, substitution
 *     insertion = deletion = substitution = 1
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         insertion, deletion, substitution = weights
 * 
 */
  __Pyx_TraceLine(253,0,__PYX_ERR(0, 253, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_weights != Py_None);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":254
 *     insertion = deletion = substitution = 1
 *     if weights is not None:
 *         insertion, deletion, substitution = weights             # <<<<<<<<<<<<<<
 * 
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 */
    __Pyx_TraceLine(254,0,__PYX_ERR(0, 254, __pyx_L1_error))
    if ((likely(PyTuple_CheckExact(__pyx_v_weights))) || (PyList_CheckExact(__pyx_v_weights))) {
      PyObject* sequence = __pyx_v_weights;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 254, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 254, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 254, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_v_weights); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 254, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
      index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(0, 254, __pyx_L1_error)
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 254, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_t_7 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_7 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_insertion = __pyx_t_7;
    __pyx_v_deletion = __pyx_t_8;
    __pyx_v_substitution = __pyx_t_9;

    /* "rapidfuzz/distance/metrics_cpp.pyx":253
 *     cdef size_t insertion, deletion, substitution
 *     insertion = deletion = substitution = 1
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         insertion, deletion, substitution = weights
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":256
 *         insertion, deletion, substitution = weights
 * 
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_hint = get_score_cutoff_size_t(score_hint, 0, SIZE_MAX)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(256,0,__PYX_ERR(0, 256, __pyx_L1_error))
  __pyx_t_9 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_cutoff, 0, SIZE_MAX); if (unlikely(__pyx_t_9 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 256, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_9;

  /* "rapidfuzz/distance/metrics_cpp.pyx":257
 * 
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef size_t c_score_hint = get_score_cutoff_size_t(score_hint, 0, SIZE_MAX)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return levenshtein_similarity_func(s1_proc.string, s2_proc.string, insertion, deletion, substitution, c_score_cutoff, c_score_hint)
 */
  __Pyx_TraceLine(257,0,__PYX_ERR(0, 257, __pyx_L1_error))
  __pyx_t_9 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_hint, 0, SIZE_MAX); if (unlikely(__pyx_t_9 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 257, __pyx_L1_error)
  __pyx_v_c_score_hint = __pyx_t_9;

  /* "rapidfuzz/distance/metrics_cpp.pyx":258
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef size_t c_score_hint = get_score_cutoff_size_t(score_hint, 0, SIZE_MAX)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return levenshtein_similarity_func(s1_proc.string, s2_proc.string, insertion, deletion, substitution, c_score_cutoff, c_score_hint)
 * 
 */
  __Pyx_TraceLine(258,0,__PYX_ERR(0, 258, __pyx_L1_error))
  __pyx_t_10 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_10 == ((bool)0))) __PYX_ERR(0, 258, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":259
 *     cdef size_t c_score_hint = get_score_cutoff_size_t(score_hint, 0, SIZE_MAX)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return levenshtein_similarity_func(s1_proc.string, s2_proc.string, insertion, deletion, substitution, c_score_cutoff, c_score_hint)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(259,0,__PYX_ERR(0, 259, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_9 = levenshtein_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_insertion, __pyx_v_deletion, __pyx_v_substitution, __pyx_v_c_score_cutoff, __pyx_v_c_score_hint);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 259, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":249
 * 
 * 
 * def levenshtein_similarity(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef size_t insertion, deletion, substitution
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.levenshtein_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":262
 * 
 * 
 * def levenshtein_normalized_distance(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_5levenshtein_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_5levenshtein_normalized_distance = {"levenshtein_normalized_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_5levenshtein_normalized_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_5levenshtein_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_weights = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  PyObject *__pyx_v_score_hint = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("levenshtein_normalized_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_weights,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,&__pyx_n_s_score_hint,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject*)__pyx_tuple__3)));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("levenshtein_normalized_distance", 1, 2, 2, 1); __PYX_ERR(0, 262, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 4)) {
        Py_ssize_t index;
        for (index = 2; index < 6 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "levenshtein_normalized_distance") < 0)) __PYX_ERR(0, 262, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_weights = values[2];
    __pyx_v_processor = values[3];
    __pyx_v_score_cutoff = values[4];
    __pyx_v_score_hint = values[5];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("levenshtein_normalized_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 262, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.levenshtein_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_4levenshtein_normalized_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_weights, __pyx_v_processor, __pyx_v_score_cutoff, __pyx_v_score_hint);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_4levenshtein_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_weights, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff, PyObject *__pyx_v_score_hint) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  size_t __pyx_v_insertion;
  size_t __pyx_v_deletion;
  size_t __pyx_v_substitution;
  double __pyx_v_c_score_cutoff;
  double __pyx_v_c_score_hint;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  size_t __pyx_t_10;
  double __pyx_t_11;
  bool __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__6)
  __Pyx_RefNannySetupContext("levenshtein_normalized_distance", 1);
  __Pyx_TraceCall("levenshtein_normalized_distance", __pyx_f[0], 262, 0, __PYX_ERR(0, 262, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":264
 * def levenshtein_normalized_distance(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 1.0
 */
  __Pyx_TraceLine(264,0,__PYX_ERR(0, 264, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":265
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  __Pyx_TraceLine(265,0,__PYX_ERR(0, 265, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":266
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 1.0             # <<<<<<<<<<<<<<
 * 
 *     cdef size_t insertion, deletion, substitution
 */
    __Pyx_TraceLine(266,0,__PYX_ERR(0, 266, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_1_0);
    __pyx_r = __pyx_float_1_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":265
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":269
 * 
 *     cdef size_t insertion, deletion, substitution
 *     insertion = deletion = substitution = 1             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         insertion, deletion, substitution = weights
 */
  __Pyx_TraceLine(269,0,__PYX_ERR(0, 269, __pyx_L1_error))
  __pyx_v_insertion = 1;
  __pyx_v_deletion = 1;
  __pyx_v_substitution = 1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":270
 *     cdef size_t insertion, deletion, substitution
 *     insertion = deletion = substitution = 1
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         insertion, deletion, substitution = weights
 * 
 */
  __Pyx_TraceLine(270,0,__PYX_ERR(0, 270, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_weights != Py_None);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":271
 *     insertion = deletion = substitution = 1
 *     if weights is not None:
 *         insertion, deletion, substitution = weights             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 */
    __Pyx_TraceLine(271,0,__PYX_ERR(0, 271, __pyx_L1_error))
    if ((likely(PyTuple_CheckExact(__pyx_v_weights))) || (PyList_CheckExact(__pyx_v_weights))) {
      PyObject* sequence = __pyx_v_weights;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 271, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
    } else {
      Py_ssize_t index = -1;
      __pyx_t_6 = PyObject_GetIter(__pyx_v_weights); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
      index = 0; __pyx_t_3 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 2; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < 0) __PYX_ERR(0, 271, __pyx_L1_error)
      __pyx_t_7 = NULL;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 271, __pyx_L1_error)
      __pyx_L8_unpacking_done:;
    }
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 271, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 271, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_t_5); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 271, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_insertion = __pyx_t_8;
    __pyx_v_deletion = __pyx_t_9;
    __pyx_v_substitution = __pyx_t_10;

    /* "rapidfuzz/distance/metrics_cpp.pyx":270
 *     cdef size_t insertion, deletion, substitution
 *     insertion = deletion = substitution = 1
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         insertion, deletion, substitution = weights
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":273
 *         insertion, deletion, substitution = weights
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)             # <<<<<<<<<<<<<<
 *     cdef double c_score_hint = get_score_cutoff_f64(score_hint, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(273,0,__PYX_ERR(0, 273, __pyx_L1_error))
  __pyx_t_11 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 1.0, 0.0); if (unlikely(__pyx_t_11 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 273, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_11;

  /* "rapidfuzz/distance/metrics_cpp.pyx":274
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     cdef double c_score_hint = get_score_cutoff_f64(score_hint, 1.0, 0.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return levenshtein_normalized_distance_func(s1_proc.string, s2_proc.string, insertion, deletion, substitution, c_score_cutoff, c_score_hint)
 */
  __Pyx_TraceLine(274,0,__PYX_ERR(0, 274, __pyx_L1_error))
  __pyx_t_11 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_hint, 1.0, 0.0); if (unlikely(__pyx_t_11 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 274, __pyx_L1_error)
  __pyx_v_c_score_hint = __pyx_t_11;

  /* "rapidfuzz/distance/metrics_cpp.pyx":275
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     cdef double c_score_hint = get_score_cutoff_f64(score_hint, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return levenshtein_normalized_distance_func(s1_proc.string, s2_proc.string, insertion, deletion, substitution, c_score_cutoff, c_score_hint)
 * 
 */
  __Pyx_TraceLine(275,0,__PYX_ERR(0, 275, __pyx_L1_error))
  __pyx_t_12 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_12 == ((bool)0))) __PYX_ERR(0, 275, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":276
 *     cdef double c_score_hint = get_score_cutoff_f64(score_hint, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return levenshtein_normalized_distance_func(s1_proc.string, s2_proc.string, insertion, deletion, substitution, c_score_cutoff, c_score_hint)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(276,0,__PYX_ERR(0, 276, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_11 = levenshtein_normalized_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_insertion, __pyx_v_deletion, __pyx_v_substitution, __pyx_v_c_score_cutoff, __pyx_v_c_score_hint);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 276, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":262
 * 
 * 
 * def levenshtein_normalized_distance(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.levenshtein_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":279
 * 
 * 
 * def levenshtein_normalized_similarity(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_7levenshtein_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_7levenshtein_normalized_similarity = {"levenshtein_normalized_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_7levenshtein_normalized_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_7levenshtein_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_weights = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  PyObject *__pyx_v_score_hint = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("levenshtein_normalized_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_weights,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,&__pyx_n_s_score_hint,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject*)__pyx_tuple__3)));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 279, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 279, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("levenshtein_normalized_similarity", 1, 2, 2, 1); __PYX_ERR(0, 279, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 4)) {
        Py_ssize_t index;
        for (index = 2; index < 6 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 279, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "levenshtein_normalized_similarity") < 0)) __PYX_ERR(0, 279, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_weights = values[2];
    __pyx_v_processor = values[3];
    __pyx_v_score_cutoff = values[4];
    __pyx_v_score_hint = values[5];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("levenshtein_normalized_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 279, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.levenshtein_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_6levenshtein_normalized_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_weights, __pyx_v_processor, __pyx_v_score_cutoff, __pyx_v_score_hint);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_6levenshtein_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_weights, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff, PyObject *__pyx_v_score_hint) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  size_t __pyx_v_insertion;
  size_t __pyx_v_deletion;
  size_t __pyx_v_substitution;
  double __pyx_v_c_score_cutoff;
  double __pyx_v_c_score_hint;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  size_t __pyx_t_10;
  double __pyx_t_11;
  bool __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__7)
  __Pyx_RefNannySetupContext("levenshtein_normalized_similarity", 1);
  __Pyx_TraceCall("levenshtein_normalized_similarity", __pyx_f[0], 279, 0, __PYX_ERR(0, 279, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":281
 * def levenshtein_normalized_similarity(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 0.0
 */
  __Pyx_TraceLine(281,0,__PYX_ERR(0, 281, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":282
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  __Pyx_TraceLine(282,0,__PYX_ERR(0, 282, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":283
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 *     cdef size_t insertion, deletion, substitution
 */
    __Pyx_TraceLine(283,0,__PYX_ERR(0, 283, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":282
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":286
 * 
 *     cdef size_t insertion, deletion, substitution
 *     insertion = deletion = substitution = 1             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         insertion, deletion, substitution = weights
 */
  __Pyx_TraceLine(286,0,__PYX_ERR(0, 286, __pyx_L1_error))
  __pyx_v_insertion = 1;
  __pyx_v_deletion = 1;
  __pyx_v_substitution = 1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":287
 *     cdef size_t insertion, deletion, substitution
 *     insertion = deletion = substitution = 1
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         insertion, deletion, substitution = weights
 * 
 */
  __Pyx_TraceLine(287,0,__PYX_ERR(0, 287, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_weights != Py_None);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":288
 *     insertion = deletion = substitution = 1
 *     if weights is not None:
 *         insertion, deletion, substitution = weights             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 */
    __Pyx_TraceLine(288,0,__PYX_ERR(0, 288, __pyx_L1_error))
    if ((likely(PyTuple_CheckExact(__pyx_v_weights))) || (PyList_CheckExact(__pyx_v_weights))) {
      PyObject* sequence = __pyx_v_weights;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 288, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
    } else {
      Py_ssize_t index = -1;
      __pyx_t_6 = PyObject_GetIter(__pyx_v_weights); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
      index = 0; __pyx_t_3 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 2; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < 0) __PYX_ERR(0, 288, __pyx_L1_error)
      __pyx_t_7 = NULL;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 288, __pyx_L1_error)
      __pyx_L8_unpacking_done:;
    }
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_t_5); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_insertion = __pyx_t_8;
    __pyx_v_deletion = __pyx_t_9;
    __pyx_v_substitution = __pyx_t_10;

    /* "rapidfuzz/distance/metrics_cpp.pyx":287
 *     cdef size_t insertion, deletion, substitution
 *     insertion = deletion = substitution = 1
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         insertion, deletion, substitution = weights
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":290
 *         insertion, deletion, substitution = weights
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)             # <<<<<<<<<<<<<<
 *     cdef double c_score_hint = get_score_cutoff_f64(score_hint, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(290,0,__PYX_ERR(0, 290, __pyx_L1_error))
  __pyx_t_11 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 0.0, 1.0); if (unlikely(__pyx_t_11 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_11;

  /* "rapidfuzz/distance/metrics_cpp.pyx":291
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     cdef double c_score_hint = get_score_cutoff_f64(score_hint, 0.0, 1.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return levenshtein_normalized_similarity_func(s1_proc.string, s2_proc.string, insertion, deletion, substitution, c_score_cutoff, c_score_hint)
 */
  __Pyx_TraceLine(291,0,__PYX_ERR(0, 291, __pyx_L1_error))
  __pyx_t_11 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_hint, 0.0, 1.0); if (unlikely(__pyx_t_11 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 291, __pyx_L1_error)
  __pyx_v_c_score_hint = __pyx_t_11;

  /* "rapidfuzz/distance/metrics_cpp.pyx":292
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     cdef double c_score_hint = get_score_cutoff_f64(score_hint, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return levenshtein_normalized_similarity_func(s1_proc.string, s2_proc.string, insertion, deletion, substitution, c_score_cutoff, c_score_hint)
 * 
 */
  __Pyx_TraceLine(292,0,__PYX_ERR(0, 292, __pyx_L1_error))
  __pyx_t_12 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_12 == ((bool)0))) __PYX_ERR(0, 292, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":293
 *     cdef double c_score_hint = get_score_cutoff_f64(score_hint, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return levenshtein_normalized_similarity_func(s1_proc.string, s2_proc.string, insertion, deletion, substitution, c_score_cutoff, c_score_hint)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(293,0,__PYX_ERR(0, 293, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_11 = levenshtein_normalized_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_insertion, __pyx_v_deletion, __pyx_v_substitution, __pyx_v_c_score_cutoff, __pyx_v_c_score_hint);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 293, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":279
 * 
 * 
 * def levenshtein_normalized_similarity(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.levenshtein_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":296
 * 
 * 
 * def levenshtein_editops(s1, s2, *, processor=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_9levenshtein_editops(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_9levenshtein_editops = {"levenshtein_editops", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_9levenshtein_editops, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_9levenshtein_editops(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_hint = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("levenshtein_editops (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_hint,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 296, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 296, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("levenshtein_editops", 1, 2, 2, 1); __PYX_ERR(0, 296, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 296, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "levenshtein_editops") < 0)) __PYX_ERR(0, 296, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_hint = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("levenshtein_editops", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 296, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.levenshtein_editops", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_8levenshtein_editops(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_hint);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_8levenshtein_editops(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_hint) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_ops = 0;
  size_t __pyx_v_c_score_hint;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  bool __pyx_t_3;
  rapidfuzz::Editops __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__8)
  __Pyx_RefNannySetupContext("levenshtein_editops", 1);
  __Pyx_TraceCall("levenshtein_editops", __pyx_f[0], 296, 0, __PYX_ERR(0, 296, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":298
 * def levenshtein_editops(s1, s2, *, processor=None, score_hint=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_hint = get_score_cutoff_size_t(score_hint, SIZE_MAX, 0)
 * 
 */
  __Pyx_TraceLine(298,0,__PYX_ERR(0, 298, __pyx_L1_error))
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops)))) __PYX_ERR(0, 298, __pyx_L1_error)
  __pyx_v_ops = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":299
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 *     cdef size_t c_score_hint = get_score_cutoff_size_t(score_hint, SIZE_MAX, 0)             # <<<<<<<<<<<<<<
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(299,0,__PYX_ERR(0, 299, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_hint, SIZE_MAX, 0); if (unlikely(__pyx_t_2 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 299, __pyx_L1_error)
  __pyx_v_c_score_hint = __pyx_t_2;

  /* "rapidfuzz/distance/metrics_cpp.pyx":301
 *     cdef size_t c_score_hint = get_score_cutoff_size_t(score_hint, SIZE_MAX, 0)
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     ops.editops = levenshtein_editops_func(s1_proc.string, s2_proc.string, c_score_hint)
 *     return ops
 */
  __Pyx_TraceLine(301,0,__PYX_ERR(0, 301, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_3 == ((bool)0))) __PYX_ERR(0, 301, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":302
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     ops.editops = levenshtein_editops_func(s1_proc.string, s2_proc.string, c_score_hint)             # <<<<<<<<<<<<<<
 *     return ops
 * 
 */
  __Pyx_TraceLine(302,0,__PYX_ERR(0, 302, __pyx_L1_error))
  try {
    __pyx_t_4 = levenshtein_editops_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_hint);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 302, __pyx_L1_error)
  }
  __pyx_v_ops->editops = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

  /* "rapidfuzz/distance/metrics_cpp.pyx":303
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     ops.editops = levenshtein_editops_func(s1_proc.string, s2_proc.string, c_score_hint)
 *     return ops             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(303,0,__PYX_ERR(0, 303, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_ops);
  __pyx_r = ((PyObject *)__pyx_v_ops);
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":296
 * 
 * 
 * def levenshtein_editops(s1, s2, *, processor=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.levenshtein_editops", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ops);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":306
 * 
 * 
 * def levenshtein_opcodes(s1, s2, *, processor=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_11levenshtein_opcodes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_11levenshtein_opcodes = {"levenshtein_opcodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_11levenshtein_opcodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_11levenshtein_opcodes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_hint = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("levenshtein_opcodes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_hint,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("levenshtein_opcodes", 1, 2, 2, 1); __PYX_ERR(0, 306, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "levenshtein_opcodes") < 0)) __PYX_ERR(0, 306, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_hint = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("levenshtein_opcodes", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 306, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.levenshtein_opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_10levenshtein_opcodes(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_hint);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_10levenshtein_opcodes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_hint) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_ops = 0;
  size_t __pyx_v_c_score_hint;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  bool __pyx_t_3;
  rapidfuzz::Editops __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__9)
  __Pyx_RefNannySetupContext("levenshtein_opcodes", 1);
  __Pyx_TraceCall("levenshtein_opcodes", __pyx_f[0], 306, 0, __PYX_ERR(0, 306, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":308
 * def levenshtein_opcodes(s1, s2, *, processor=None, score_hint=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_hint = get_score_cutoff_size_t(score_hint, SIZE_MAX, 0)
 * 
 */
  __Pyx_TraceLine(308,0,__PYX_ERR(0, 308, __pyx_L1_error))
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops)))) __PYX_ERR(0, 308, __pyx_L1_error)
  __pyx_v_ops = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":309
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 *     cdef size_t c_score_hint = get_score_cutoff_size_t(score_hint, SIZE_MAX, 0)             # <<<<<<<<<<<<<<
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(309,0,__PYX_ERR(0, 309, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_hint, SIZE_MAX, 0); if (unlikely(__pyx_t_2 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L1_error)
  __pyx_v_c_score_hint = __pyx_t_2;

  /* "rapidfuzz/distance/metrics_cpp.pyx":311
 *     cdef size_t c_score_hint = get_score_cutoff_size_t(score_hint, SIZE_MAX, 0)
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     ops.editops = levenshtein_editops_func(s1_proc.string, s2_proc.string, c_score_hint)
 *     return ops.as_opcodes()
 */
  __Pyx_TraceLine(311,0,__PYX_ERR(0, 311, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_3 == ((bool)0))) __PYX_ERR(0, 311, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":312
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     ops.editops = levenshtein_editops_func(s1_proc.string, s2_proc.string, c_score_hint)             # <<<<<<<<<<<<<<
 *     return ops.as_opcodes()
 * 
 */
  __Pyx_TraceLine(312,0,__PYX_ERR(0, 312, __pyx_L1_error))
  try {
    __pyx_t_4 = levenshtein_editops_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_hint);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 312, __pyx_L1_error)
  }
  __pyx_v_ops->editops = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

  /* "rapidfuzz/distance/metrics_cpp.pyx":313
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     ops.editops = levenshtein_editops_func(s1_proc.string, s2_proc.string, c_score_hint)
 *     return ops.as_opcodes()             # <<<<<<<<<<<<<<
 * 
 * cdef void KwargsDeinit(RF_Kwargs* self) noexcept:
 */
  __Pyx_TraceLine(313,0,__PYX_ERR(0, 313, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ops), __pyx_n_s_as_opcodes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":306
 * 
 * 
 * def levenshtein_opcodes(s1, s2, *, processor=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.levenshtein_opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ops);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":315
 *     return ops.as_opcodes()
 * 
 * cdef void KwargsDeinit(RF_Kwargs* self) noexcept:             # <<<<<<<<<<<<<<
 *     free(<void*>self.context)
 * 
 */

static void __pyx_f_9rapidfuzz_8distance_11metrics_cpp_KwargsDeinit(RF_Kwargs *__pyx_v_self) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("KwargsDeinit", __pyx_f[0], 315, 0, __PYX_ERR(0, 315, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":316
 * 
 * cdef void KwargsDeinit(RF_Kwargs* self) noexcept:
 *     free(<void*>self.context)             # <<<<<<<<<<<<<<
 * 
 * cdef bool LevenshteinKwargsInit(RF_Kwargs* self, dict kwargs) except False:
 */
  __Pyx_TraceLine(316,0,__PYX_ERR(0, 316, __pyx_L1_error))
  free(((void *)__pyx_v_self->context));

  /* "rapidfuzz/distance/metrics_cpp.pyx":315
 *     return ops.as_opcodes()
 * 
 * cdef void KwargsDeinit(RF_Kwargs* self) noexcept:             # <<<<<<<<<<<<<<
 *     free(<void*>self.context)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("rapidfuzz.distance.metrics_cpp.KwargsDeinit", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
}

/* "rapidfuzz/distance/metrics_cpp.pyx":318
 *     free(<void*>self.context)
 * 
 * cdef bool LevenshteinKwargsInit(RF_Kwargs* self, dict kwargs) except False:             # <<<<<<<<<<<<<<
 *     cdef size_t insertion, deletion, substitution
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>malloc(sizeof(LevenshteinWeightTable))
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_LevenshteinKwargsInit(RF_Kwargs *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  size_t __pyx_v_insertion;
  size_t __pyx_v_deletion;
  size_t __pyx_v_substitution;
  struct rapidfuzz::LevenshteinWeightTable *__pyx_v_weights;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  size_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("LevenshteinKwargsInit", 1);
  __Pyx_TraceCall("LevenshteinKwargsInit", __pyx_f[0], 318, 0, __PYX_ERR(0, 318, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":320
 * cdef bool LevenshteinKwargsInit(RF_Kwargs* self, dict kwargs) except False:
 *     cdef size_t insertion, deletion, substitution
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>malloc(sizeof(LevenshteinWeightTable))             # <<<<<<<<<<<<<<
 * 
 *     if not weights:
 */
  __Pyx_TraceLine(320,0,__PYX_ERR(0, 320, __pyx_L1_error))
  __pyx_v_weights = ((struct rapidfuzz::LevenshteinWeightTable *)malloc((sizeof(struct rapidfuzz::LevenshteinWeightTable))));

  /* "rapidfuzz/distance/metrics_cpp.pyx":322
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>malloc(sizeof(LevenshteinWeightTable))
 * 
 *     if not weights:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  __Pyx_TraceLine(322,0,__PYX_ERR(0, 322, __pyx_L1_error))
  __pyx_t_1 = (!(__pyx_v_weights != 0));
  if (unlikely(__pyx_t_1)) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":323
 * 
 *     if not weights:
 *         raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *     insertion, deletion, substitution = kwargs.get("weights", (1, 1, 1))
 */
    __Pyx_TraceLine(323,0,__PYX_ERR(0, 323, __pyx_L1_error))
    PyErr_NoMemory(); __PYX_ERR(0, 323, __pyx_L1_error)

    /* "rapidfuzz/distance/metrics_cpp.pyx":322
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>malloc(sizeof(LevenshteinWeightTable))
 * 
 *     if not weights:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":325
 *         raise MemoryError
 * 
 *     insertion, deletion, substitution = kwargs.get("weights", (1, 1, 1))             # <<<<<<<<<<<<<<
 *     weights.insert_cost = insertion
 *     weights.delete_cost = deletion
 */
  __Pyx_TraceLine(325,0,__PYX_ERR(0, 325, __pyx_L1_error))
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 325, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_weights, __pyx_tuple__3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 325, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
    index = 0; __pyx_t_3 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 2; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < 0) __PYX_ERR(0, 325, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 325, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_t_5); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_insertion = __pyx_t_8;
  __pyx_v_deletion = __pyx_t_9;
  __pyx_v_substitution = __pyx_t_10;

  /* "rapidfuzz/distance/metrics_cpp.pyx":326
 * 
 *     insertion, deletion, substitution = kwargs.get("weights", (1, 1, 1))
 *     weights.insert_cost = insertion             # <<<<<<<<<<<<<<
 *     weights.delete_cost = deletion
 *     weights.replace_cost = substitution
 */
  __Pyx_TraceLine(326,0,__PYX_ERR(0, 326, __pyx_L1_error))
  __pyx_v_weights->insert_cost = __pyx_v_insertion;

  /* "rapidfuzz/distance/metrics_cpp.pyx":327
 *     insertion, deletion, substitution = kwargs.get("weights", (1, 1, 1))
 *     weights.insert_cost = insertion
 *     weights.delete_cost = deletion             # <<<<<<<<<<<<<<
 *     weights.replace_cost = substitution
 *     self.context = weights
 */
  __Pyx_TraceLine(327,0,__PYX_ERR(0, 327, __pyx_L1_error))
  __pyx_v_weights->delete_cost = __pyx_v_deletion;

  /* "rapidfuzz/distance/metrics_cpp.pyx":328
 *     weights.insert_cost = insertion
 *     weights.delete_cost = deletion
 *     weights.replace_cost = substitution             # <<<<<<<<<<<<<<
 *     self.context = weights
 *     self.dtor = KwargsDeinit
 */
  __Pyx_TraceLine(328,0,__PYX_ERR(0, 328, __pyx_L1_error))
  __pyx_v_weights->replace_cost = __pyx_v_substitution;

  /* "rapidfuzz/distance/metrics_cpp.pyx":329
 *     weights.delete_cost = deletion
 *     weights.replace_cost = substitution
 *     self.context = weights             # <<<<<<<<<<<<<<
 *     self.dtor = KwargsDeinit
 *     return True
 */
  __Pyx_TraceLine(329,0,__PYX_ERR(0, 329, __pyx_L1_error))
  __pyx_v_self->context = __pyx_v_weights;

  /* "rapidfuzz/distance/metrics_cpp.pyx":330
 *     weights.replace_cost = substitution
 *     self.context = weights
 *     self.dtor = KwargsDeinit             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(330,0,__PYX_ERR(0, 330, __pyx_L1_error))
  __pyx_v_self->dtor = __pyx_f_9rapidfuzz_8distance_11metrics_cpp_KwargsDeinit;

  /* "rapidfuzz/distance/metrics_cpp.pyx":331
 *     self.context = weights
 *     self.dtor = KwargsDeinit
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsLevenshteinDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(331,0,__PYX_ERR(0, 331, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":318
 *     free(<void*>self.context)
 * 
 * cdef bool LevenshteinKwargsInit(RF_Kwargs* self, dict kwargs) except False:             # <<<<<<<<<<<<<<
 *     cdef size_t insertion, deletion, substitution
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>malloc(sizeof(LevenshteinWeightTable))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.LevenshteinKwargsInit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":333
 *     return True
 * 
 * cdef bool GetScorerFlagsLevenshteinDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLevenshteinDistance(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  struct rapidfuzz::LevenshteinWeightTable *__pyx_v_weights;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsLevenshteinDistance", __pyx_f[0], 333, 1, __PYX_ERR(0, 333, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":334
 * 
 * cdef bool GetScorerFlagsLevenshteinDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T
 *     if weights.insert_cost == weights.delete_cost:
 */
  __Pyx_TraceLine(334,1,__PYX_ERR(0, 334, __pyx_L1_error))
  __pyx_v_weights = ((struct rapidfuzz::LevenshteinWeightTable *)__pyx_v_self->context);

  /* "rapidfuzz/distance/metrics_cpp.pyx":335
 * cdef bool GetScorerFlagsLevenshteinDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T             # <<<<<<<<<<<<<<
 *     if weights.insert_cost == weights.delete_cost:
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 */
  __Pyx_TraceLine(335,1,__PYX_ERR(0, 335, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = RF_SCORER_FLAG_RESULT_SIZE_T;

  /* "rapidfuzz/distance/metrics_cpp.pyx":336
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T
 *     if weights.insert_cost == weights.delete_cost:             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):
 */
  __Pyx_TraceLine(336,1,__PYX_ERR(0, 336, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_weights->insert_cost == __pyx_v_weights->delete_cost);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":337
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T
 *     if weights.insert_cost == weights.delete_cost:
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     if LevenshteinMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
    __Pyx_TraceLine(337,1,__PYX_ERR(0, 337, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_SYMMETRIC);

    /* "rapidfuzz/distance/metrics_cpp.pyx":336
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T
 *     if weights.insert_cost == weights.delete_cost:             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":338
 *     if weights.insert_cost == weights.delete_cost:
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(338,1,__PYX_ERR(0, 338, __pyx_L1_error))
  __pyx_t_1 = (LevenshteinMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":339
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.sizet = 0
 */
    __Pyx_TraceLine(339,1,__PYX_ERR(0, 339, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":338
 *     if weights.insert_cost == weights.delete_cost:
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":341
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.sizet = 0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 *     return True
 */
  __Pyx_TraceLine(341,1,__PYX_ERR(0, 341, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.sizet = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":342
 * 
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(342,1,__PYX_ERR(0, 342, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.sizet = SIZE_MAX;

  /* "rapidfuzz/distance/metrics_cpp.pyx":343
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsLevenshteinSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(343,1,__PYX_ERR(0, 343, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":333
 *     return True
 * 
 * cdef bool GetScorerFlagsLevenshteinDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsLevenshteinDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":345
 *     return True
 * 
 * cdef bool GetScorerFlagsLevenshteinSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLevenshteinSimilarity(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  struct rapidfuzz::LevenshteinWeightTable *__pyx_v_weights;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsLevenshteinSimilarity", __pyx_f[0], 345, 1, __PYX_ERR(0, 345, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":346
 * 
 * cdef bool GetScorerFlagsLevenshteinSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T
 *     if weights.insert_cost == weights.delete_cost:
 */
  __Pyx_TraceLine(346,1,__PYX_ERR(0, 346, __pyx_L1_error))
  __pyx_v_weights = ((struct rapidfuzz::LevenshteinWeightTable *)__pyx_v_self->context);

  /* "rapidfuzz/distance/metrics_cpp.pyx":347
 * cdef bool GetScorerFlagsLevenshteinSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T             # <<<<<<<<<<<<<<
 *     if weights.insert_cost == weights.delete_cost:
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 */
  __Pyx_TraceLine(347,1,__PYX_ERR(0, 347, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = RF_SCORER_FLAG_RESULT_SIZE_T;

  /* "rapidfuzz/distance/metrics_cpp.pyx":348
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T
 *     if weights.insert_cost == weights.delete_cost:             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):
 */
  __Pyx_TraceLine(348,1,__PYX_ERR(0, 348, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_weights->insert_cost == __pyx_v_weights->delete_cost);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":349
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T
 *     if weights.insert_cost == weights.delete_cost:
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     if LevenshteinMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
    __Pyx_TraceLine(349,1,__PYX_ERR(0, 349, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_SYMMETRIC);

    /* "rapidfuzz/distance/metrics_cpp.pyx":348
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T
 *     if weights.insert_cost == weights.delete_cost:             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":350
 *     if weights.insert_cost == weights.delete_cost:
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(350,1,__PYX_ERR(0, 350, __pyx_L1_error))
  __pyx_t_1 = (LevenshteinMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":351
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 */
    __Pyx_TraceLine(351,1,__PYX_ERR(0, 351, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":350
 *     if weights.insert_cost == weights.delete_cost:
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":353
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.sizet = SIZE_MAX             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.sizet = 0
 *     return True
 */
  __Pyx_TraceLine(353,1,__PYX_ERR(0, 353, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.sizet = SIZE_MAX;

  /* "rapidfuzz/distance/metrics_cpp.pyx":354
 * 
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(354,1,__PYX_ERR(0, 354, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.sizet = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":355
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsLevenshteinNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(355,1,__PYX_ERR(0, 355, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":345
 *     return True
 * 
 * cdef bool GetScorerFlagsLevenshteinSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsLevenshteinSimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":357
 *     return True
 * 
 * cdef bool GetScorerFlagsLevenshteinNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLevenshteinNormalizedDistance(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  struct rapidfuzz::LevenshteinWeightTable *__pyx_v_weights;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsLevenshteinNormalizedDistance", __pyx_f[0], 357, 1, __PYX_ERR(0, 357, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":358
 * 
 * cdef bool GetScorerFlagsLevenshteinNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE
 *     if weights.insert_cost == weights.delete_cost:
 */
  __Pyx_TraceLine(358,1,__PYX_ERR(0, 358, __pyx_L1_error))
  __pyx_v_weights = ((struct rapidfuzz::LevenshteinWeightTable *)__pyx_v_self->context);

  /* "rapidfuzz/distance/metrics_cpp.pyx":359
 * cdef bool GetScorerFlagsLevenshteinNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     if weights.insert_cost == weights.delete_cost:
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 */
  __Pyx_TraceLine(359,1,__PYX_ERR(0, 359, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = (RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":360
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE
 *     if weights.insert_cost == weights.delete_cost:             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):
 */
  __Pyx_TraceLine(360,1,__PYX_ERR(0, 360, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_weights->insert_cost == __pyx_v_weights->delete_cost);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":361
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE
 *     if weights.insert_cost == weights.delete_cost:
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     if LevenshteinMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
    __Pyx_TraceLine(361,1,__PYX_ERR(0, 361, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_SYMMETRIC);

    /* "rapidfuzz/distance/metrics_cpp.pyx":360
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE
 *     if weights.insert_cost == weights.delete_cost:             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":362
 *     if weights.insert_cost == weights.delete_cost:
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(362,1,__PYX_ERR(0, 362, __pyx_L1_error))
  __pyx_t_1 = (LevenshteinMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":363
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.f64 = 0
 */
    __Pyx_TraceLine(363,1,__PYX_ERR(0, 363, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":362
 *     if weights.insert_cost == weights.delete_cost:
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":365
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.f64 = 0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 1.0
 *     return True
 */
  __Pyx_TraceLine(365,1,__PYX_ERR(0, 365, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":366
 * 
 *     scorer_flags.optimal_score.f64 = 0
 *     scorer_flags.worst_score.f64 = 1.0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(366,1,__PYX_ERR(0, 366, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":367
 *     scorer_flags.optimal_score.f64 = 0
 *     scorer_flags.worst_score.f64 = 1.0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsLevenshteinNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(367,1,__PYX_ERR(0, 367, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":357
 *     return True
 * 
 * cdef bool GetScorerFlagsLevenshteinNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsLevenshteinNormalizedDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":369
 *     return True
 * 
 * cdef bool GetScorerFlagsLevenshteinNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLevenshteinNormalizedSimilarity(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  struct rapidfuzz::LevenshteinWeightTable *__pyx_v_weights;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsLevenshteinNormalizedSimilarity", __pyx_f[0], 369, 1, __PYX_ERR(0, 369, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":370
 * 
 * cdef bool GetScorerFlagsLevenshteinNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE
 *     if weights.insert_cost == weights.delete_cost:
 */
  __Pyx_TraceLine(370,1,__PYX_ERR(0, 370, __pyx_L1_error))
  __pyx_v_weights = ((struct rapidfuzz::LevenshteinWeightTable *)__pyx_v_self->context);

  /* "rapidfuzz/distance/metrics_cpp.pyx":371
 * cdef bool GetScorerFlagsLevenshteinNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     if weights.insert_cost == weights.delete_cost:
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 */
  __Pyx_TraceLine(371,1,__PYX_ERR(0, 371, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = (RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":372
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE
 *     if weights.insert_cost == weights.delete_cost:             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):
 */
  __Pyx_TraceLine(372,1,__PYX_ERR(0, 372, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_weights->insert_cost == __pyx_v_weights->delete_cost);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":373
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE
 *     if weights.insert_cost == weights.delete_cost:
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     if LevenshteinMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
    __Pyx_TraceLine(373,1,__PYX_ERR(0, 373, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_SYMMETRIC);

    /* "rapidfuzz/distance/metrics_cpp.pyx":372
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE
 *     if weights.insert_cost == weights.delete_cost:             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":374
 *     if weights.insert_cost == weights.delete_cost:
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(374,1,__PYX_ERR(0, 374, __pyx_L1_error))
  __pyx_t_1 = (LevenshteinMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":375
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.f64 = 1.0
 */
    __Pyx_TraceLine(375,1,__PYX_ERR(0, 375, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":374
 *     if weights.insert_cost == weights.delete_cost:
 *         scorer_flags.flags |= RF_SCORER_FLAG_SYMMETRIC
 *     if LevenshteinMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":377
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.f64 = 1.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 0
 *     return True
 */
  __Pyx_TraceLine(377,1,__PYX_ERR(0, 377, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":378
 * 
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(378,1,__PYX_ERR(0, 378, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":379
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer LevenshteinDistanceContext = CreateScorerContext(LevenshteinKwargsInit, GetScorerFlagsLevenshteinDistance, LevenshteinDistanceInit, UncachedLevenshteinDistanceFuncInit())
 */
  __Pyx_TraceLine(379,1,__PYX_ERR(0, 379, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":369
 *     return True
 * 
 * cdef bool GetScorerFlagsLevenshteinNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsLevenshteinNormalizedSimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":396
 * SetFuncAttrs(levenshtein_opcodes, metrics_py.levenshtein_opcodes)
 * 
 * def damerau_levenshtein_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_13damerau_levenshtein_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_13damerau_levenshtein_distance = {"damerau_levenshtein_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_13damerau_levenshtein_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_13damerau_levenshtein_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("damerau_levenshtein_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 396, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 396, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("damerau_levenshtein_distance", 1, 2, 2, 1); __PYX_ERR(0, 396, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 396, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "damerau_levenshtein_distance") < 0)) __PYX_ERR(0, 396, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("damerau_levenshtein_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 396, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.damerau_levenshtein_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_12damerau_levenshtein_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_12damerau_levenshtein_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  size_t __pyx_v_c_score_cutoff;
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__10)
  __Pyx_RefNannySetupContext("damerau_levenshtein_distance", 1);
  __Pyx_TraceCall("damerau_levenshtein_distance", __pyx_f[0], 396, 0, __PYX_ERR(0, 396, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":397
 * 
 * def damerau_levenshtein_distance(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(397,0,__PYX_ERR(0, 397, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_cutoff, SIZE_MAX, 0); if (unlikely(__pyx_t_1 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 397, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":399
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return damerau_levenshtein_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(399,0,__PYX_ERR(0, 399, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 399, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":400
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return damerau_levenshtein_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(400,0,__PYX_ERR(0, 400, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = damerau_levenshtein_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 400, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":396
 * SetFuncAttrs(levenshtein_opcodes, metrics_py.levenshtein_opcodes)
 * 
 * def damerau_levenshtein_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.damerau_levenshtein_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":403
 * 
 * 
 * def damerau_levenshtein_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_15damerau_levenshtein_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_15damerau_levenshtein_similarity = {"damerau_levenshtein_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_15damerau_levenshtein_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_15damerau_levenshtein_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("damerau_levenshtein_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("damerau_levenshtein_similarity", 1, 2, 2, 1); __PYX_ERR(0, 403, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "damerau_levenshtein_similarity") < 0)) __PYX_ERR(0, 403, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("damerau_levenshtein_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 403, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.damerau_levenshtein_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_14damerau_levenshtein_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_14damerau_levenshtein_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  size_t __pyx_v_c_score_cutoff;
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__11)
  __Pyx_RefNannySetupContext("damerau_levenshtein_similarity", 1);
  __Pyx_TraceCall("damerau_levenshtein_similarity", __pyx_f[0], 403, 0, __PYX_ERR(0, 403, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":404
 * 
 * def damerau_levenshtein_similarity(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(404,0,__PYX_ERR(0, 404, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_cutoff, 0, SIZE_MAX); if (unlikely(__pyx_t_1 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 404, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":406
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return damerau_levenshtein_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(406,0,__PYX_ERR(0, 406, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 406, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":407
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return damerau_levenshtein_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(407,0,__PYX_ERR(0, 407, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = damerau_levenshtein_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 407, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":403
 * 
 * 
 * def damerau_levenshtein_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.damerau_levenshtein_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":410
 * 
 * 
 * def damerau_levenshtein_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_17damerau_levenshtein_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_17damerau_levenshtein_normalized_distance = {"damerau_levenshtein_normalized_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_17damerau_levenshtein_normalized_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_17damerau_levenshtein_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("damerau_levenshtein_normalized_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("damerau_levenshtein_normalized_distance", 1, 2, 2, 1); __PYX_ERR(0, 410, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "damerau_levenshtein_normalized_distance") < 0)) __PYX_ERR(0, 410, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("damerau_levenshtein_normalized_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 410, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.damerau_levenshtein_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_16damerau_levenshtein_normalized_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_16damerau_levenshtein_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__12)
  __Pyx_RefNannySetupContext("damerau_levenshtein_normalized_distance", 1);
  __Pyx_TraceCall("damerau_levenshtein_normalized_distance", __pyx_f[0], 410, 0, __PYX_ERR(0, 410, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":412
 * def damerau_levenshtein_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 1.0
 */
  __Pyx_TraceLine(412,0,__PYX_ERR(0, 412, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":413
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  __Pyx_TraceLine(413,0,__PYX_ERR(0, 413, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":414
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 1.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 */
    __Pyx_TraceLine(414,0,__PYX_ERR(0, 414, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_1_0);
    __pyx_r = __pyx_float_1_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":413
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":416
 *         return 1.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return damerau_levenshtein_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 */
  __Pyx_TraceLine(416,0,__PYX_ERR(0, 416, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 1.0, 0.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 416, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":417
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return damerau_levenshtein_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(417,0,__PYX_ERR(0, 417, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 417, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":418
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return damerau_levenshtein_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(418,0,__PYX_ERR(0, 418, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = damerau_levenshtein_normalized_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 418, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":410
 * 
 * 
 * def damerau_levenshtein_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.damerau_levenshtein_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":421
 * 
 * 
 * def damerau_levenshtein_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_19damerau_levenshtein_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_19damerau_levenshtein_normalized_similarity = {"damerau_levenshtein_normalized_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_19damerau_levenshtein_normalized_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_19damerau_levenshtein_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("damerau_levenshtein_normalized_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 421, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 421, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("damerau_levenshtein_normalized_similarity", 1, 2, 2, 1); __PYX_ERR(0, 421, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 421, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "damerau_levenshtein_normalized_similarity") < 0)) __PYX_ERR(0, 421, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("damerau_levenshtein_normalized_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 421, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.damerau_levenshtein_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_18damerau_levenshtein_normalized_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_18damerau_levenshtein_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__13)
  __Pyx_RefNannySetupContext("damerau_levenshtein_normalized_similarity", 1);
  __Pyx_TraceCall("damerau_levenshtein_normalized_similarity", __pyx_f[0], 421, 0, __PYX_ERR(0, 421, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":423
 * def damerau_levenshtein_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 0.0
 */
  __Pyx_TraceLine(423,0,__PYX_ERR(0, 423, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":424
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  __Pyx_TraceLine(424,0,__PYX_ERR(0, 424, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":425
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 */
    __Pyx_TraceLine(425,0,__PYX_ERR(0, 425, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":424
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":427
 *         return 0.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return damerau_levenshtein_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 */
  __Pyx_TraceLine(427,0,__PYX_ERR(0, 427, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 0.0, 1.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 427, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":428
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return damerau_levenshtein_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(428,0,__PYX_ERR(0, 428, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 428, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":429
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return damerau_levenshtein_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(429,0,__PYX_ERR(0, 429, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = damerau_levenshtein_normalized_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 429, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":421
 * 
 * 
 * def damerau_levenshtein_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.damerau_levenshtein_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":431
 *     return damerau_levenshtein_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsDamerauLevenshteinDistance(CYTHON_UNUSED RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsDamerauLevenshteinDistance", __pyx_f[0], 431, 1, __PYX_ERR(0, 431, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":432
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 */
  __Pyx_TraceLine(432,1,__PYX_ERR(0, 432, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = (RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC);

  /* "rapidfuzz/distance/metrics_cpp.pyx":433
 * cdef bool GetScorerFlagsDamerauLevenshteinDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 *     return True
 */
  __Pyx_TraceLine(433,1,__PYX_ERR(0, 433, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.sizet = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":434
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(434,1,__PYX_ERR(0, 434, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.sizet = SIZE_MAX;

  /* "rapidfuzz/distance/metrics_cpp.pyx":435
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(435,1,__PYX_ERR(0, 435, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":431
 *     return damerau_levenshtein_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsDamerauLevenshteinDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":437
 *     return True
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsDamerauLevenshteinNormalizedDistance(CYTHON_UNUSED RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsDamerauLevenshteinNormalizedDistance", __pyx_f[0], 437, 1, __PYX_ERR(0, 437, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":438
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1
 */
  __Pyx_TraceLine(438,1,__PYX_ERR(0, 438, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":439
 * cdef bool GetScorerFlagsDamerauLevenshteinNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 1
 *     return True
 */
  __Pyx_TraceLine(439,1,__PYX_ERR(0, 439, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":440
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(440,1,__PYX_ERR(0, 440, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":441
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(441,1,__PYX_ERR(0, 441, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":437
 *     return True
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsDamerauLevenshteinNormalizedDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":443
 *     return True
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsDamerauLevenshteinSimilarity(CYTHON_UNUSED RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsDamerauLevenshteinSimilarity", __pyx_f[0], 443, 1, __PYX_ERR(0, 443, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":444
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0
 */
  __Pyx_TraceLine(444,1,__PYX_ERR(0, 444, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = (RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC);

  /* "rapidfuzz/distance/metrics_cpp.pyx":445
 * cdef bool GetScorerFlagsDamerauLevenshteinSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.sizet = 0
 *     return True
 */
  __Pyx_TraceLine(445,1,__PYX_ERR(0, 445, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.sizet = SIZE_MAX;

  /* "rapidfuzz/distance/metrics_cpp.pyx":446
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(446,1,__PYX_ERR(0, 446, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.sizet = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":447
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(447,1,__PYX_ERR(0, 447, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":443
 *     return True
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsDamerauLevenshteinSimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":449
 *     return True
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsDamerauLevenshteinNormalizedSimilarity(CYTHON_UNUSED RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsDamerauLevenshteinNormalizedSimilarity", __pyx_f[0], 449, 1, __PYX_ERR(0, 449, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":450
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0
 */
  __Pyx_TraceLine(450,1,__PYX_ERR(0, 450, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":451
 * cdef bool GetScorerFlagsDamerauLevenshteinNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 0
 *     return True
 */
  __Pyx_TraceLine(451,1,__PYX_ERR(0, 451, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":452
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(452,1,__PYX_ERR(0, 452, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":453
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer DamerauLevenshteinDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsDamerauLevenshteinDistance, DamerauLevenshteinDistanceInit, UncachedDamerauLevenshteinDistanceFuncInit())
 */
  __Pyx_TraceLine(453,1,__PYX_ERR(0, 453, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":449
 *     return True
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsDamerauLevenshteinNormalizedSimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":468
 * 
 * 
 * def lcs_seq_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_21lcs_seq_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_21lcs_seq_distance = {"lcs_seq_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_21lcs_seq_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_21lcs_seq_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lcs_seq_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 468, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 468, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("lcs_seq_distance", 1, 2, 2, 1); __PYX_ERR(0, 468, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 468, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lcs_seq_distance") < 0)) __PYX_ERR(0, 468, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lcs_seq_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 468, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.lcs_seq_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_20lcs_seq_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_20lcs_seq_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  size_t __pyx_v_c_score_cutoff;
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__14)
  __Pyx_RefNannySetupContext("lcs_seq_distance", 1);
  __Pyx_TraceCall("lcs_seq_distance", __pyx_f[0], 468, 0, __PYX_ERR(0, 468, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":469
 * 
 * def lcs_seq_distance(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(469,0,__PYX_ERR(0, 469, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_cutoff, SIZE_MAX, 0); if (unlikely(__pyx_t_1 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":471
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return lcs_seq_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(471,0,__PYX_ERR(0, 471, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 471, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":472
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return lcs_seq_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(472,0,__PYX_ERR(0, 472, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = lcs_seq_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 472, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":468
 * 
 * 
 * def lcs_seq_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.lcs_seq_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":475
 * 
 * 
 * def lcs_seq_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_23lcs_seq_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_23lcs_seq_similarity = {"lcs_seq_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_23lcs_seq_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_23lcs_seq_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lcs_seq_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("lcs_seq_similarity", 1, 2, 2, 1); __PYX_ERR(0, 475, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lcs_seq_similarity") < 0)) __PYX_ERR(0, 475, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lcs_seq_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 475, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.lcs_seq_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_22lcs_seq_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_22lcs_seq_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  size_t __pyx_v_c_score_cutoff;
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__15)
  __Pyx_RefNannySetupContext("lcs_seq_similarity", 1);
  __Pyx_TraceCall("lcs_seq_similarity", __pyx_f[0], 475, 0, __PYX_ERR(0, 475, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":476
 * 
 * def lcs_seq_similarity(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(476,0,__PYX_ERR(0, 476, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_cutoff, 0, SIZE_MAX); if (unlikely(__pyx_t_1 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 476, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":478
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return lcs_seq_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(478,0,__PYX_ERR(0, 478, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 478, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":479
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return lcs_seq_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(479,0,__PYX_ERR(0, 479, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = lcs_seq_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 479, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":475
 * 
 * 
 * def lcs_seq_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.lcs_seq_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":482
 * 
 * 
 * def lcs_seq_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_25lcs_seq_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_25lcs_seq_normalized_distance = {"lcs_seq_normalized_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_25lcs_seq_normalized_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_25lcs_seq_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lcs_seq_normalized_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 482, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 482, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("lcs_seq_normalized_distance", 1, 2, 2, 1); __PYX_ERR(0, 482, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 482, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lcs_seq_normalized_distance") < 0)) __PYX_ERR(0, 482, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lcs_seq_normalized_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 482, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.lcs_seq_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_24lcs_seq_normalized_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_24lcs_seq_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__16)
  __Pyx_RefNannySetupContext("lcs_seq_normalized_distance", 1);
  __Pyx_TraceCall("lcs_seq_normalized_distance", __pyx_f[0], 482, 0, __PYX_ERR(0, 482, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":484
 * def lcs_seq_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 1.0
 */
  __Pyx_TraceLine(484,0,__PYX_ERR(0, 484, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":485
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  __Pyx_TraceLine(485,0,__PYX_ERR(0, 485, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":486
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 1.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 */
    __Pyx_TraceLine(486,0,__PYX_ERR(0, 486, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_1_0);
    __pyx_r = __pyx_float_1_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":485
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":488
 *         return 1.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return lcs_seq_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 */
  __Pyx_TraceLine(488,0,__PYX_ERR(0, 488, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 1.0, 0.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 488, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":489
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return lcs_seq_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(489,0,__PYX_ERR(0, 489, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 489, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":490
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return lcs_seq_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(490,0,__PYX_ERR(0, 490, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = lcs_seq_normalized_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 490, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":482
 * 
 * 
 * def lcs_seq_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.lcs_seq_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":493
 * 
 * 
 * def lcs_seq_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_27lcs_seq_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_27lcs_seq_normalized_similarity = {"lcs_seq_normalized_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_27lcs_seq_normalized_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_27lcs_seq_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lcs_seq_normalized_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 493, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 493, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("lcs_seq_normalized_similarity", 1, 2, 2, 1); __PYX_ERR(0, 493, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 493, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lcs_seq_normalized_similarity") < 0)) __PYX_ERR(0, 493, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lcs_seq_normalized_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 493, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.lcs_seq_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_26lcs_seq_normalized_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_26lcs_seq_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__17)
  __Pyx_RefNannySetupContext("lcs_seq_normalized_similarity", 1);
  __Pyx_TraceCall("lcs_seq_normalized_similarity", __pyx_f[0], 493, 0, __PYX_ERR(0, 493, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":495
 * def lcs_seq_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 0.0
 */
  __Pyx_TraceLine(495,0,__PYX_ERR(0, 495, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":496
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  __Pyx_TraceLine(496,0,__PYX_ERR(0, 496, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":497
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 */
    __Pyx_TraceLine(497,0,__PYX_ERR(0, 497, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":496
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":499
 *         return 0.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return lcs_seq_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 */
  __Pyx_TraceLine(499,0,__PYX_ERR(0, 499, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 0.0, 1.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 499, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":500
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return lcs_seq_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(500,0,__PYX_ERR(0, 500, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 500, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":501
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return lcs_seq_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(501,0,__PYX_ERR(0, 501, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = lcs_seq_normalized_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 501, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":493
 * 
 * 
 * def lcs_seq_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.lcs_seq_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":504
 * 
 * 
 * def lcs_seq_editops(s1, s2, *, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_29lcs_seq_editops(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_29lcs_seq_editops = {"lcs_seq_editops", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_29lcs_seq_editops, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_29lcs_seq_editops(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lcs_seq_editops (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 504, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 504, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("lcs_seq_editops", 1, 2, 2, 1); __PYX_ERR(0, 504, __pyx_L3_error)
        }
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 2;
        PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 504, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lcs_seq_editops") < 0)) __PYX_ERR(0, 504, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lcs_seq_editops", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 504, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.lcs_seq_editops", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_28lcs_seq_editops(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_28lcs_seq_editops(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_ops = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  bool __pyx_t_2;
  rapidfuzz::Editops __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__18)
  __Pyx_RefNannySetupContext("lcs_seq_editops", 1);
  __Pyx_TraceCall("lcs_seq_editops", __pyx_f[0], 504, 0, __PYX_ERR(0, 504, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":506
 * def lcs_seq_editops(s1, s2, *, processor=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)             # <<<<<<<<<<<<<<
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(506,0,__PYX_ERR(0, 506, __pyx_L1_error))
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops)))) __PYX_ERR(0, 506, __pyx_L1_error)
  __pyx_v_ops = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":508
 *     cdef Editops ops = Editops.__new__(Editops)
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     ops.editops = lcs_seq_editops_func(s1_proc.string, s2_proc.string)
 *     return ops
 */
  __Pyx_TraceLine(508,0,__PYX_ERR(0, 508, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 508, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":509
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     ops.editops = lcs_seq_editops_func(s1_proc.string, s2_proc.string)             # <<<<<<<<<<<<<<
 *     return ops
 * 
 */
  __Pyx_TraceLine(509,0,__PYX_ERR(0, 509, __pyx_L1_error))
  try {
    __pyx_t_3 = lcs_seq_editops_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 509, __pyx_L1_error)
  }
  __pyx_v_ops->editops = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "rapidfuzz/distance/metrics_cpp.pyx":510
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     ops.editops = lcs_seq_editops_func(s1_proc.string, s2_proc.string)
 *     return ops             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(510,0,__PYX_ERR(0, 510, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_ops);
  __pyx_r = ((PyObject *)__pyx_v_ops);
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":504
 * 
 * 
 * def lcs_seq_editops(s1, s2, *, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.lcs_seq_editops", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ops);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":513
 * 
 * 
 * def lcs_seq_opcodes(s1, s2, *, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_31lcs_seq_opcodes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_31lcs_seq_opcodes = {"lcs_seq_opcodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_31lcs_seq_opcodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_31lcs_seq_opcodes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lcs_seq_opcodes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 513, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 513, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("lcs_seq_opcodes", 1, 2, 2, 1); __PYX_ERR(0, 513, __pyx_L3_error)
        }
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 2;
        PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 513, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lcs_seq_opcodes") < 0)) __PYX_ERR(0, 513, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lcs_seq_opcodes", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 513, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.lcs_seq_opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_30lcs_seq_opcodes(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_30lcs_seq_opcodes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_ops = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  bool __pyx_t_2;
  rapidfuzz::Editops __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__19)
  __Pyx_RefNannySetupContext("lcs_seq_opcodes", 1);
  __Pyx_TraceCall("lcs_seq_opcodes", __pyx_f[0], 513, 0, __PYX_ERR(0, 513, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":515
 * def lcs_seq_opcodes(s1, s2, *, processor=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)             # <<<<<<<<<<<<<<
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(515,0,__PYX_ERR(0, 515, __pyx_L1_error))
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops)))) __PYX_ERR(0, 515, __pyx_L1_error)
  __pyx_v_ops = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":517
 *     cdef Editops ops = Editops.__new__(Editops)
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     ops.editops = lcs_seq_editops_func(s1_proc.string, s2_proc.string)
 *     return ops.as_opcodes()
 */
  __Pyx_TraceLine(517,0,__PYX_ERR(0, 517, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 517, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":518
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     ops.editops = lcs_seq_editops_func(s1_proc.string, s2_proc.string)             # <<<<<<<<<<<<<<
 *     return ops.as_opcodes()
 * 
 */
  __Pyx_TraceLine(518,0,__PYX_ERR(0, 518, __pyx_L1_error))
  try {
    __pyx_t_3 = lcs_seq_editops_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 518, __pyx_L1_error)
  }
  __pyx_v_ops->editops = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "rapidfuzz/distance/metrics_cpp.pyx":519
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     ops.editops = lcs_seq_editops_func(s1_proc.string, s2_proc.string)
 *     return ops.as_opcodes()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(519,0,__PYX_ERR(0, 519, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ops), __pyx_n_s_as_opcodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":513
 * 
 * 
 * def lcs_seq_opcodes(s1, s2, *, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.lcs_seq_opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ops);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":522
 * 
 * 
 * cdef bool GetScorerFlagsLCSseqDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if LCSseqMultiStringSupport(self):
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLCSseqDistance(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsLCSseqDistance", __pyx_f[0], 522, 1, __PYX_ERR(0, 522, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":523
 * 
 * cdef bool GetScorerFlagsLCSseqDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     if LCSseqMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
  __Pyx_TraceLine(523,1,__PYX_ERR(0, 523, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = (RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC);

  /* "rapidfuzz/distance/metrics_cpp.pyx":524
 * cdef bool GetScorerFlagsLCSseqDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if LCSseqMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(524,1,__PYX_ERR(0, 524, __pyx_L1_error))
  __pyx_t_1 = (LCSseqMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":525
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if LCSseqMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.sizet = 0
 */
    __Pyx_TraceLine(525,1,__PYX_ERR(0, 525, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":524
 * cdef bool GetScorerFlagsLCSseqDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if LCSseqMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":527
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.sizet = 0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 *     return True
 */
  __Pyx_TraceLine(527,1,__PYX_ERR(0, 527, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.sizet = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":528
 * 
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(528,1,__PYX_ERR(0, 528, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.sizet = SIZE_MAX;

  /* "rapidfuzz/distance/metrics_cpp.pyx":529
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsLCSseqNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(529,1,__PYX_ERR(0, 529, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":522
 * 
 * 
 * cdef bool GetScorerFlagsLCSseqDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if LCSseqMultiStringSupport(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsLCSseqDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":531
 *     return True
 * 
 * cdef bool GetScorerFlagsLCSseqNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if LCSseqMultiStringSupport(self):
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLCSseqNormalizedDistance(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsLCSseqNormalizedDistance", __pyx_f[0], 531, 1, __PYX_ERR(0, 531, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":532
 * 
 * cdef bool GetScorerFlagsLCSseqNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     if LCSseqMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
  __Pyx_TraceLine(532,1,__PYX_ERR(0, 532, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":533
 * cdef bool GetScorerFlagsLCSseqNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if LCSseqMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(533,1,__PYX_ERR(0, 533, __pyx_L1_error))
  __pyx_t_1 = (LCSseqMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":534
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if LCSseqMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.f64 = 0.0
 */
    __Pyx_TraceLine(534,1,__PYX_ERR(0, 534, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":533
 * cdef bool GetScorerFlagsLCSseqNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if LCSseqMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":536
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.f64 = 0.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 1
 *     return True
 */
  __Pyx_TraceLine(536,1,__PYX_ERR(0, 536, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":537
 * 
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(537,1,__PYX_ERR(0, 537, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":538
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsLCSseqSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(538,1,__PYX_ERR(0, 538, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":531
 *     return True
 * 
 * cdef bool GetScorerFlagsLCSseqNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if LCSseqMultiStringSupport(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsLCSseqNormalizedDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":540
 *     return True
 * 
 * cdef bool GetScorerFlagsLCSseqSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if LCSseqMultiStringSupport(self):
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLCSseqSimilarity(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsLCSseqSimilarity", __pyx_f[0], 540, 1, __PYX_ERR(0, 540, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":541
 * 
 * cdef bool GetScorerFlagsLCSseqSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     if LCSseqMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
  __Pyx_TraceLine(541,1,__PYX_ERR(0, 541, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = (RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC);

  /* "rapidfuzz/distance/metrics_cpp.pyx":542
 * cdef bool GetScorerFlagsLCSseqSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if LCSseqMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(542,1,__PYX_ERR(0, 542, __pyx_L1_error))
  __pyx_t_1 = (LCSseqMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":543
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if LCSseqMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 */
    __Pyx_TraceLine(543,1,__PYX_ERR(0, 543, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":542
 * cdef bool GetScorerFlagsLCSseqSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if LCSseqMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":545
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.sizet = SIZE_MAX             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.sizet = 0
 *     return True
 */
  __Pyx_TraceLine(545,1,__PYX_ERR(0, 545, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.sizet = SIZE_MAX;

  /* "rapidfuzz/distance/metrics_cpp.pyx":546
 * 
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(546,1,__PYX_ERR(0, 546, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.sizet = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":547
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsLCSseqNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(547,1,__PYX_ERR(0, 547, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":540
 *     return True
 * 
 * cdef bool GetScorerFlagsLCSseqSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if LCSseqMultiStringSupport(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsLCSseqSimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":549
 *     return True
 * 
 * cdef bool GetScorerFlagsLCSseqNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if LCSseqMultiStringSupport(self):
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLCSseqNormalizedSimilarity(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsLCSseqNormalizedSimilarity", __pyx_f[0], 549, 1, __PYX_ERR(0, 549, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":550
 * 
 * cdef bool GetScorerFlagsLCSseqNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     if LCSseqMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
  __Pyx_TraceLine(550,1,__PYX_ERR(0, 550, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":551
 * cdef bool GetScorerFlagsLCSseqNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if LCSseqMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(551,1,__PYX_ERR(0, 551, __pyx_L1_error))
  __pyx_t_1 = (LCSseqMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":552
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if LCSseqMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.f64 = 1.0
 */
    __Pyx_TraceLine(552,1,__PYX_ERR(0, 552, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":551
 * cdef bool GetScorerFlagsLCSseqNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if LCSseqMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":554
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.f64 = 1.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 0
 *     return True
 */
  __Pyx_TraceLine(554,1,__PYX_ERR(0, 554, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":555
 * 
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(555,1,__PYX_ERR(0, 555, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":556
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer LCSseqDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsLCSseqDistance, LCSseqDistanceInit, UncachedLCSseqDistanceFuncInit())
 */
  __Pyx_TraceLine(556,1,__PYX_ERR(0, 556, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":549
 *     return True
 * 
 * cdef bool GetScorerFlagsLCSseqNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if LCSseqMultiStringSupport(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsLCSseqNormalizedSimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":573
 * SetFuncAttrs(lcs_seq_opcodes, metrics_py.lcs_seq_opcodes)
 * 
 * def indel_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_33indel_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_33indel_distance = {"indel_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_33indel_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_33indel_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("indel_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 573, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 573, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("indel_distance", 1, 2, 2, 1); __PYX_ERR(0, 573, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 573, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "indel_distance") < 0)) __PYX_ERR(0, 573, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("indel_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 573, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.indel_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_32indel_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_32indel_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  size_t __pyx_v_c_score_cutoff;
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__20)
  __Pyx_RefNannySetupContext("indel_distance", 1);
  __Pyx_TraceCall("indel_distance", __pyx_f[0], 573, 0, __PYX_ERR(0, 573, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":574
 * 
 * def indel_distance(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(574,0,__PYX_ERR(0, 574, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_cutoff, SIZE_MAX, 0); if (unlikely(__pyx_t_1 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":576
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return indel_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(576,0,__PYX_ERR(0, 576, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 576, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":577
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return indel_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(577,0,__PYX_ERR(0, 577, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = indel_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 577, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":573
 * SetFuncAttrs(lcs_seq_opcodes, metrics_py.lcs_seq_opcodes)
 * 
 * def indel_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.indel_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":580
 * 
 * 
 * def indel_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_35indel_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_35indel_similarity = {"indel_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_35indel_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_35indel_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("indel_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 580, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 580, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("indel_similarity", 1, 2, 2, 1); __PYX_ERR(0, 580, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 580, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "indel_similarity") < 0)) __PYX_ERR(0, 580, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("indel_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 580, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.indel_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_34indel_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_34indel_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  size_t __pyx_v_c_score_cutoff;
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__21)
  __Pyx_RefNannySetupContext("indel_similarity", 1);
  __Pyx_TraceCall("indel_similarity", __pyx_f[0], 580, 0, __PYX_ERR(0, 580, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":581
 * 
 * def indel_similarity(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(581,0,__PYX_ERR(0, 581, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_cutoff, 0, SIZE_MAX); if (unlikely(__pyx_t_1 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 581, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":583
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return indel_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(583,0,__PYX_ERR(0, 583, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 583, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":584
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return indel_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(584,0,__PYX_ERR(0, 584, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = indel_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 584, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":580
 * 
 * 
 * def indel_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.indel_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":587
 * 
 * 
 * def indel_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_37indel_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_37indel_normalized_distance = {"indel_normalized_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_37indel_normalized_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_37indel_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("indel_normalized_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("indel_normalized_distance", 1, 2, 2, 1); __PYX_ERR(0, 587, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "indel_normalized_distance") < 0)) __PYX_ERR(0, 587, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("indel_normalized_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 587, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.indel_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_36indel_normalized_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_36indel_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__22)
  __Pyx_RefNannySetupContext("indel_normalized_distance", 1);
  __Pyx_TraceCall("indel_normalized_distance", __pyx_f[0], 587, 0, __PYX_ERR(0, 587, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":589
 * def indel_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 1.0
 */
  __Pyx_TraceLine(589,0,__PYX_ERR(0, 589, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":590
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  __Pyx_TraceLine(590,0,__PYX_ERR(0, 590, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":591
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 1.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 */
    __Pyx_TraceLine(591,0,__PYX_ERR(0, 591, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_1_0);
    __pyx_r = __pyx_float_1_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":590
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":593
 *         return 1.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return indel_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 */
  __Pyx_TraceLine(593,0,__PYX_ERR(0, 593, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 1.0, 0.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 593, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":594
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return indel_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(594,0,__PYX_ERR(0, 594, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 594, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":595
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return indel_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(595,0,__PYX_ERR(0, 595, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = indel_normalized_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 595, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":587
 * 
 * 
 * def indel_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.indel_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":598
 * 
 * 
 * def indel_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_39indel_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_39indel_normalized_similarity = {"indel_normalized_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_39indel_normalized_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_39indel_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("indel_normalized_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("indel_normalized_similarity", 1, 2, 2, 1); __PYX_ERR(0, 598, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "indel_normalized_similarity") < 0)) __PYX_ERR(0, 598, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("indel_normalized_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 598, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.indel_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_38indel_normalized_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_38indel_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__23)
  __Pyx_RefNannySetupContext("indel_normalized_similarity", 1);
  __Pyx_TraceCall("indel_normalized_similarity", __pyx_f[0], 598, 0, __PYX_ERR(0, 598, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":600
 * def indel_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 0.0
 */
  __Pyx_TraceLine(600,0,__PYX_ERR(0, 600, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":601
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  __Pyx_TraceLine(601,0,__PYX_ERR(0, 601, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":602
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 */
    __Pyx_TraceLine(602,0,__PYX_ERR(0, 602, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":601
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":604
 *         return 0.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return indel_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 */
  __Pyx_TraceLine(604,0,__PYX_ERR(0, 604, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 0.0, 1.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 604, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":605
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return indel_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(605,0,__PYX_ERR(0, 605, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 605, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":606
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return indel_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(606,0,__PYX_ERR(0, 606, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = indel_normalized_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 606, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":598
 * 
 * 
 * def indel_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.indel_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":609
 * 
 * 
 * def indel_editops(s1, s2, *, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_41indel_editops(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_41indel_editops = {"indel_editops", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_41indel_editops, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_41indel_editops(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("indel_editops (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 609, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 609, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("indel_editops", 1, 2, 2, 1); __PYX_ERR(0, 609, __pyx_L3_error)
        }
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 2;
        PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 609, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "indel_editops") < 0)) __PYX_ERR(0, 609, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("indel_editops", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 609, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.indel_editops", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_40indel_editops(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_40indel_editops(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_ops = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  bool __pyx_t_2;
  rapidfuzz::Editops __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__24)
  __Pyx_RefNannySetupContext("indel_editops", 1);
  __Pyx_TraceCall("indel_editops", __pyx_f[0], 609, 0, __PYX_ERR(0, 609, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":611
 * def indel_editops(s1, s2, *, processor=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)             # <<<<<<<<<<<<<<
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(611,0,__PYX_ERR(0, 611, __pyx_L1_error))
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops)))) __PYX_ERR(0, 611, __pyx_L1_error)
  __pyx_v_ops = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":613
 *     cdef Editops ops = Editops.__new__(Editops)
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     ops.editops = indel_editops_func(s1_proc.string, s2_proc.string)
 *     return ops
 */
  __Pyx_TraceLine(613,0,__PYX_ERR(0, 613, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 613, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":614
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     ops.editops = indel_editops_func(s1_proc.string, s2_proc.string)             # <<<<<<<<<<<<<<
 *     return ops
 * 
 */
  __Pyx_TraceLine(614,0,__PYX_ERR(0, 614, __pyx_L1_error))
  try {
    __pyx_t_3 = indel_editops_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 614, __pyx_L1_error)
  }
  __pyx_v_ops->editops = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "rapidfuzz/distance/metrics_cpp.pyx":615
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     ops.editops = indel_editops_func(s1_proc.string, s2_proc.string)
 *     return ops             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(615,0,__PYX_ERR(0, 615, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_ops);
  __pyx_r = ((PyObject *)__pyx_v_ops);
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":609
 * 
 * 
 * def indel_editops(s1, s2, *, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.indel_editops", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ops);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":618
 * 
 * 
 * def indel_opcodes(s1, s2, *, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_43indel_opcodes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_43indel_opcodes = {"indel_opcodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_43indel_opcodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_43indel_opcodes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("indel_opcodes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 618, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 618, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("indel_opcodes", 1, 2, 2, 1); __PYX_ERR(0, 618, __pyx_L3_error)
        }
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 2;
        PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 618, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "indel_opcodes") < 0)) __PYX_ERR(0, 618, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("indel_opcodes", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 618, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.indel_opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_42indel_opcodes(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_42indel_opcodes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_ops = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  bool __pyx_t_2;
  rapidfuzz::Editops __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__25)
  __Pyx_RefNannySetupContext("indel_opcodes", 1);
  __Pyx_TraceCall("indel_opcodes", __pyx_f[0], 618, 0, __PYX_ERR(0, 618, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":620
 * def indel_opcodes(s1, s2, *, processor=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)             # <<<<<<<<<<<<<<
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(620,0,__PYX_ERR(0, 620, __pyx_L1_error))
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops)))) __PYX_ERR(0, 620, __pyx_L1_error)
  __pyx_v_ops = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":622
 *     cdef Editops ops = Editops.__new__(Editops)
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     ops.editops = indel_editops_func(s1_proc.string, s2_proc.string)
 *     return ops.as_opcodes()
 */
  __Pyx_TraceLine(622,0,__PYX_ERR(0, 622, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 622, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":623
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     ops.editops = indel_editops_func(s1_proc.string, s2_proc.string)             # <<<<<<<<<<<<<<
 *     return ops.as_opcodes()
 * 
 */
  __Pyx_TraceLine(623,0,__PYX_ERR(0, 623, __pyx_L1_error))
  try {
    __pyx_t_3 = indel_editops_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 623, __pyx_L1_error)
  }
  __pyx_v_ops->editops = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "rapidfuzz/distance/metrics_cpp.pyx":624
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     ops.editops = indel_editops_func(s1_proc.string, s2_proc.string)
 *     return ops.as_opcodes()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(624,0,__PYX_ERR(0, 624, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ops), __pyx_n_s_as_opcodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":618
 * 
 * 
 * def indel_opcodes(s1, s2, *, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.indel_opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ops);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":627
 * 
 * 
 * cdef bool GetScorerFlagsIndelDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if IndelMultiStringSupport(self):
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsIndelDistance(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsIndelDistance", __pyx_f[0], 627, 1, __PYX_ERR(0, 627, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":628
 * 
 * cdef bool GetScorerFlagsIndelDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     if IndelMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
  __Pyx_TraceLine(628,1,__PYX_ERR(0, 628, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = (RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC);

  /* "rapidfuzz/distance/metrics_cpp.pyx":629
 * cdef bool GetScorerFlagsIndelDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if IndelMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(629,1,__PYX_ERR(0, 629, __pyx_L1_error))
  __pyx_t_1 = (IndelMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":630
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if IndelMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.sizet = 0
 */
    __Pyx_TraceLine(630,1,__PYX_ERR(0, 630, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":629
 * cdef bool GetScorerFlagsIndelDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if IndelMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":632
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.sizet = 0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 *     return True
 */
  __Pyx_TraceLine(632,1,__PYX_ERR(0, 632, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.sizet = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":633
 * 
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(633,1,__PYX_ERR(0, 633, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.sizet = SIZE_MAX;

  /* "rapidfuzz/distance/metrics_cpp.pyx":634
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(634,1,__PYX_ERR(0, 634, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":627
 * 
 * 
 * cdef bool GetScorerFlagsIndelDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if IndelMultiStringSupport(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsIndelDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":637
 * 
 * 
 * cdef bool GetScorerFlagsIndelNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if IndelMultiStringSupport(self):
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsIndelNormalizedDistance(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsIndelNormalizedDistance", __pyx_f[0], 637, 1, __PYX_ERR(0, 637, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":638
 * 
 * cdef bool GetScorerFlagsIndelNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     if IndelMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
  __Pyx_TraceLine(638,1,__PYX_ERR(0, 638, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":639
 * cdef bool GetScorerFlagsIndelNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if IndelMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(639,1,__PYX_ERR(0, 639, __pyx_L1_error))
  __pyx_t_1 = (IndelMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":640
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if IndelMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.f64 = 0.0
 */
    __Pyx_TraceLine(640,1,__PYX_ERR(0, 640, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":639
 * cdef bool GetScorerFlagsIndelNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if IndelMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":642
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.f64 = 0.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 1
 *     return True
 */
  __Pyx_TraceLine(642,1,__PYX_ERR(0, 642, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":643
 * 
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(643,1,__PYX_ERR(0, 643, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":644
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsIndelSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(644,1,__PYX_ERR(0, 644, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":637
 * 
 * 
 * cdef bool GetScorerFlagsIndelNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if IndelMultiStringSupport(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsIndelNormalizedDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":646
 *     return True
 * 
 * cdef bool GetScorerFlagsIndelSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if IndelMultiStringSupport(self):
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsIndelSimilarity(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsIndelSimilarity", __pyx_f[0], 646, 1, __PYX_ERR(0, 646, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":647
 * 
 * cdef bool GetScorerFlagsIndelSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     if IndelMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
  __Pyx_TraceLine(647,1,__PYX_ERR(0, 647, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = (RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC);

  /* "rapidfuzz/distance/metrics_cpp.pyx":648
 * cdef bool GetScorerFlagsIndelSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if IndelMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(648,1,__PYX_ERR(0, 648, __pyx_L1_error))
  __pyx_t_1 = (IndelMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":649
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if IndelMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 */
    __Pyx_TraceLine(649,1,__PYX_ERR(0, 649, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":648
 * cdef bool GetScorerFlagsIndelSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if IndelMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":651
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.sizet = SIZE_MAX             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.sizet = 0
 *     return True
 */
  __Pyx_TraceLine(651,1,__PYX_ERR(0, 651, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.sizet = SIZE_MAX;

  /* "rapidfuzz/distance/metrics_cpp.pyx":652
 * 
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(652,1,__PYX_ERR(0, 652, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.sizet = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":653
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(653,1,__PYX_ERR(0, 653, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":646
 *     return True
 * 
 * cdef bool GetScorerFlagsIndelSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if IndelMultiStringSupport(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsIndelSimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":656
 * 
 * 
 * cdef bool GetScorerFlagsIndelNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if IndelMultiStringSupport(self):
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsIndelNormalizedSimilarity(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsIndelNormalizedSimilarity", __pyx_f[0], 656, 1, __PYX_ERR(0, 656, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":657
 * 
 * cdef bool GetScorerFlagsIndelNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     if IndelMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
  __Pyx_TraceLine(657,1,__PYX_ERR(0, 657, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":658
 * cdef bool GetScorerFlagsIndelNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if IndelMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(658,1,__PYX_ERR(0, 658, __pyx_L1_error))
  __pyx_t_1 = (IndelMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":659
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if IndelMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.f64 = 1.0
 */
    __Pyx_TraceLine(659,1,__PYX_ERR(0, 659, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":658
 * cdef bool GetScorerFlagsIndelNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if IndelMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":661
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.f64 = 1.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 0
 *     return True
 */
  __Pyx_TraceLine(661,1,__PYX_ERR(0, 661, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":662
 * 
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(662,1,__PYX_ERR(0, 662, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":663
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(663,1,__PYX_ERR(0, 663, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":656
 * 
 * 
 * cdef bool GetScorerFlagsIndelNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if IndelMultiStringSupport(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsIndelNormalizedSimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":681
 * SetFuncAttrs(indel_opcodes, metrics_py.indel_opcodes)
 * 
 * def hamming_distance(s1, s2, *, pad=True, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_45hamming_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_45hamming_distance = {"hamming_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_45hamming_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_45hamming_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_pad = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hamming_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_pad,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_True)));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("hamming_distance", 1, 2, 2, 1); __PYX_ERR(0, 681, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 3)) {
        Py_ssize_t index;
        for (index = 2; index < 5 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "hamming_distance") < 0)) __PYX_ERR(0, 681, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_pad = values[2];
    __pyx_v_processor = values[3];
    __pyx_v_score_cutoff = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hamming_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 681, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.hamming_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_44hamming_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_pad, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_44hamming_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_pad, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  size_t __pyx_v_c_score_cutoff;
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__26)
  __Pyx_RefNannySetupContext("hamming_distance", 1);
  __Pyx_TraceCall("hamming_distance", __pyx_f[0], 681, 0, __PYX_ERR(0, 681, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":682
 * 
 * def hamming_distance(s1, s2, *, pad=True, processor=None, score_cutoff=None):
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 * 
 */
  __Pyx_TraceLine(682,0,__PYX_ERR(0, 682, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_cutoff, SIZE_MAX, 0); if (unlikely(__pyx_t_1 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 682, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":685
 *     cdef RF_StringWrapper s1_proc, s2_proc
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return hamming_distance_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(685,0,__PYX_ERR(0, 685, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 685, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":686
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return hamming_distance_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * def hamming_similarity(s1, s2, *, pad=True, processor=None, score_cutoff=None):
 */
  __Pyx_TraceLine(686,0,__PYX_ERR(0, 686, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_pad); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 686, __pyx_L1_error)
  try {
    __pyx_t_1 = hamming_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_t_2, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 686, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":681
 * SetFuncAttrs(indel_opcodes, metrics_py.indel_opcodes)
 * 
 * def hamming_distance(s1, s2, *, pad=True, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.hamming_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":688
 *     return hamming_distance_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)
 * 
 * def hamming_similarity(s1, s2, *, pad=True, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_47hamming_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_47hamming_similarity = {"hamming_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_47hamming_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_47hamming_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_pad = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hamming_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_pad,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_True)));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 688, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 688, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("hamming_similarity", 1, 2, 2, 1); __PYX_ERR(0, 688, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 3)) {
        Py_ssize_t index;
        for (index = 2; index < 5 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 688, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "hamming_similarity") < 0)) __PYX_ERR(0, 688, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_pad = values[2];
    __pyx_v_processor = values[3];
    __pyx_v_score_cutoff = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hamming_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 688, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.hamming_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_46hamming_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_pad, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_46hamming_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_pad, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  size_t __pyx_v_c_score_cutoff;
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__27)
  __Pyx_RefNannySetupContext("hamming_similarity", 1);
  __Pyx_TraceCall("hamming_similarity", __pyx_f[0], 688, 0, __PYX_ERR(0, 688, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":689
 * 
 * def hamming_similarity(s1, s2, *, pad=True, processor=None, score_cutoff=None):
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 * 
 */
  __Pyx_TraceLine(689,0,__PYX_ERR(0, 689, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_cutoff, 0, SIZE_MAX); if (unlikely(__pyx_t_1 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 689, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":692
 *     cdef RF_StringWrapper s1_proc, s2_proc
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return hamming_similarity_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(692,0,__PYX_ERR(0, 692, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 692, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":693
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return hamming_similarity_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * def hamming_normalized_distance(s1, s2, *, pad=True, processor=None, score_cutoff=None):
 */
  __Pyx_TraceLine(693,0,__PYX_ERR(0, 693, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_pad); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L1_error)
  try {
    __pyx_t_1 = hamming_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_t_2, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 693, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":688
 *     return hamming_distance_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)
 * 
 * def hamming_similarity(s1, s2, *, pad=True, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.hamming_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":695
 *     return hamming_similarity_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)
 * 
 * def hamming_normalized_distance(s1, s2, *, pad=True, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_49hamming_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_49hamming_normalized_distance = {"hamming_normalized_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_49hamming_normalized_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_49hamming_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_pad = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hamming_normalized_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_pad,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_True)));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 695, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 695, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("hamming_normalized_distance", 1, 2, 2, 1); __PYX_ERR(0, 695, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 3)) {
        Py_ssize_t index;
        for (index = 2; index < 5 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 695, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "hamming_normalized_distance") < 0)) __PYX_ERR(0, 695, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_pad = values[2];
    __pyx_v_processor = values[3];
    __pyx_v_score_cutoff = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hamming_normalized_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 695, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.hamming_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_48hamming_normalized_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_pad, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_48hamming_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_pad, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__28)
  __Pyx_RefNannySetupContext("hamming_normalized_distance", 1);
  __Pyx_TraceCall("hamming_normalized_distance", __pyx_f[0], 695, 0, __PYX_ERR(0, 695, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":697
 * def hamming_normalized_distance(s1, s2, *, pad=True, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 1.0
 */
  __Pyx_TraceLine(697,0,__PYX_ERR(0, 697, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":698
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  __Pyx_TraceLine(698,0,__PYX_ERR(0, 698, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":699
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 1.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 */
    __Pyx_TraceLine(699,0,__PYX_ERR(0, 699, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_1_0);
    __pyx_r = __pyx_float_1_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":698
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":701
 *         return 1.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return hamming_normalized_distance_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)
 */
  __Pyx_TraceLine(701,0,__PYX_ERR(0, 701, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 1.0, 0.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 701, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":702
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return hamming_normalized_distance_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(702,0,__PYX_ERR(0, 702, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 702, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":703
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return hamming_normalized_distance_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(703,0,__PYX_ERR(0, 703, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_pad); if (unlikely((__pyx_t_4 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 703, __pyx_L1_error)
  try {
    __pyx_t_3 = hamming_normalized_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_t_4, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 703, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":695
 *     return hamming_similarity_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)
 * 
 * def hamming_normalized_distance(s1, s2, *, pad=True, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.hamming_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":706
 * 
 * 
 * def hamming_normalized_similarity(s1, s2, *, pad=True, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_51hamming_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_51hamming_normalized_similarity = {"hamming_normalized_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_51hamming_normalized_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_51hamming_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_pad = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hamming_normalized_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_pad,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_True)));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("hamming_normalized_similarity", 1, 2, 2, 1); __PYX_ERR(0, 706, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 3)) {
        Py_ssize_t index;
        for (index = 2; index < 5 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "hamming_normalized_similarity") < 0)) __PYX_ERR(0, 706, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_pad = values[2];
    __pyx_v_processor = values[3];
    __pyx_v_score_cutoff = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hamming_normalized_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 706, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.hamming_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_50hamming_normalized_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_pad, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_50hamming_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_pad, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__29)
  __Pyx_RefNannySetupContext("hamming_normalized_similarity", 1);
  __Pyx_TraceCall("hamming_normalized_similarity", __pyx_f[0], 706, 0, __PYX_ERR(0, 706, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":708
 * def hamming_normalized_similarity(s1, s2, *, pad=True, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 0.0
 */
  __Pyx_TraceLine(708,0,__PYX_ERR(0, 708, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":709
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  __Pyx_TraceLine(709,0,__PYX_ERR(0, 709, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":710
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 */
    __Pyx_TraceLine(710,0,__PYX_ERR(0, 710, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":709
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":712
 *         return 0.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return hamming_normalized_similarity_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)
 */
  __Pyx_TraceLine(712,0,__PYX_ERR(0, 712, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 0.0, 1.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 712, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":713
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return hamming_normalized_similarity_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(713,0,__PYX_ERR(0, 713, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 713, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":714
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return hamming_normalized_similarity_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(714,0,__PYX_ERR(0, 714, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_pad); if (unlikely((__pyx_t_4 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L1_error)
  try {
    __pyx_t_3 = hamming_normalized_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_t_4, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 714, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":706
 * 
 * 
 * def hamming_normalized_similarity(s1, s2, *, pad=True, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.hamming_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":717
 * 
 * 
 * def hamming_editops(s1, s2, *, pad=True, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_53hamming_editops(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_53hamming_editops = {"hamming_editops", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_53hamming_editops, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_53hamming_editops(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_pad = 0;
  PyObject *__pyx_v_processor = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hamming_editops (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_pad,&__pyx_n_s_processor,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_True)));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 717, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 717, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("hamming_editops", 1, 2, 2, 1); __PYX_ERR(0, 717, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 717, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "hamming_editops") < 0)) __PYX_ERR(0, 717, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_pad = values[2];
    __pyx_v_processor = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hamming_editops", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 717, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.hamming_editops", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_52hamming_editops(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_pad, __pyx_v_processor);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_52hamming_editops(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_pad, PyObject *__pyx_v_processor) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_ops = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  bool __pyx_t_2;
  rapidfuzz::Editops __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__30)
  __Pyx_RefNannySetupContext("hamming_editops", 1);
  __Pyx_TraceCall("hamming_editops", __pyx_f[0], 717, 0, __PYX_ERR(0, 717, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":719
 * def hamming_editops(s1, s2, *, pad=True, processor=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)             # <<<<<<<<<<<<<<
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(719,0,__PYX_ERR(0, 719, __pyx_L1_error))
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops)))) __PYX_ERR(0, 719, __pyx_L1_error)
  __pyx_v_ops = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":721
 *     cdef Editops ops = Editops.__new__(Editops)
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     ops.editops = hamming_editops_func(s1_proc.string, s2_proc.string, pad)
 *     return ops
 */
  __Pyx_TraceLine(721,0,__PYX_ERR(0, 721, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 721, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":722
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     ops.editops = hamming_editops_func(s1_proc.string, s2_proc.string, pad)             # <<<<<<<<<<<<<<
 *     return ops
 * 
 */
  __Pyx_TraceLine(722,0,__PYX_ERR(0, 722, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_pad); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 722, __pyx_L1_error)
  try {
    __pyx_t_3 = hamming_editops_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 722, __pyx_L1_error)
  }
  __pyx_v_ops->editops = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "rapidfuzz/distance/metrics_cpp.pyx":723
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     ops.editops = hamming_editops_func(s1_proc.string, s2_proc.string, pad)
 *     return ops             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(723,0,__PYX_ERR(0, 723, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_ops);
  __pyx_r = ((PyObject *)__pyx_v_ops);
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":717
 * 
 * 
 * def hamming_editops(s1, s2, *, pad=True, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.hamming_editops", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ops);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":726
 * 
 * 
 * def hamming_opcodes(s1, s2, *, pad=True, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_55hamming_opcodes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_55hamming_opcodes = {"hamming_opcodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_55hamming_opcodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_55hamming_opcodes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_pad = 0;
  PyObject *__pyx_v_processor = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hamming_opcodes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_pad,&__pyx_n_s_processor,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_True)));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("hamming_opcodes", 1, 2, 2, 1); __PYX_ERR(0, 726, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "hamming_opcodes") < 0)) __PYX_ERR(0, 726, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_pad = values[2];
    __pyx_v_processor = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hamming_opcodes", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 726, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.hamming_opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_54hamming_opcodes(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_pad, __pyx_v_processor);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_54hamming_opcodes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_pad, PyObject *__pyx_v_processor) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *__pyx_v_ops = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  bool __pyx_t_2;
  rapidfuzz::Editops __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__31)
  __Pyx_RefNannySetupContext("hamming_opcodes", 1);
  __Pyx_TraceCall("hamming_opcodes", __pyx_f[0], 726, 0, __PYX_ERR(0, 726, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":728
 * def hamming_opcodes(s1, s2, *, pad=True, processor=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)             # <<<<<<<<<<<<<<
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 */
  __Pyx_TraceLine(728,0,__PYX_ERR(0, 728, __pyx_L1_error))
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops)))) __PYX_ERR(0, 728, __pyx_L1_error)
  __pyx_v_ops = ((struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":730
 *     cdef Editops ops = Editops.__new__(Editops)
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     ops.editops = hamming_editops_func(s1_proc.string, s2_proc.string, pad)
 *     return ops.as_opcodes()
 */
  __Pyx_TraceLine(730,0,__PYX_ERR(0, 730, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 730, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":731
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     ops.editops = hamming_editops_func(s1_proc.string, s2_proc.string, pad)             # <<<<<<<<<<<<<<
 *     return ops.as_opcodes()
 * 
 */
  __Pyx_TraceLine(731,0,__PYX_ERR(0, 731, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_pad); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 731, __pyx_L1_error)
  try {
    __pyx_t_3 = hamming_editops_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 731, __pyx_L1_error)
  }
  __pyx_v_ops->editops = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "rapidfuzz/distance/metrics_cpp.pyx":732
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     ops.editops = hamming_editops_func(s1_proc.string, s2_proc.string, pad)
 *     return ops.as_opcodes()             # <<<<<<<<<<<<<<
 * 
 * cdef bool HammingKwargsInit(RF_Kwargs* self, dict kwargs) except False:
 */
  __Pyx_TraceLine(732,0,__PYX_ERR(0, 732, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ops), __pyx_n_s_as_opcodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":726
 * 
 * 
 * def hamming_opcodes(s1, s2, *, pad=True, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.hamming_opcodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ops);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":734
 *     return ops.as_opcodes()
 * 
 * cdef bool HammingKwargsInit(RF_Kwargs* self, dict kwargs) except False:             # <<<<<<<<<<<<<<
 *     cdef bool* pad = <bool*>malloc(sizeof(bool))
 * 
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_HammingKwargsInit(RF_Kwargs *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  bool *__pyx_v_pad;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  bool __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("HammingKwargsInit", 1);
  __Pyx_TraceCall("HammingKwargsInit", __pyx_f[0], 734, 0, __PYX_ERR(0, 734, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":735
 * 
 * cdef bool HammingKwargsInit(RF_Kwargs* self, dict kwargs) except False:
 *     cdef bool* pad = <bool*>malloc(sizeof(bool))             # <<<<<<<<<<<<<<
 * 
 *     if not pad:
 */
  __Pyx_TraceLine(735,0,__PYX_ERR(0, 735, __pyx_L1_error))
  __pyx_v_pad = ((bool *)malloc((sizeof(bool))));

  /* "rapidfuzz/distance/metrics_cpp.pyx":737
 *     cdef bool* pad = <bool*>malloc(sizeof(bool))
 * 
 *     if not pad:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  __Pyx_TraceLine(737,0,__PYX_ERR(0, 737, __pyx_L1_error))
  __pyx_t_1 = (!(__pyx_v_pad != 0));
  if (unlikely(__pyx_t_1)) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":738
 * 
 *     if not pad:
 *         raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *     pad[0] = <bool>kwargs.get("pad", True)
 */
    __Pyx_TraceLine(738,0,__PYX_ERR(0, 738, __pyx_L1_error))
    PyErr_NoMemory(); __PYX_ERR(0, 738, __pyx_L1_error)

    /* "rapidfuzz/distance/metrics_cpp.pyx":737
 *     cdef bool* pad = <bool*>malloc(sizeof(bool))
 * 
 *     if not pad:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":740
 *         raise MemoryError
 * 
 *     pad[0] = <bool>kwargs.get("pad", True)             # <<<<<<<<<<<<<<
 *     self.context = pad
 *     self.dtor = KwargsDeinit
 */
  __Pyx_TraceLine(740,0,__PYX_ERR(0, 740, __pyx_L1_error))
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 740, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_pad, Py_True); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_pad[0]) = ((bool)__pyx_t_3);

  /* "rapidfuzz/distance/metrics_cpp.pyx":741
 * 
 *     pad[0] = <bool>kwargs.get("pad", True)
 *     self.context = pad             # <<<<<<<<<<<<<<
 *     self.dtor = KwargsDeinit
 *     return True
 */
  __Pyx_TraceLine(741,0,__PYX_ERR(0, 741, __pyx_L1_error))
  __pyx_v_self->context = __pyx_v_pad;

  /* "rapidfuzz/distance/metrics_cpp.pyx":742
 *     pad[0] = <bool>kwargs.get("pad", True)
 *     self.context = pad
 *     self.dtor = KwargsDeinit             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(742,0,__PYX_ERR(0, 742, __pyx_L1_error))
  __pyx_v_self->dtor = __pyx_f_9rapidfuzz_8distance_11metrics_cpp_KwargsDeinit;

  /* "rapidfuzz/distance/metrics_cpp.pyx":743
 *     self.context = pad
 *     self.dtor = KwargsDeinit
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsHammingDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(743,0,__PYX_ERR(0, 743, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":734
 *     return ops.as_opcodes()
 * 
 * cdef bool HammingKwargsInit(RF_Kwargs* self, dict kwargs) except False:             # <<<<<<<<<<<<<<
 *     cdef bool* pad = <bool*>malloc(sizeof(bool))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.HammingKwargsInit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":745
 *     return True
 * 
 * cdef bool GetScorerFlagsHammingDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsHammingDistance(CYTHON_UNUSED RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsHammingDistance", __pyx_f[0], 745, 1, __PYX_ERR(0, 745, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":746
 * 
 * cdef bool GetScorerFlagsHammingDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 */
  __Pyx_TraceLine(746,1,__PYX_ERR(0, 746, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = (RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC);

  /* "rapidfuzz/distance/metrics_cpp.pyx":747
 * cdef bool GetScorerFlagsHammingDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 *     return True
 */
  __Pyx_TraceLine(747,1,__PYX_ERR(0, 747, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.sizet = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":748
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(748,1,__PYX_ERR(0, 748, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.sizet = SIZE_MAX;

  /* "rapidfuzz/distance/metrics_cpp.pyx":749
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsHammingNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(749,1,__PYX_ERR(0, 749, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":745
 *     return True
 * 
 * cdef bool GetScorerFlagsHammingDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsHammingDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":751
 *     return True
 * 
 * cdef bool GetScorerFlagsHammingNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsHammingNormalizedDistance(CYTHON_UNUSED RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsHammingNormalizedDistance", __pyx_f[0], 751, 1, __PYX_ERR(0, 751, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":752
 * 
 * cdef bool GetScorerFlagsHammingNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1.0
 */
  __Pyx_TraceLine(752,1,__PYX_ERR(0, 752, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":753
 * cdef bool GetScorerFlagsHammingNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 1.0
 *     return True
 */
  __Pyx_TraceLine(753,1,__PYX_ERR(0, 753, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":754
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1.0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(754,1,__PYX_ERR(0, 754, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":755
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1.0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsHammingSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(755,1,__PYX_ERR(0, 755, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":751
 *     return True
 * 
 * cdef bool GetScorerFlagsHammingNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsHammingNormalizedDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":757
 *     return True
 * 
 * cdef bool GetScorerFlagsHammingSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsHammingSimilarity(CYTHON_UNUSED RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsHammingSimilarity", __pyx_f[0], 757, 1, __PYX_ERR(0, 757, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":758
 * 
 * cdef bool GetScorerFlagsHammingSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0
 */
  __Pyx_TraceLine(758,1,__PYX_ERR(0, 758, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = (RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC);

  /* "rapidfuzz/distance/metrics_cpp.pyx":759
 * cdef bool GetScorerFlagsHammingSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.sizet = 0
 *     return True
 */
  __Pyx_TraceLine(759,1,__PYX_ERR(0, 759, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.sizet = SIZE_MAX;

  /* "rapidfuzz/distance/metrics_cpp.pyx":760
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(760,1,__PYX_ERR(0, 760, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.sizet = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":761
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsHammingNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(761,1,__PYX_ERR(0, 761, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":757
 *     return True
 * 
 * cdef bool GetScorerFlagsHammingSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsHammingSimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":763
 *     return True
 * 
 * cdef bool GetScorerFlagsHammingNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsHammingNormalizedSimilarity(CYTHON_UNUSED RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsHammingNormalizedSimilarity", __pyx_f[0], 763, 1, __PYX_ERR(0, 763, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":764
 * 
 * cdef bool GetScorerFlagsHammingNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0
 */
  __Pyx_TraceLine(764,1,__PYX_ERR(0, 764, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":765
 * cdef bool GetScorerFlagsHammingNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 0
 *     return True
 */
  __Pyx_TraceLine(765,1,__PYX_ERR(0, 765, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":766
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(766,1,__PYX_ERR(0, 766, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":767
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer HammingDistanceContext = CreateScorerContext(HammingKwargsInit, GetScorerFlagsHammingDistance, HammingDistanceInit, UncachedHammingDistanceFuncInit())
 */
  __Pyx_TraceLine(767,1,__PYX_ERR(0, 767, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":763
 *     return True
 * 
 * cdef bool GetScorerFlagsHammingNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsHammingNormalizedSimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":784
 * SetFuncAttrs(hamming_opcodes, metrics_py.hamming_opcodes)
 * 
 * def osa_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_57osa_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_57osa_distance = {"osa_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_57osa_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_57osa_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("osa_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 784, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 784, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("osa_distance", 1, 2, 2, 1); __PYX_ERR(0, 784, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 784, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "osa_distance") < 0)) __PYX_ERR(0, 784, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("osa_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 784, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.osa_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_56osa_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_56osa_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  size_t __pyx_v_c_score_cutoff;
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__32)
  __Pyx_RefNannySetupContext("osa_distance", 1);
  __Pyx_TraceCall("osa_distance", __pyx_f[0], 784, 0, __PYX_ERR(0, 784, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":785
 * 
 * def osa_distance(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 * 
 */
  __Pyx_TraceLine(785,0,__PYX_ERR(0, 785, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_cutoff, SIZE_MAX, 0); if (unlikely(__pyx_t_1 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 785, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":788
 *     cdef RF_StringWrapper s1_proc, s2_proc
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return osa_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(788,0,__PYX_ERR(0, 788, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 788, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":789
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return osa_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * def osa_similarity(s1, s2, *, processor=None, score_cutoff=None):
 */
  __Pyx_TraceLine(789,0,__PYX_ERR(0, 789, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = osa_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 789, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":784
 * SetFuncAttrs(hamming_opcodes, metrics_py.hamming_opcodes)
 * 
 * def osa_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.osa_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":791
 *     return osa_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def osa_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_59osa_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_59osa_similarity = {"osa_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_59osa_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_59osa_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("osa_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 791, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 791, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("osa_similarity", 1, 2, 2, 1); __PYX_ERR(0, 791, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 791, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "osa_similarity") < 0)) __PYX_ERR(0, 791, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("osa_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 791, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.osa_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_58osa_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_58osa_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  size_t __pyx_v_c_score_cutoff;
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__33)
  __Pyx_RefNannySetupContext("osa_similarity", 1);
  __Pyx_TraceCall("osa_similarity", __pyx_f[0], 791, 0, __PYX_ERR(0, 791, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":792
 * 
 * def osa_similarity(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 * 
 */
  __Pyx_TraceLine(792,0,__PYX_ERR(0, 792, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_cutoff, 0, SIZE_MAX); if (unlikely(__pyx_t_1 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 792, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":795
 *     cdef RF_StringWrapper s1_proc, s2_proc
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return osa_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(795,0,__PYX_ERR(0, 795, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 795, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":796
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return osa_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * def osa_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):
 */
  __Pyx_TraceLine(796,0,__PYX_ERR(0, 796, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = osa_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 796, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":791
 *     return osa_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def osa_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.osa_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":798
 *     return osa_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def osa_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_61osa_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_61osa_normalized_distance = {"osa_normalized_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_61osa_normalized_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_61osa_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("osa_normalized_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 798, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 798, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("osa_normalized_distance", 1, 2, 2, 1); __PYX_ERR(0, 798, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 798, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "osa_normalized_distance") < 0)) __PYX_ERR(0, 798, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("osa_normalized_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 798, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.osa_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_60osa_normalized_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_60osa_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__34)
  __Pyx_RefNannySetupContext("osa_normalized_distance", 1);
  __Pyx_TraceCall("osa_normalized_distance", __pyx_f[0], 798, 0, __PYX_ERR(0, 798, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":800
 * def osa_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 1.0
 */
  __Pyx_TraceLine(800,0,__PYX_ERR(0, 800, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":801
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  __Pyx_TraceLine(801,0,__PYX_ERR(0, 801, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":802
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 1.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 */
    __Pyx_TraceLine(802,0,__PYX_ERR(0, 802, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_1_0);
    __pyx_r = __pyx_float_1_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":801
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":804
 *         return 1.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return osa_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 */
  __Pyx_TraceLine(804,0,__PYX_ERR(0, 804, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 1.0, 0.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 804, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":805
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return osa_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(805,0,__PYX_ERR(0, 805, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 805, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":806
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return osa_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(806,0,__PYX_ERR(0, 806, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = osa_normalized_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 806, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":798
 *     return osa_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def osa_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.osa_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":809
 * 
 * 
 * def osa_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_63osa_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_63osa_normalized_similarity = {"osa_normalized_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_63osa_normalized_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_63osa_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("osa_normalized_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 809, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 809, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("osa_normalized_similarity", 1, 2, 2, 1); __PYX_ERR(0, 809, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 809, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "osa_normalized_similarity") < 0)) __PYX_ERR(0, 809, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("osa_normalized_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 809, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.osa_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_62osa_normalized_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_62osa_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__35)
  __Pyx_RefNannySetupContext("osa_normalized_similarity", 1);
  __Pyx_TraceCall("osa_normalized_similarity", __pyx_f[0], 809, 0, __PYX_ERR(0, 809, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":811
 * def osa_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 0.0
 */
  __Pyx_TraceLine(811,0,__PYX_ERR(0, 811, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":812
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  __Pyx_TraceLine(812,0,__PYX_ERR(0, 812, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":813
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 */
    __Pyx_TraceLine(813,0,__PYX_ERR(0, 813, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":812
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":815
 *         return 0.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return osa_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 */
  __Pyx_TraceLine(815,0,__PYX_ERR(0, 815, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 0.0, 1.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 815, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":816
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return osa_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(816,0,__PYX_ERR(0, 816, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 816, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":817
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return osa_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(817,0,__PYX_ERR(0, 817, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = osa_normalized_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 817, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":809
 * 
 * 
 * def osa_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.osa_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":820
 * 
 * 
 * cdef bool GetScorerFlagsOSADistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if OSAMultiStringSupport(self):
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsOSADistance(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsOSADistance", __pyx_f[0], 820, 1, __PYX_ERR(0, 820, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":821
 * 
 * cdef bool GetScorerFlagsOSADistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     if OSAMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
  __Pyx_TraceLine(821,1,__PYX_ERR(0, 821, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = (RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC);

  /* "rapidfuzz/distance/metrics_cpp.pyx":822
 * cdef bool GetScorerFlagsOSADistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if OSAMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(822,1,__PYX_ERR(0, 822, __pyx_L1_error))
  __pyx_t_1 = (OSAMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":823
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if OSAMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.sizet = 0
 */
    __Pyx_TraceLine(823,1,__PYX_ERR(0, 823, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":822
 * cdef bool GetScorerFlagsOSADistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if OSAMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":825
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.sizet = 0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 *     return True
 */
  __Pyx_TraceLine(825,1,__PYX_ERR(0, 825, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.sizet = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":826
 * 
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(826,1,__PYX_ERR(0, 826, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.sizet = SIZE_MAX;

  /* "rapidfuzz/distance/metrics_cpp.pyx":827
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsOSANormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(827,1,__PYX_ERR(0, 827, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":820
 * 
 * 
 * cdef bool GetScorerFlagsOSADistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if OSAMultiStringSupport(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsOSADistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":829
 *     return True
 * 
 * cdef bool GetScorerFlagsOSANormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if OSAMultiStringSupport(self):
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsOSANormalizedDistance(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsOSANormalizedDistance", __pyx_f[0], 829, 1, __PYX_ERR(0, 829, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":830
 * 
 * cdef bool GetScorerFlagsOSANormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     if OSAMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
  __Pyx_TraceLine(830,1,__PYX_ERR(0, 830, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":831
 * cdef bool GetScorerFlagsOSANormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if OSAMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(831,1,__PYX_ERR(0, 831, __pyx_L1_error))
  __pyx_t_1 = (OSAMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":832
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if OSAMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.f64 = 0.0
 */
    __Pyx_TraceLine(832,1,__PYX_ERR(0, 832, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":831
 * cdef bool GetScorerFlagsOSANormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if OSAMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":834
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.f64 = 0.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 1.0
 *     return True
 */
  __Pyx_TraceLine(834,1,__PYX_ERR(0, 834, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":835
 * 
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1.0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(835,1,__PYX_ERR(0, 835, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":836
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1.0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsOSASimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(836,1,__PYX_ERR(0, 836, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":829
 *     return True
 * 
 * cdef bool GetScorerFlagsOSANormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if OSAMultiStringSupport(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsOSANormalizedDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":838
 *     return True
 * 
 * cdef bool GetScorerFlagsOSASimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if OSAMultiStringSupport(self):
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsOSASimilarity(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsOSASimilarity", __pyx_f[0], 838, 1, __PYX_ERR(0, 838, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":839
 * 
 * cdef bool GetScorerFlagsOSASimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     if OSAMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
  __Pyx_TraceLine(839,1,__PYX_ERR(0, 839, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = (RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC);

  /* "rapidfuzz/distance/metrics_cpp.pyx":840
 * cdef bool GetScorerFlagsOSASimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if OSAMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(840,1,__PYX_ERR(0, 840, __pyx_L1_error))
  __pyx_t_1 = (OSAMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":841
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if OSAMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 */
    __Pyx_TraceLine(841,1,__PYX_ERR(0, 841, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":840
 * cdef bool GetScorerFlagsOSASimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if OSAMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":843
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.sizet = SIZE_MAX             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.sizet = 0
 *     return True
 */
  __Pyx_TraceLine(843,1,__PYX_ERR(0, 843, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.sizet = SIZE_MAX;

  /* "rapidfuzz/distance/metrics_cpp.pyx":844
 * 
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(844,1,__PYX_ERR(0, 844, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.sizet = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":845
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsOSANormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(845,1,__PYX_ERR(0, 845, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":838
 *     return True
 * 
 * cdef bool GetScorerFlagsOSASimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if OSAMultiStringSupport(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsOSASimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":847
 *     return True
 * 
 * cdef bool GetScorerFlagsOSANormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if OSAMultiStringSupport(self):
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsOSANormalizedSimilarity(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsOSANormalizedSimilarity", __pyx_f[0], 847, 1, __PYX_ERR(0, 847, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":848
 * 
 * cdef bool GetScorerFlagsOSANormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     if OSAMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
  __Pyx_TraceLine(848,1,__PYX_ERR(0, 848, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":849
 * cdef bool GetScorerFlagsOSANormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if OSAMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(849,1,__PYX_ERR(0, 849, __pyx_L1_error))
  __pyx_t_1 = (OSAMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":850
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if OSAMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.f64 = 1.0
 */
    __Pyx_TraceLine(850,1,__PYX_ERR(0, 850, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":849
 * cdef bool GetScorerFlagsOSANormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if OSAMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":852
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.f64 = 1.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 0
 *     return True
 */
  __Pyx_TraceLine(852,1,__PYX_ERR(0, 852, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":853
 * 
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(853,1,__PYX_ERR(0, 853, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":854
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer OSADistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsOSADistance, OSADistanceInit, UncachedOSADistanceFuncInit())
 */
  __Pyx_TraceLine(854,1,__PYX_ERR(0, 854, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":847
 *     return True
 * 
 * cdef bool GetScorerFlagsOSANormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if OSAMultiStringSupport(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsOSANormalizedSimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":872
 * ###############################################
 * 
 * def jaro_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_65jaro_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_65jaro_distance = {"jaro_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_65jaro_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_65jaro_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("jaro_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 872, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 872, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("jaro_distance", 1, 2, 2, 1); __PYX_ERR(0, 872, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 872, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "jaro_distance") < 0)) __PYX_ERR(0, 872, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("jaro_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 872, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.jaro_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_64jaro_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_64jaro_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__36)
  __Pyx_RefNannySetupContext("jaro_distance", 1);
  __Pyx_TraceCall("jaro_distance", __pyx_f[0], 872, 0, __PYX_ERR(0, 872, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":874
 * def jaro_distance(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 1.0
 */
  __Pyx_TraceLine(874,0,__PYX_ERR(0, 874, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":875
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  __Pyx_TraceLine(875,0,__PYX_ERR(0, 875, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":876
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 1.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 */
    __Pyx_TraceLine(876,0,__PYX_ERR(0, 876, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_1_0);
    __pyx_r = __pyx_float_1_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":875
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":878
 *         return 1.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return jaro_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 */
  __Pyx_TraceLine(878,0,__PYX_ERR(0, 878, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 1.0, 0.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 878, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":879
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return jaro_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(879,0,__PYX_ERR(0, 879, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 879, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":880
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return jaro_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * def jaro_similarity(s1, s2, *, processor=None, score_cutoff=None):
 */
  __Pyx_TraceLine(880,0,__PYX_ERR(0, 880, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = jaro_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 880, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":872
 * ###############################################
 * 
 * def jaro_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.jaro_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":882
 *     return jaro_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def jaro_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_67jaro_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_67jaro_similarity = {"jaro_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_67jaro_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_67jaro_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("jaro_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("jaro_similarity", 1, 2, 2, 1); __PYX_ERR(0, 882, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "jaro_similarity") < 0)) __PYX_ERR(0, 882, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("jaro_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 882, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.jaro_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_66jaro_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_66jaro_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__37)
  __Pyx_RefNannySetupContext("jaro_similarity", 1);
  __Pyx_TraceCall("jaro_similarity", __pyx_f[0], 882, 0, __PYX_ERR(0, 882, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":884
 * def jaro_similarity(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 0.0
 */
  __Pyx_TraceLine(884,0,__PYX_ERR(0, 884, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":885
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  __Pyx_TraceLine(885,0,__PYX_ERR(0, 885, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":886
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 */
    __Pyx_TraceLine(886,0,__PYX_ERR(0, 886, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":885
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":888
 *         return 0.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return jaro_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 */
  __Pyx_TraceLine(888,0,__PYX_ERR(0, 888, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 0.0, 1.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 888, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":889
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return jaro_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(889,0,__PYX_ERR(0, 889, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 889, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":890
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return jaro_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * def jaro_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):
 */
  __Pyx_TraceLine(890,0,__PYX_ERR(0, 890, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = jaro_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 890, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":882
 *     return jaro_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def jaro_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.jaro_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":892
 *     return jaro_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def jaro_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_69jaro_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_69jaro_normalized_distance = {"jaro_normalized_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_69jaro_normalized_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_69jaro_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("jaro_normalized_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 892, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 892, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("jaro_normalized_distance", 1, 2, 2, 1); __PYX_ERR(0, 892, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 892, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "jaro_normalized_distance") < 0)) __PYX_ERR(0, 892, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("jaro_normalized_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 892, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.jaro_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_68jaro_normalized_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_68jaro_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__38)
  __Pyx_RefNannySetupContext("jaro_normalized_distance", 1);
  __Pyx_TraceCall("jaro_normalized_distance", __pyx_f[0], 892, 0, __PYX_ERR(0, 892, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":894
 * def jaro_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 1.0
 */
  __Pyx_TraceLine(894,0,__PYX_ERR(0, 894, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":895
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  __Pyx_TraceLine(895,0,__PYX_ERR(0, 895, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":896
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 1.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 */
    __Pyx_TraceLine(896,0,__PYX_ERR(0, 896, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_1_0);
    __pyx_r = __pyx_float_1_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":895
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":898
 *         return 1.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return jaro_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 */
  __Pyx_TraceLine(898,0,__PYX_ERR(0, 898, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 1.0, 0.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 898, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":899
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return jaro_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(899,0,__PYX_ERR(0, 899, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 899, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":900
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return jaro_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(900,0,__PYX_ERR(0, 900, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = jaro_normalized_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 900, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":892
 *     return jaro_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def jaro_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.jaro_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":903
 * 
 * 
 * def jaro_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_71jaro_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_71jaro_normalized_similarity = {"jaro_normalized_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_71jaro_normalized_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_71jaro_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("jaro_normalized_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 903, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 903, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("jaro_normalized_similarity", 1, 2, 2, 1); __PYX_ERR(0, 903, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 903, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "jaro_normalized_similarity") < 0)) __PYX_ERR(0, 903, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("jaro_normalized_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 903, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.jaro_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_70jaro_normalized_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_70jaro_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__39)
  __Pyx_RefNannySetupContext("jaro_normalized_similarity", 1);
  __Pyx_TraceCall("jaro_normalized_similarity", __pyx_f[0], 903, 0, __PYX_ERR(0, 903, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":905
 * def jaro_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 0.0
 */
  __Pyx_TraceLine(905,0,__PYX_ERR(0, 905, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":906
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  __Pyx_TraceLine(906,0,__PYX_ERR(0, 906, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":907
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 */
    __Pyx_TraceLine(907,0,__PYX_ERR(0, 907, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":906
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":909
 *         return 0.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return jaro_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 */
  __Pyx_TraceLine(909,0,__PYX_ERR(0, 909, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 0.0, 1.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 909, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":910
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return jaro_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(910,0,__PYX_ERR(0, 910, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 910, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":911
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return jaro_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsJaroDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(911,0,__PYX_ERR(0, 911, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = jaro_normalized_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 911, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":903
 * 
 * 
 * def jaro_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.jaro_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":913
 *     return jaro_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * cdef bool GetScorerFlagsJaroDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroMultiStringSupport(self):
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsJaroDistance(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsJaroDistance", __pyx_f[0], 913, 1, __PYX_ERR(0, 913, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":914
 * 
 * cdef bool GetScorerFlagsJaroDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     if JaroMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
  __Pyx_TraceLine(914,1,__PYX_ERR(0, 914, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":915
 * cdef bool GetScorerFlagsJaroDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(915,1,__PYX_ERR(0, 915, __pyx_L1_error))
  __pyx_t_1 = (JaroMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":916
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.f64 = 0.0
 */
    __Pyx_TraceLine(916,1,__PYX_ERR(0, 916, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":915
 * cdef bool GetScorerFlagsJaroDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":918
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.f64 = 0.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 1.0
 *     return True
 */
  __Pyx_TraceLine(918,1,__PYX_ERR(0, 918, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":919
 * 
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1.0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(919,1,__PYX_ERR(0, 919, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":920
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1.0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsJaroSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(920,1,__PYX_ERR(0, 920, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":913
 *     return jaro_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * cdef bool GetScorerFlagsJaroDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroMultiStringSupport(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsJaroDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":922
 *     return True
 * 
 * cdef bool GetScorerFlagsJaroSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroMultiStringSupport(self):
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsJaroSimilarity(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsJaroSimilarity", __pyx_f[0], 922, 1, __PYX_ERR(0, 922, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":923
 * 
 * cdef bool GetScorerFlagsJaroSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     if JaroMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
  __Pyx_TraceLine(923,1,__PYX_ERR(0, 923, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":924
 * cdef bool GetScorerFlagsJaroSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(924,1,__PYX_ERR(0, 924, __pyx_L1_error))
  __pyx_t_1 = (JaroMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":925
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.f64 = 1.0
 */
    __Pyx_TraceLine(925,1,__PYX_ERR(0, 925, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":924
 * cdef bool GetScorerFlagsJaroSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":927
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.f64 = 1.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 0
 *     return True
 */
  __Pyx_TraceLine(927,1,__PYX_ERR(0, 927, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":928
 * 
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(928,1,__PYX_ERR(0, 928, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":929
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer JaroDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsJaroDistance, JaroDistanceInit, UncachedJaroDistanceFuncInit())
 */
  __Pyx_TraceLine(929,1,__PYX_ERR(0, 929, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":922
 *     return True
 * 
 * cdef bool GetScorerFlagsJaroSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroMultiStringSupport(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsJaroSimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":944
 * ###############################################
 * 
 * def jaro_winkler_distance(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_73jaro_winkler_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_73jaro_winkler_distance = {"jaro_winkler_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_73jaro_winkler_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_73jaro_winkler_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  double __pyx_v_prefix_weight;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("jaro_winkler_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_prefix_weight,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 944, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 944, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("jaro_winkler_distance", 1, 2, 2, 1); __PYX_ERR(0, 944, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 3)) {
        Py_ssize_t index;
        for (index = 2; index < 5 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 944, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "jaro_winkler_distance") < 0)) __PYX_ERR(0, 944, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    if (values[2]) {
      __pyx_v_prefix_weight = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_prefix_weight == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 944, __pyx_L3_error)
    } else {
      __pyx_v_prefix_weight = ((double)((double)0.1));
    }
    __pyx_v_processor = values[3];
    __pyx_v_score_cutoff = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("jaro_winkler_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 944, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.jaro_winkler_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_72jaro_winkler_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_prefix_weight, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_72jaro_winkler_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, double __pyx_v_prefix_weight, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_v_msg = NULL;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__40)
  __Pyx_RefNannySetupContext("jaro_winkler_distance", 1);
  __Pyx_TraceCall("jaro_winkler_distance", __pyx_f[0], 944, 0, __PYX_ERR(0, 944, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":946
 * def jaro_winkler_distance(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 1.0
 */
  __Pyx_TraceLine(946,0,__PYX_ERR(0, 946, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":947
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  __Pyx_TraceLine(947,0,__PYX_ERR(0, 947, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":948
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 1.0             # <<<<<<<<<<<<<<
 * 
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:
 */
    __Pyx_TraceLine(948,0,__PYX_ERR(0, 948, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_1_0);
    __pyx_r = __pyx_float_1_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":947
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":950
 *         return 1.0
 * 
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:             # <<<<<<<<<<<<<<
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"
 *         raise ValueError(msg)
 */
  __Pyx_TraceLine(950,0,__PYX_ERR(0, 950, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v_prefix_weight > 1.0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_prefix_weight < 0.0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":951
 * 
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"             # <<<<<<<<<<<<<<
 *         raise ValueError(msg)
 * 
 */
    __Pyx_TraceLine(951,0,__PYX_ERR(0, 951, __pyx_L1_error))
    __Pyx_INCREF(__pyx_kp_u_prefix_weight_has_to_be_in_the_r);
    __pyx_v_msg = __pyx_kp_u_prefix_weight_has_to_be_in_the_r;

    /* "rapidfuzz/distance/metrics_cpp.pyx":952
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"
 *         raise ValueError(msg)             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 */
    __Pyx_TraceLine(952,0,__PYX_ERR(0, 952, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_v_msg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 952, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 952, __pyx_L1_error)

    /* "rapidfuzz/distance/metrics_cpp.pyx":950
 *         return 1.0
 * 
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:             # <<<<<<<<<<<<<<
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"
 *         raise ValueError(msg)
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":954
 *         raise ValueError(msg)
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return jaro_winkler_distance_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 */
  __Pyx_TraceLine(954,0,__PYX_ERR(0, 954, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 1.0, 0.0); if (unlikely(__pyx_t_4 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 954, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_4;

  /* "rapidfuzz/distance/metrics_cpp.pyx":955
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return jaro_winkler_distance_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(955,0,__PYX_ERR(0, 955, __pyx_L1_error))
  __pyx_t_5 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_5 == ((bool)0))) __PYX_ERR(0, 955, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":956
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return jaro_winkler_distance_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * def jaro_winkler_similarity(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):
 */
  __Pyx_TraceLine(956,0,__PYX_ERR(0, 956, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_4 = jaro_winkler_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_prefix_weight, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 956, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":944
 * ###############################################
 * 
 * def jaro_winkler_distance(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.jaro_winkler_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":958
 *     return jaro_winkler_distance_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 * def jaro_winkler_similarity(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_75jaro_winkler_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_75jaro_winkler_similarity = {"jaro_winkler_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_75jaro_winkler_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_75jaro_winkler_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  double __pyx_v_prefix_weight;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("jaro_winkler_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_prefix_weight,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 958, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 958, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("jaro_winkler_similarity", 1, 2, 2, 1); __PYX_ERR(0, 958, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 3)) {
        Py_ssize_t index;
        for (index = 2; index < 5 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 958, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "jaro_winkler_similarity") < 0)) __PYX_ERR(0, 958, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    if (values[2]) {
      __pyx_v_prefix_weight = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_prefix_weight == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 958, __pyx_L3_error)
    } else {
      __pyx_v_prefix_weight = ((double)((double)0.1));
    }
    __pyx_v_processor = values[3];
    __pyx_v_score_cutoff = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("jaro_winkler_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 958, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.jaro_winkler_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_74jaro_winkler_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_prefix_weight, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_74jaro_winkler_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, double __pyx_v_prefix_weight, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_v_msg = NULL;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__41)
  __Pyx_RefNannySetupContext("jaro_winkler_similarity", 1);
  __Pyx_TraceCall("jaro_winkler_similarity", __pyx_f[0], 958, 0, __PYX_ERR(0, 958, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":960
 * def jaro_winkler_similarity(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 0.0
 */
  __Pyx_TraceLine(960,0,__PYX_ERR(0, 960, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":961
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  __Pyx_TraceLine(961,0,__PYX_ERR(0, 961, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":962
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:
 */
    __Pyx_TraceLine(962,0,__PYX_ERR(0, 962, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":961
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":964
 *         return 0.0
 * 
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:             # <<<<<<<<<<<<<<
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"
 *         raise ValueError(msg)
 */
  __Pyx_TraceLine(964,0,__PYX_ERR(0, 964, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v_prefix_weight > 1.0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_prefix_weight < 0.0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":965
 * 
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"             # <<<<<<<<<<<<<<
 *         raise ValueError(msg)
 * 
 */
    __Pyx_TraceLine(965,0,__PYX_ERR(0, 965, __pyx_L1_error))
    __Pyx_INCREF(__pyx_kp_u_prefix_weight_has_to_be_in_the_r);
    __pyx_v_msg = __pyx_kp_u_prefix_weight_has_to_be_in_the_r;

    /* "rapidfuzz/distance/metrics_cpp.pyx":966
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"
 *         raise ValueError(msg)             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 */
    __Pyx_TraceLine(966,0,__PYX_ERR(0, 966, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_v_msg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 966, __pyx_L1_error)

    /* "rapidfuzz/distance/metrics_cpp.pyx":964
 *         return 0.0
 * 
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:             # <<<<<<<<<<<<<<
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"
 *         raise ValueError(msg)
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":968
 *         raise ValueError(msg)
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return jaro_winkler_similarity_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 */
  __Pyx_TraceLine(968,0,__PYX_ERR(0, 968, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 0.0, 1.0); if (unlikely(__pyx_t_4 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_4;

  /* "rapidfuzz/distance/metrics_cpp.pyx":969
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return jaro_winkler_similarity_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(969,0,__PYX_ERR(0, 969, __pyx_L1_error))
  __pyx_t_5 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_5 == ((bool)0))) __PYX_ERR(0, 969, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":970
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return jaro_winkler_similarity_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * def jaro_winkler_normalized_distance(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):
 */
  __Pyx_TraceLine(970,0,__PYX_ERR(0, 970, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_4 = jaro_winkler_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_prefix_weight, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 970, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":958
 *     return jaro_winkler_distance_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 * def jaro_winkler_similarity(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.jaro_winkler_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":972
 *     return jaro_winkler_similarity_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 * def jaro_winkler_normalized_distance(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_77jaro_winkler_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_77jaro_winkler_normalized_distance = {"jaro_winkler_normalized_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_77jaro_winkler_normalized_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_77jaro_winkler_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  double __pyx_v_prefix_weight;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("jaro_winkler_normalized_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_prefix_weight,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 972, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 972, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("jaro_winkler_normalized_distance", 1, 2, 2, 1); __PYX_ERR(0, 972, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 3)) {
        Py_ssize_t index;
        for (index = 2; index < 5 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 972, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "jaro_winkler_normalized_distance") < 0)) __PYX_ERR(0, 972, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    if (values[2]) {
      __pyx_v_prefix_weight = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_prefix_weight == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 972, __pyx_L3_error)
    } else {
      __pyx_v_prefix_weight = ((double)((double)0.1));
    }
    __pyx_v_processor = values[3];
    __pyx_v_score_cutoff = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("jaro_winkler_normalized_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 972, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.jaro_winkler_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_76jaro_winkler_normalized_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_prefix_weight, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_76jaro_winkler_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, double __pyx_v_prefix_weight, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_v_msg = NULL;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__42)
  __Pyx_RefNannySetupContext("jaro_winkler_normalized_distance", 1);
  __Pyx_TraceCall("jaro_winkler_normalized_distance", __pyx_f[0], 972, 0, __PYX_ERR(0, 972, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":974
 * def jaro_winkler_normalized_distance(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 1.0
 */
  __Pyx_TraceLine(974,0,__PYX_ERR(0, 974, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":975
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  __Pyx_TraceLine(975,0,__PYX_ERR(0, 975, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":976
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 1.0             # <<<<<<<<<<<<<<
 * 
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:
 */
    __Pyx_TraceLine(976,0,__PYX_ERR(0, 976, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_1_0);
    __pyx_r = __pyx_float_1_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":975
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":978
 *         return 1.0
 * 
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:             # <<<<<<<<<<<<<<
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"
 *         raise ValueError(msg)
 */
  __Pyx_TraceLine(978,0,__PYX_ERR(0, 978, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v_prefix_weight > 1.0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_prefix_weight < 0.0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":979
 * 
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"             # <<<<<<<<<<<<<<
 *         raise ValueError(msg)
 * 
 */
    __Pyx_TraceLine(979,0,__PYX_ERR(0, 979, __pyx_L1_error))
    __Pyx_INCREF(__pyx_kp_u_prefix_weight_has_to_be_in_the_r);
    __pyx_v_msg = __pyx_kp_u_prefix_weight_has_to_be_in_the_r;

    /* "rapidfuzz/distance/metrics_cpp.pyx":980
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"
 *         raise ValueError(msg)             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 */
    __Pyx_TraceLine(980,0,__PYX_ERR(0, 980, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_v_msg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 980, __pyx_L1_error)

    /* "rapidfuzz/distance/metrics_cpp.pyx":978
 *         return 1.0
 * 
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:             # <<<<<<<<<<<<<<
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"
 *         raise ValueError(msg)
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":982
 *         raise ValueError(msg)
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return jaro_winkler_normalized_distance_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 */
  __Pyx_TraceLine(982,0,__PYX_ERR(0, 982, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 1.0, 0.0); if (unlikely(__pyx_t_4 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 982, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_4;

  /* "rapidfuzz/distance/metrics_cpp.pyx":983
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return jaro_winkler_normalized_distance_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(983,0,__PYX_ERR(0, 983, __pyx_L1_error))
  __pyx_t_5 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_5 == ((bool)0))) __PYX_ERR(0, 983, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":984
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return jaro_winkler_normalized_distance_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * def jaro_winkler_normalized_similarity(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):
 */
  __Pyx_TraceLine(984,0,__PYX_ERR(0, 984, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_4 = jaro_winkler_normalized_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_prefix_weight, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 984, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":972
 *     return jaro_winkler_similarity_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 * def jaro_winkler_normalized_distance(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.jaro_winkler_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":986
 *     return jaro_winkler_normalized_distance_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 * def jaro_winkler_normalized_similarity(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_79jaro_winkler_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_79jaro_winkler_normalized_similarity = {"jaro_winkler_normalized_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_79jaro_winkler_normalized_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_79jaro_winkler_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  double __pyx_v_prefix_weight;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("jaro_winkler_normalized_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_prefix_weight,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 986, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 986, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("jaro_winkler_normalized_similarity", 1, 2, 2, 1); __PYX_ERR(0, 986, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 3)) {
        Py_ssize_t index;
        for (index = 2; index < 5 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 986, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "jaro_winkler_normalized_similarity") < 0)) __PYX_ERR(0, 986, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    if (values[2]) {
      __pyx_v_prefix_weight = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_prefix_weight == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 986, __pyx_L3_error)
    } else {
      __pyx_v_prefix_weight = ((double)((double)0.1));
    }
    __pyx_v_processor = values[3];
    __pyx_v_score_cutoff = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("jaro_winkler_normalized_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 986, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.jaro_winkler_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_78jaro_winkler_normalized_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_prefix_weight, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_78jaro_winkler_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, double __pyx_v_prefix_weight, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_v_msg = NULL;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__43)
  __Pyx_RefNannySetupContext("jaro_winkler_normalized_similarity", 1);
  __Pyx_TraceCall("jaro_winkler_normalized_similarity", __pyx_f[0], 986, 0, __PYX_ERR(0, 986, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":988
 * def jaro_winkler_normalized_similarity(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 0.0
 */
  __Pyx_TraceLine(988,0,__PYX_ERR(0, 988, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":989
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  __Pyx_TraceLine(989,0,__PYX_ERR(0, 989, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":990
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:
 */
    __Pyx_TraceLine(990,0,__PYX_ERR(0, 990, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":989
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":992
 *         return 0.0
 * 
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:             # <<<<<<<<<<<<<<
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"
 *         raise ValueError(msg)
 */
  __Pyx_TraceLine(992,0,__PYX_ERR(0, 992, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v_prefix_weight > 1.0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_prefix_weight < 0.0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":993
 * 
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"             # <<<<<<<<<<<<<<
 *         raise ValueError(msg)
 * 
 */
    __Pyx_TraceLine(993,0,__PYX_ERR(0, 993, __pyx_L1_error))
    __Pyx_INCREF(__pyx_kp_u_prefix_weight_has_to_be_in_the_r);
    __pyx_v_msg = __pyx_kp_u_prefix_weight_has_to_be_in_the_r;

    /* "rapidfuzz/distance/metrics_cpp.pyx":994
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"
 *         raise ValueError(msg)             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 */
    __Pyx_TraceLine(994,0,__PYX_ERR(0, 994, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_v_msg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 994, __pyx_L1_error)

    /* "rapidfuzz/distance/metrics_cpp.pyx":992
 *         return 0.0
 * 
 *     if prefix_weight > 1.0 or prefix_weight < 0.0:             # <<<<<<<<<<<<<<
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"
 *         raise ValueError(msg)
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":996
 *         raise ValueError(msg)
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return jaro_winkler_normalized_similarity_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 */
  __Pyx_TraceLine(996,0,__PYX_ERR(0, 996, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 0.0, 1.0); if (unlikely(__pyx_t_4 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 996, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_4;

  /* "rapidfuzz/distance/metrics_cpp.pyx":997
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return jaro_winkler_normalized_similarity_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(997,0,__PYX_ERR(0, 997, __pyx_L1_error))
  __pyx_t_5 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_5 == ((bool)0))) __PYX_ERR(0, 997, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":998
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return jaro_winkler_normalized_similarity_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * cdef bool JaroWinklerKwargsInit(RF_Kwargs * self, dict kwargs) except False:
 */
  __Pyx_TraceLine(998,0,__PYX_ERR(0, 998, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_4 = jaro_winkler_normalized_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_prefix_weight, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 998, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":986
 *     return jaro_winkler_normalized_distance_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 * def jaro_winkler_normalized_similarity(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.jaro_winkler_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1000
 *     return jaro_winkler_normalized_similarity_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 * cdef bool JaroWinklerKwargsInit(RF_Kwargs * self, dict kwargs) except False:             # <<<<<<<<<<<<<<
 *     cdef double * prefix_weight = <double *> malloc(sizeof(double))
 * 
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_JaroWinklerKwargsInit(RF_Kwargs *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  double *__pyx_v_prefix_weight;
  PyObject *__pyx_v_msg = NULL;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("JaroWinklerKwargsInit", 1);
  __Pyx_TraceCall("JaroWinklerKwargsInit", __pyx_f[0], 1000, 0, __PYX_ERR(0, 1000, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1001
 * 
 * cdef bool JaroWinklerKwargsInit(RF_Kwargs * self, dict kwargs) except False:
 *     cdef double * prefix_weight = <double *> malloc(sizeof(double))             # <<<<<<<<<<<<<<
 * 
 *     if not prefix_weight:
 */
  __Pyx_TraceLine(1001,0,__PYX_ERR(0, 1001, __pyx_L1_error))
  __pyx_v_prefix_weight = ((double *)malloc((sizeof(double))));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1003
 *     cdef double * prefix_weight = <double *> malloc(sizeof(double))
 * 
 *     if not prefix_weight:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  __Pyx_TraceLine(1003,0,__PYX_ERR(0, 1003, __pyx_L1_error))
  __pyx_t_1 = (!(__pyx_v_prefix_weight != 0));
  if (unlikely(__pyx_t_1)) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":1004
 * 
 *     if not prefix_weight:
 *         raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *     prefix_weight[0] = kwargs.get("prefix_weight", 0.1)
 */
    __Pyx_TraceLine(1004,0,__PYX_ERR(0, 1004, __pyx_L1_error))
    PyErr_NoMemory(); __PYX_ERR(0, 1004, __pyx_L1_error)

    /* "rapidfuzz/distance/metrics_cpp.pyx":1003
 *     cdef double * prefix_weight = <double *> malloc(sizeof(double))
 * 
 *     if not prefix_weight:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":1006
 *         raise MemoryError
 * 
 *     prefix_weight[0] = kwargs.get("prefix_weight", 0.1)             # <<<<<<<<<<<<<<
 *     if prefix_weight[0] > 1.0 or prefix_weight[0] < 0.0:
 *         free(prefix_weight)
 */
  __Pyx_TraceLine(1006,0,__PYX_ERR(0, 1006, __pyx_L1_error))
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 1006, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_prefix_weight, __pyx_float_0_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1006, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_prefix_weight[0]) = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1007
 * 
 *     prefix_weight[0] = kwargs.get("prefix_weight", 0.1)
 *     if prefix_weight[0] > 1.0 or prefix_weight[0] < 0.0:             # <<<<<<<<<<<<<<
 *         free(prefix_weight)
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"
 */
  __Pyx_TraceLine(1007,0,__PYX_ERR(0, 1007, __pyx_L1_error))
  __pyx_t_4 = ((__pyx_v_prefix_weight[0]) > 1.0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = ((__pyx_v_prefix_weight[0]) < 0.0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L5_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":1008
 *     prefix_weight[0] = kwargs.get("prefix_weight", 0.1)
 *     if prefix_weight[0] > 1.0 or prefix_weight[0] < 0.0:
 *         free(prefix_weight)             # <<<<<<<<<<<<<<
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"
 *         raise ValueError(msg)
 */
    __Pyx_TraceLine(1008,0,__PYX_ERR(0, 1008, __pyx_L1_error))
    free(__pyx_v_prefix_weight);

    /* "rapidfuzz/distance/metrics_cpp.pyx":1009
 *     if prefix_weight[0] > 1.0 or prefix_weight[0] < 0.0:
 *         free(prefix_weight)
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"             # <<<<<<<<<<<<<<
 *         raise ValueError(msg)
 * 
 */
    __Pyx_TraceLine(1009,0,__PYX_ERR(0, 1009, __pyx_L1_error))
    __Pyx_INCREF(__pyx_kp_u_prefix_weight_has_to_be_in_the_r);
    __pyx_v_msg = __pyx_kp_u_prefix_weight_has_to_be_in_the_r;

    /* "rapidfuzz/distance/metrics_cpp.pyx":1010
 *         free(prefix_weight)
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"
 *         raise ValueError(msg)             # <<<<<<<<<<<<<<
 * 
 *     self.context = prefix_weight
 */
    __Pyx_TraceLine(1010,0,__PYX_ERR(0, 1010, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_v_msg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1010, __pyx_L1_error)

    /* "rapidfuzz/distance/metrics_cpp.pyx":1007
 * 
 *     prefix_weight[0] = kwargs.get("prefix_weight", 0.1)
 *     if prefix_weight[0] > 1.0 or prefix_weight[0] < 0.0:             # <<<<<<<<<<<<<<
 *         free(prefix_weight)
 *         msg = "prefix_weight has to be in the range 0.0 - 1.0"
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":1012
 *         raise ValueError(msg)
 * 
 *     self.context = prefix_weight             # <<<<<<<<<<<<<<
 *     self.dtor = KwargsDeinit
 *     return True
 */
  __Pyx_TraceLine(1012,0,__PYX_ERR(0, 1012, __pyx_L1_error))
  __pyx_v_self->context = __pyx_v_prefix_weight;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1013
 * 
 *     self.context = prefix_weight
 *     self.dtor = KwargsDeinit             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(1013,0,__PYX_ERR(0, 1013, __pyx_L1_error))
  __pyx_v_self->dtor = __pyx_f_9rapidfuzz_8distance_11metrics_cpp_KwargsDeinit;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1014
 *     self.context = prefix_weight
 *     self.dtor = KwargsDeinit
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsJaroWinklerDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(1014,0,__PYX_ERR(0, 1014, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1000
 *     return jaro_winkler_normalized_similarity_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 * cdef bool JaroWinklerKwargsInit(RF_Kwargs * self, dict kwargs) except False:             # <<<<<<<<<<<<<<
 *     cdef double * prefix_weight = <double *> malloc(sizeof(double))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.JaroWinklerKwargsInit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1016
 *     return True
 * 
 * cdef bool GetScorerFlagsJaroWinklerDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroWinklerMultiStringSupport(self):
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsJaroWinklerDistance(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsJaroWinklerDistance", __pyx_f[0], 1016, 1, __PYX_ERR(0, 1016, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1017
 * 
 * cdef bool GetScorerFlagsJaroWinklerDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     if JaroWinklerMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
  __Pyx_TraceLine(1017,1,__PYX_ERR(0, 1017, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":1018
 * cdef bool GetScorerFlagsJaroWinklerDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroWinklerMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(1018,1,__PYX_ERR(0, 1018, __pyx_L1_error))
  __pyx_t_1 = (JaroWinklerMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":1019
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroWinklerMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.f64 = 0.0
 */
    __Pyx_TraceLine(1019,1,__PYX_ERR(0, 1019, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":1018
 * cdef bool GetScorerFlagsJaroWinklerDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroWinklerMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":1021
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.f64 = 0.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 1.0
 *     return True
 */
  __Pyx_TraceLine(1021,1,__PYX_ERR(0, 1021, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1022
 * 
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1.0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(1022,1,__PYX_ERR(0, 1022, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1023
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1.0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsJaroWinklerSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(1023,1,__PYX_ERR(0, 1023, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1016
 *     return True
 * 
 * cdef bool GetScorerFlagsJaroWinklerDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroWinklerMultiStringSupport(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsJaroWinklerDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1025
 *     return True
 * 
 * cdef bool GetScorerFlagsJaroWinklerSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroWinklerMultiStringSupport(self):
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsJaroWinklerSimilarity(RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsJaroWinklerSimilarity", __pyx_f[0], 1025, 1, __PYX_ERR(0, 1025, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1026
 * 
 * cdef bool GetScorerFlagsJaroWinklerSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     if JaroWinklerMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 */
  __Pyx_TraceLine(1026,1,__PYX_ERR(0, 1026, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":1027
 * cdef bool GetScorerFlagsJaroWinklerSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroWinklerMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  __Pyx_TraceLine(1027,1,__PYX_ERR(0, 1027, __pyx_L1_error))
  __pyx_t_1 = (JaroWinklerMultiStringSupport(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":1028
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroWinklerMultiStringSupport(self):
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT             # <<<<<<<<<<<<<<
 * 
 *     scorer_flags.optimal_score.f64 = 1.0
 */
    __Pyx_TraceLine(1028,1,__PYX_ERR(0, 1028, __pyx_L1_error))
    __pyx_v_scorer_flags->flags = (__pyx_v_scorer_flags->flags | RF_SCORER_FLAG_MULTI_STRING_INIT);

    /* "rapidfuzz/distance/metrics_cpp.pyx":1027
 * cdef bool GetScorerFlagsJaroWinklerSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroWinklerMultiStringSupport(self):             # <<<<<<<<<<<<<<
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":1030
 *         scorer_flags.flags |= RF_SCORER_FLAG_MULTI_STRING_INIT
 * 
 *     scorer_flags.optimal_score.f64 = 1.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 0
 *     return True
 */
  __Pyx_TraceLine(1030,1,__PYX_ERR(0, 1030, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1031
 * 
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(1031,1,__PYX_ERR(0, 1031, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1032
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer JaroWinklerDistanceContext = CreateScorerContext(JaroWinklerKwargsInit, GetScorerFlagsJaroWinklerDistance, JaroWinklerDistanceInit, UncachedJaroWinklerDistanceFuncInit())
 */
  __Pyx_TraceLine(1032,1,__PYX_ERR(0, 1032, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1025
 *     return True
 * 
 * cdef bool GetScorerFlagsJaroWinklerSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroWinklerMultiStringSupport(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsJaroWinklerSimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1046
 * ###############################################
 * 
 * def postfix_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_81postfix_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_81postfix_distance = {"postfix_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_81postfix_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_81postfix_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("postfix_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1046, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1046, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("postfix_distance", 1, 2, 2, 1); __PYX_ERR(0, 1046, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1046, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "postfix_distance") < 0)) __PYX_ERR(0, 1046, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("postfix_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1046, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.postfix_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_80postfix_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_80postfix_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  size_t __pyx_v_c_score_cutoff;
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__44)
  __Pyx_RefNannySetupContext("postfix_distance", 1);
  __Pyx_TraceCall("postfix_distance", __pyx_f[0], 1046, 0, __PYX_ERR(0, 1046, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1047
 * 
 * def postfix_distance(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 * 
 */
  __Pyx_TraceLine(1047,0,__PYX_ERR(0, 1047, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_cutoff, SIZE_MAX, 0); if (unlikely(__pyx_t_1 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1047, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1050
 *     cdef RF_StringWrapper s1_proc, s2_proc
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return postfix_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(1050,0,__PYX_ERR(0, 1050, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 1050, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":1051
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return postfix_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * def postfix_similarity(s1, s2, *, processor=None, score_cutoff=None):
 */
  __Pyx_TraceLine(1051,0,__PYX_ERR(0, 1051, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = postfix_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1051, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1046
 * ###############################################
 * 
 * def postfix_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.postfix_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1053
 *     return postfix_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def postfix_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_83postfix_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_83postfix_similarity = {"postfix_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_83postfix_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_83postfix_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("postfix_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1053, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1053, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("postfix_similarity", 1, 2, 2, 1); __PYX_ERR(0, 1053, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1053, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "postfix_similarity") < 0)) __PYX_ERR(0, 1053, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("postfix_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1053, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.postfix_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_82postfix_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_82postfix_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  size_t __pyx_v_c_score_cutoff;
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__45)
  __Pyx_RefNannySetupContext("postfix_similarity", 1);
  __Pyx_TraceCall("postfix_similarity", __pyx_f[0], 1053, 0, __PYX_ERR(0, 1053, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1054
 * 
 * def postfix_similarity(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 * 
 */
  __Pyx_TraceLine(1054,0,__PYX_ERR(0, 1054, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_cutoff, 0, SIZE_MAX); if (unlikely(__pyx_t_1 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1054, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1057
 *     cdef RF_StringWrapper s1_proc, s2_proc
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return postfix_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(1057,0,__PYX_ERR(0, 1057, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 1057, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":1058
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return postfix_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * def postfix_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):
 */
  __Pyx_TraceLine(1058,0,__PYX_ERR(0, 1058, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = postfix_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1058, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1053
 *     return postfix_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def postfix_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.postfix_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1060
 *     return postfix_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def postfix_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_85postfix_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_85postfix_normalized_distance = {"postfix_normalized_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_85postfix_normalized_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_85postfix_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("postfix_normalized_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1060, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1060, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("postfix_normalized_distance", 1, 2, 2, 1); __PYX_ERR(0, 1060, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1060, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "postfix_normalized_distance") < 0)) __PYX_ERR(0, 1060, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("postfix_normalized_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1060, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.postfix_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_84postfix_normalized_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_84postfix_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__46)
  __Pyx_RefNannySetupContext("postfix_normalized_distance", 1);
  __Pyx_TraceCall("postfix_normalized_distance", __pyx_f[0], 1060, 0, __PYX_ERR(0, 1060, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1062
 * def postfix_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 1.0
 */
  __Pyx_TraceLine(1062,0,__PYX_ERR(0, 1062, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":1063
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  __Pyx_TraceLine(1063,0,__PYX_ERR(0, 1063, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":1064
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 1.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 */
    __Pyx_TraceLine(1064,0,__PYX_ERR(0, 1064, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_1_0);
    __pyx_r = __pyx_float_1_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":1063
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":1066
 *         return 1.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return postfix_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 */
  __Pyx_TraceLine(1066,0,__PYX_ERR(0, 1066, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 1.0, 0.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1066, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1067
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return postfix_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(1067,0,__PYX_ERR(0, 1067, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 1067, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":1068
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return postfix_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(1068,0,__PYX_ERR(0, 1068, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = postfix_normalized_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1068, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1060
 *     return postfix_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def postfix_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.postfix_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1071
 * 
 * 
 * def postfix_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_87postfix_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_87postfix_normalized_similarity = {"postfix_normalized_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_87postfix_normalized_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_87postfix_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("postfix_normalized_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1071, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1071, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("postfix_normalized_similarity", 1, 2, 2, 1); __PYX_ERR(0, 1071, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1071, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "postfix_normalized_similarity") < 0)) __PYX_ERR(0, 1071, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("postfix_normalized_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1071, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.postfix_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_86postfix_normalized_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_86postfix_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__47)
  __Pyx_RefNannySetupContext("postfix_normalized_similarity", 1);
  __Pyx_TraceCall("postfix_normalized_similarity", __pyx_f[0], 1071, 0, __PYX_ERR(0, 1071, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1073
 * def postfix_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 0.0
 */
  __Pyx_TraceLine(1073,0,__PYX_ERR(0, 1073, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":1074
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  __Pyx_TraceLine(1074,0,__PYX_ERR(0, 1074, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":1075
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 */
    __Pyx_TraceLine(1075,0,__PYX_ERR(0, 1075, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":1074
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":1077
 *         return 0.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return postfix_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 */
  __Pyx_TraceLine(1077,0,__PYX_ERR(0, 1077, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 0.0, 1.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1077, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1078
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return postfix_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(1078,0,__PYX_ERR(0, 1078, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 1078, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":1079
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return postfix_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsPostfixDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(1079,0,__PYX_ERR(0, 1079, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = postfix_normalized_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1079, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1071
 * 
 * 
 * def postfix_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.postfix_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1081
 *     return postfix_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * cdef bool GetScorerFlagsPostfixDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPostfixDistance(CYTHON_UNUSED RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsPostfixDistance", __pyx_f[0], 1081, 1, __PYX_ERR(0, 1081, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1082
 * 
 * cdef bool GetScorerFlagsPostfixDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 */
  __Pyx_TraceLine(1082,1,__PYX_ERR(0, 1082, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = (RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC);

  /* "rapidfuzz/distance/metrics_cpp.pyx":1083
 * cdef bool GetScorerFlagsPostfixDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 *     return True
 */
  __Pyx_TraceLine(1083,1,__PYX_ERR(0, 1083, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.sizet = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1084
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(1084,1,__PYX_ERR(0, 1084, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.sizet = SIZE_MAX;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1085
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsPostfixNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(1085,1,__PYX_ERR(0, 1085, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1081
 *     return postfix_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * cdef bool GetScorerFlagsPostfixDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsPostfixDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1087
 *     return True
 * 
 * cdef bool GetScorerFlagsPostfixNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPostfixNormalizedDistance(CYTHON_UNUSED RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsPostfixNormalizedDistance", __pyx_f[0], 1087, 1, __PYX_ERR(0, 1087, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1088
 * 
 * cdef bool GetScorerFlagsPostfixNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1.0
 */
  __Pyx_TraceLine(1088,1,__PYX_ERR(0, 1088, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":1089
 * cdef bool GetScorerFlagsPostfixNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 1.0
 *     return True
 */
  __Pyx_TraceLine(1089,1,__PYX_ERR(0, 1089, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1090
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1.0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(1090,1,__PYX_ERR(0, 1090, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1091
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1.0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsPostfixSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(1091,1,__PYX_ERR(0, 1091, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1087
 *     return True
 * 
 * cdef bool GetScorerFlagsPostfixNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsPostfixNormalizedDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1093
 *     return True
 * 
 * cdef bool GetScorerFlagsPostfixSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPostfixSimilarity(CYTHON_UNUSED RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsPostfixSimilarity", __pyx_f[0], 1093, 1, __PYX_ERR(0, 1093, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1094
 * 
 * cdef bool GetScorerFlagsPostfixSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0
 */
  __Pyx_TraceLine(1094,1,__PYX_ERR(0, 1094, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = (RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC);

  /* "rapidfuzz/distance/metrics_cpp.pyx":1095
 * cdef bool GetScorerFlagsPostfixSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.sizet = 0
 *     return True
 */
  __Pyx_TraceLine(1095,1,__PYX_ERR(0, 1095, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.sizet = SIZE_MAX;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1096
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(1096,1,__PYX_ERR(0, 1096, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.sizet = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1097
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsPostfixNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(1097,1,__PYX_ERR(0, 1097, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1093
 *     return True
 * 
 * cdef bool GetScorerFlagsPostfixSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsPostfixSimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1099
 *     return True
 * 
 * cdef bool GetScorerFlagsPostfixNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPostfixNormalizedSimilarity(CYTHON_UNUSED RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsPostfixNormalizedSimilarity", __pyx_f[0], 1099, 1, __PYX_ERR(0, 1099, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1100
 * 
 * cdef bool GetScorerFlagsPostfixNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0
 */
  __Pyx_TraceLine(1100,1,__PYX_ERR(0, 1100, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":1101
 * cdef bool GetScorerFlagsPostfixNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 0
 *     return True
 */
  __Pyx_TraceLine(1101,1,__PYX_ERR(0, 1101, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1102
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(1102,1,__PYX_ERR(0, 1102, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1103
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer PostfixDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPostfixDistance, PostfixDistanceInit, UncachedPostfixDistanceFuncInit())
 */
  __Pyx_TraceLine(1103,1,__PYX_ERR(0, 1103, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1099
 *     return True
 * 
 * cdef bool GetScorerFlagsPostfixNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsPostfixNormalizedSimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1122
 * ###############################################
 * 
 * def prefix_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_89prefix_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_89prefix_distance = {"prefix_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_89prefix_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_89prefix_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prefix_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1122, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1122, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("prefix_distance", 1, 2, 2, 1); __PYX_ERR(0, 1122, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1122, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "prefix_distance") < 0)) __PYX_ERR(0, 1122, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prefix_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1122, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.prefix_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_88prefix_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_88prefix_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  size_t __pyx_v_c_score_cutoff;
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__48)
  __Pyx_RefNannySetupContext("prefix_distance", 1);
  __Pyx_TraceCall("prefix_distance", __pyx_f[0], 1122, 0, __PYX_ERR(0, 1122, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1123
 * 
 * def prefix_distance(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 * 
 */
  __Pyx_TraceLine(1123,0,__PYX_ERR(0, 1123, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_cutoff, SIZE_MAX, 0); if (unlikely(__pyx_t_1 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1123, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1126
 *     cdef RF_StringWrapper s1_proc, s2_proc
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return prefix_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(1126,0,__PYX_ERR(0, 1126, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 1126, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":1127
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return prefix_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * def prefix_similarity(s1, s2, *, processor=None, score_cutoff=None):
 */
  __Pyx_TraceLine(1127,0,__PYX_ERR(0, 1127, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = prefix_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1127, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1122
 * ###############################################
 * 
 * def prefix_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.prefix_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1129
 *     return prefix_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def prefix_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_91prefix_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_91prefix_similarity = {"prefix_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_91prefix_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_91prefix_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prefix_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1129, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1129, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("prefix_similarity", 1, 2, 2, 1); __PYX_ERR(0, 1129, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1129, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "prefix_similarity") < 0)) __PYX_ERR(0, 1129, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prefix_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1129, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.prefix_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_90prefix_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_90prefix_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  size_t __pyx_v_c_score_cutoff;
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__49)
  __Pyx_RefNannySetupContext("prefix_similarity", 1);
  __Pyx_TraceCall("prefix_similarity", __pyx_f[0], 1129, 0, __PYX_ERR(0, 1129, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1130
 * 
 * def prefix_similarity(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 * 
 */
  __Pyx_TraceLine(1130,0,__PYX_ERR(0, 1130, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_10cpp_common_get_score_cutoff_size_t(__pyx_v_score_cutoff, 0, SIZE_MAX); if (unlikely(__pyx_t_1 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1130, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_1;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1133
 *     cdef RF_StringWrapper s1_proc, s2_proc
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return prefix_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(1133,0,__PYX_ERR(0, 1133, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(0, 1133, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":1134
 * 
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return prefix_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * def prefix_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):
 */
  __Pyx_TraceLine(1134,0,__PYX_ERR(0, 1134, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = prefix_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1134, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1129
 *     return prefix_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def prefix_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.prefix_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1136
 *     return prefix_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def prefix_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_93prefix_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_93prefix_normalized_distance = {"prefix_normalized_distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_93prefix_normalized_distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_93prefix_normalized_distance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prefix_normalized_distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1136, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1136, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("prefix_normalized_distance", 1, 2, 2, 1); __PYX_ERR(0, 1136, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1136, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "prefix_normalized_distance") < 0)) __PYX_ERR(0, 1136, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prefix_normalized_distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1136, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.prefix_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_92prefix_normalized_distance(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_92prefix_normalized_distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__50)
  __Pyx_RefNannySetupContext("prefix_normalized_distance", 1);
  __Pyx_TraceCall("prefix_normalized_distance", __pyx_f[0], 1136, 0, __PYX_ERR(0, 1136, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1138
 * def prefix_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 1.0
 */
  __Pyx_TraceLine(1138,0,__PYX_ERR(0, 1138, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":1139
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  __Pyx_TraceLine(1139,0,__PYX_ERR(0, 1139, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":1140
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 1.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 */
    __Pyx_TraceLine(1140,0,__PYX_ERR(0, 1140, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_1_0);
    __pyx_r = __pyx_float_1_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":1139
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 1.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":1142
 *         return 1.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return prefix_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 */
  __Pyx_TraceLine(1142,0,__PYX_ERR(0, 1142, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 1.0, 0.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1142, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1143
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return prefix_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(1143,0,__PYX_ERR(0, 1143, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 1143, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":1144
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 1.0, 0.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return prefix_normalized_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(1144,0,__PYX_ERR(0, 1144, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = prefix_normalized_distance_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1144, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1136
 *     return prefix_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def prefix_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.prefix_normalized_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1147
 * 
 * 
 * def prefix_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_95prefix_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_95prefix_normalized_similarity = {"prefix_normalized_similarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_95prefix_normalized_similarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9rapidfuzz_8distance_11metrics_cpp_95prefix_normalized_similarity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_processor = 0;
  PyObject *__pyx_v_score_cutoff = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prefix_normalized_similarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_processor,&__pyx_n_s_score_cutoff,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1147, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1147, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("prefix_normalized_similarity", 1, 2, 2, 1); __PYX_ERR(0, 1147, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1147, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "prefix_normalized_similarity") < 0)) __PYX_ERR(0, 1147, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_processor = values[2];
    __pyx_v_score_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prefix_normalized_similarity", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1147, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.prefix_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9rapidfuzz_8distance_11metrics_cpp_94prefix_normalized_similarity(__pyx_self, __pyx_v_s1, __pyx_v_s2, __pyx_v_processor, __pyx_v_score_cutoff);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9rapidfuzz_8distance_11metrics_cpp_94prefix_normalized_similarity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_processor, PyObject *__pyx_v_score_cutoff) {
  RF_StringWrapper __pyx_v_s1_proc;
  RF_StringWrapper __pyx_v_s2_proc;
  double __pyx_v_c_score_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__51)
  __Pyx_RefNannySetupContext("prefix_normalized_similarity", 1);
  __Pyx_TraceCall("prefix_normalized_similarity", __pyx_f[0], 1147, 0, __PYX_ERR(0, 1147, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1149
 * def prefix_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()             # <<<<<<<<<<<<<<
 *     if is_none(s1) or is_none(s2):
 *         return 0.0
 */
  __Pyx_TraceLine(1149,0,__PYX_ERR(0, 1149, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":1150
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  __Pyx_TraceLine(1150,0,__PYX_ERR(0, 1150, __pyx_L1_error))
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_10cpp_common_is_none(__pyx_v_s2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "rapidfuzz/distance/metrics_cpp.pyx":1151
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 */
    __Pyx_TraceLine(1151,0,__PYX_ERR(0, 1151, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "rapidfuzz/distance/metrics_cpp.pyx":1150
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 *     if is_none(s1) or is_none(s2):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  }

  /* "rapidfuzz/distance/metrics_cpp.pyx":1153
 *         return 0.0
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)             # <<<<<<<<<<<<<<
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return prefix_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 */
  __Pyx_TraceLine(1153,0,__PYX_ERR(0, 1153, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_10cpp_common_get_score_cutoff_f64(__pyx_v_score_cutoff, 0.0, 1.0); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1153, __pyx_L1_error)
  __pyx_v_c_score_cutoff = __pyx_t_3;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1154
 * 
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)             # <<<<<<<<<<<<<<
 *     return prefix_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 */
  __Pyx_TraceLine(1154,0,__PYX_ERR(0, 1154, __pyx_L1_error))
  __pyx_t_4 = __pyx_f_10cpp_common_preprocess_strings(__pyx_v_s1, __pyx_v_s2, __pyx_v_processor, (&__pyx_v_s1_proc), (&__pyx_v_s2_proc)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(0, 1154, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":1155
 *     cdef double c_score_cutoff = get_score_cutoff_f64(score_cutoff, 0.0, 1.0)
 *     preprocess_strings(s1, s2, processor, &s1_proc, &s2_proc)
 *     return prefix_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(1155,0,__PYX_ERR(0, 1155, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = prefix_normalized_similarity_func(__pyx_v_s1_proc.string, __pyx_v_s2_proc.string, __pyx_v_c_score_cutoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1155, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1147
 * 
 * 
 * def prefix_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.prefix_normalized_similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1158
 * 
 * 
 * cdef bool GetScorerFlagsPrefixDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPrefixDistance(CYTHON_UNUSED RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsPrefixDistance", __pyx_f[0], 1158, 1, __PYX_ERR(0, 1158, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1159
 * 
 * cdef bool GetScorerFlagsPrefixDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 */
  __Pyx_TraceLine(1159,1,__PYX_ERR(0, 1159, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = (RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC);

  /* "rapidfuzz/distance/metrics_cpp.pyx":1160
 * cdef bool GetScorerFlagsPrefixDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 *     return True
 */
  __Pyx_TraceLine(1160,1,__PYX_ERR(0, 1160, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.sizet = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1161
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(1161,1,__PYX_ERR(0, 1161, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.sizet = SIZE_MAX;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1162
 *     scorer_flags.optimal_score.sizet = 0
 *     scorer_flags.worst_score.sizet = SIZE_MAX
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsPrefixNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(1162,1,__PYX_ERR(0, 1162, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1158
 * 
 * 
 * cdef bool GetScorerFlagsPrefixDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsPrefixDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1164
 *     return True
 * 
 * cdef bool GetScorerFlagsPrefixNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPrefixNormalizedDistance(CYTHON_UNUSED RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsPrefixNormalizedDistance", __pyx_f[0], 1164, 1, __PYX_ERR(0, 1164, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1165
 * 
 * cdef bool GetScorerFlagsPrefixNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1.0
 */
  __Pyx_TraceLine(1165,1,__PYX_ERR(0, 1165, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":1166
 * cdef bool GetScorerFlagsPrefixNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 1.0
 *     return True
 */
  __Pyx_TraceLine(1166,1,__PYX_ERR(0, 1166, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1167
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1.0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(1167,1,__PYX_ERR(0, 1167, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1168
 *     scorer_flags.optimal_score.f64 = 0.0
 *     scorer_flags.worst_score.f64 = 1.0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsPrefixSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(1168,1,__PYX_ERR(0, 1168, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1164
 *     return True
 * 
 * cdef bool GetScorerFlagsPrefixNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsPrefixNormalizedDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1170
 *     return True
 * 
 * cdef bool GetScorerFlagsPrefixSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPrefixSimilarity(CYTHON_UNUSED RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsPrefixSimilarity", __pyx_f[0], 1170, 1, __PYX_ERR(0, 1170, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1171
 * 
 * cdef bool GetScorerFlagsPrefixSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC             # <<<<<<<<<<<<<<
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0
 */
  __Pyx_TraceLine(1171,1,__PYX_ERR(0, 1171, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = (RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC);

  /* "rapidfuzz/distance/metrics_cpp.pyx":1172
 * cdef bool GetScorerFlagsPrefixSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.sizet = 0
 *     return True
 */
  __Pyx_TraceLine(1172,1,__PYX_ERR(0, 1172, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.sizet = SIZE_MAX;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1173
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(1173,1,__PYX_ERR(0, 1173, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.sizet = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1174
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 *     scorer_flags.worst_score.sizet = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef bool GetScorerFlagsPrefixNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 */
  __Pyx_TraceLine(1174,1,__PYX_ERR(0, 1174, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1170
 *     return True
 * 
 * cdef bool GetScorerFlagsPrefixSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsPrefixSimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "rapidfuzz/distance/metrics_cpp.pyx":1176
 *     return True
 * 
 * cdef bool GetScorerFlagsPrefixNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0
 */

static bool __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPrefixNormalizedSimilarity(CYTHON_UNUSED RF_Kwargs const *__pyx_v_self, RF_ScorerFlags *__pyx_v_scorer_flags) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("GetScorerFlagsPrefixNormalizedSimilarity", __pyx_f[0], 1176, 1, __PYX_ERR(0, 1176, __pyx_L1_error));

  /* "rapidfuzz/distance/metrics_cpp.pyx":1177
 * 
 * cdef bool GetScorerFlagsPrefixNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE             # <<<<<<<<<<<<<<
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0
 */
  __Pyx_TraceLine(1177,1,__PYX_ERR(0, 1177, __pyx_L1_error))
  __pyx_v_scorer_flags->flags = ((RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC) | RF_SCORER_NONE_IS_WORST_SCORE);

  /* "rapidfuzz/distance/metrics_cpp.pyx":1178
 * cdef bool GetScorerFlagsPrefixNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0             # <<<<<<<<<<<<<<
 *     scorer_flags.worst_score.f64 = 0
 *     return True
 */
  __Pyx_TraceLine(1178,1,__PYX_ERR(0, 1178, __pyx_L1_error))
  __pyx_v_scorer_flags->optimal_score.f64 = 1.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1179
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __Pyx_TraceLine(1179,1,__PYX_ERR(0, 1179, __pyx_L1_error))
  __pyx_v_scorer_flags->worst_score.f64 = 0.0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1180
 *     scorer_flags.optimal_score.f64 = 1.0
 *     scorer_flags.worst_score.f64 = 0
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer PrefixDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPrefixDistance, PrefixDistanceInit, UncachedPrefixDistanceFuncInit())
 */
  __Pyx_TraceLine(1180,1,__PYX_ERR(0, 1180, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1176
 *     return True
 * 
 * cdef bool GetScorerFlagsPrefixNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("rapidfuzz.distance.metrics_cpp.GetScorerFlagsPrefixNormalizedSimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
    {&__pyx_n_s_Editops, __pyx_k_Editops, sizeof(__pyx_k_Editops), 0, 0, 1, 1},
    {&__pyx_kp_u_Got_unexpected_keyword_arguments, __pyx_k_Got_unexpected_keyword_arguments, sizeof(__pyx_k_Got_unexpected_keyword_arguments), 0, 1, 0, 0},
    {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
    {&__pyx_n_s_NA, __pyx_k_NA, sizeof(__pyx_k_NA), 0, 0, 1, 1},
    {&__pyx_n_u_NA, __pyx_k_NA, sizeof(__pyx_k_NA), 0, 1, 0, 1},
    {&__pyx_n_s_RF_OriginalScorer, __pyx_k_RF_OriginalScorer, sizeof(__pyx_k_RF_OriginalScorer), 0, 0, 1, 1},
    {&__pyx_n_s_RF_Preprocess, __pyx_k_RF_Preprocess, sizeof(__pyx_k_RF_Preprocess), 0, 0, 1, 1},
    {&__pyx_n_u_RF_Preprocess, __pyx_k_RF_Preprocess, sizeof(__pyx_k_RF_Preprocess), 0, 1, 0, 1},
    {&__pyx_n_s_RF_Scorer, __pyx_k_RF_Scorer, sizeof(__pyx_k_RF_Scorer), 0, 0, 1, 1},
    {&__pyx_n_s_RF_ScorerPy, __pyx_k_RF_ScorerPy, sizeof(__pyx_k_RF_ScorerPy), 0, 0, 1, 1},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
    {&__pyx_n_s__52, __pyx_k__52, sizeof(__pyx_k__52), 0, 0, 1, 1},
    {&__pyx_kp_u__53, __pyx_k__53, sizeof(__pyx_k__53), 0, 1, 0, 0},
    {&__pyx_n_s__54, __pyx_k__54, sizeof(__pyx_k__54), 0, 0, 1, 1},
    {&__pyx_n_s__64, __pyx_k__64, sizeof(__pyx_k__64), 0, 0, 1, 1},
    {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
    {&__pyx_n_s_as_opcodes, __pyx_k_as_opcodes, sizeof(__pyx_k_as_opcodes), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_c_score_cutoff, __pyx_k_c_score_cutoff, sizeof(__pyx_k_c_score_cutoff), 0, 0, 1, 1},
    {&__pyx_n_s_c_score_hint, __pyx_k_c_score_hint, sizeof(__pyx_k_c_score_hint), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_damerau_levenshtein_distance, __pyx_k_damerau_levenshtein_distance, sizeof(__pyx_k_damerau_levenshtein_distance), 0, 0, 1, 1},
    {&__pyx_n_s_damerau_levenshtein_normalized_d, __pyx_k_damerau_levenshtein_normalized_d, sizeof(__pyx_k_damerau_levenshtein_normalized_d), 0, 0, 1, 1},
    {&__pyx_n_s_damerau_levenshtein_normalized_s, __pyx_k_damerau_levenshtein_normalized_s, sizeof(__pyx_k_damerau_levenshtein_normalized_s), 0, 0, 1, 1},
    {&__pyx_n_s_damerau_levenshtein_similarity, __pyx_k_damerau_levenshtein_similarity, sizeof(__pyx_k_damerau_levenshtein_similarity), 0, 0, 1, 1},
    {&__pyx_n_s_deletion, __pyx_k_deletion, sizeof(__pyx_k_deletion), 0, 0, 1, 1},
    {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
    {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
    {&__pyx_n_s_hamming_distance, __pyx_k_hamming_distance, sizeof(__pyx_k_hamming_distance), 0, 0, 1, 1},
    {&__pyx_n_s_hamming_editops, __pyx_k_hamming_editops, sizeof(__pyx_k_hamming_editops), 0, 0, 1, 1},
    {&__pyx_n_s_hamming_normalized_distance, __pyx_k_hamming_normalized_distance, sizeof(__pyx_k_hamming_normalized_distance), 0, 0, 1, 1},
    {&__pyx_n_s_hamming_normalized_similarity, __pyx_k_hamming_normalized_similarity, sizeof(__pyx_k_hamming_normalized_similarity), 0, 0, 1, 1},
    {&__pyx_n_s_hamming_opcodes, __pyx_k_hamming_opcodes, sizeof(__pyx_k_hamming_opcodes), 0, 0, 1, 1},
    {&__pyx_n_s_hamming_similarity, __pyx_k_hamming_similarity, sizeof(__pyx_k_hamming_similarity), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_indel_distance, __pyx_k_indel_distance, sizeof(__pyx_k_indel_distance), 0, 0, 1, 1},
    {&__pyx_n_s_indel_editops, __pyx_k_indel_editops, sizeof(__pyx_k_indel_editops), 0, 0, 1, 1},
    {&__pyx_n_s_indel_normalized_distance, __pyx_k_indel_normalized_distance, sizeof(__pyx_k_indel_normalized_distance), 0, 0, 1, 1},
    {&__pyx_n_s_indel_normalized_similarity, __pyx_k_indel_normalized_similarity, sizeof(__pyx_k_indel_normalized_similarity), 0, 0, 1, 1},
    {&__pyx_n_s_indel_opcodes, __pyx_k_indel_opcodes, sizeof(__pyx_k_indel_opcodes), 0, 0, 1, 1},
    {&__pyx_n_s_indel_similarity, __pyx_k_indel_similarity, sizeof(__pyx_k_indel_similarity), 0, 0, 1, 1},
    {&__pyx_n_s_initialize_cpp, __pyx_k_initialize_cpp, sizeof(__pyx_k_initialize_cpp), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_insertion, __pyx_k_insertion, sizeof(__pyx_k_insertion), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_n_s_jaro_distance, __pyx_k_jaro_distance, sizeof(__pyx_k_jaro_distance), 0, 0, 1, 1},
    {&__pyx_n_s_jaro_normalized_distance, __pyx_k_jaro_normalized_distance, sizeof(__pyx_k_jaro_normalized_distance), 0, 0, 1, 1},
    {&__pyx_n_s_jaro_normalized_similarity, __pyx_k_jaro_normalized_similarity, sizeof(__pyx_k_jaro_normalized_similarity), 0, 0, 1, 1},
    {&__pyx_n_s_jaro_similarity, __pyx_k_jaro_similarity, sizeof(__pyx_k_jaro_similarity), 0, 0, 1, 1},
    {&__pyx_n_s_jaro_winkler_distance, __pyx_k_jaro_winkler_distance, sizeof(__pyx_k_jaro_winkler_distance), 0, 0, 1, 1},
    {&__pyx_n_s_jaro_winkler_normalized_distance, __pyx_k_jaro_winkler_normalized_distance, sizeof(__pyx_k_jaro_winkler_normalized_distance), 0, 0, 1, 1},
    {&__pyx_n_s_jaro_winkler_normalized_similari, __pyx_k_jaro_winkler_normalized_similari, sizeof(__pyx_k_jaro_winkler_normalized_similari), 0, 0, 1, 1},
    {&__pyx_n_s_jaro_winkler_similarity, __pyx_k_jaro_winkler_similarity, sizeof(__pyx_k_jaro_winkler_similarity), 0, 0, 1, 1},
    {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
    {&__pyx_n_s_lcs_seq_distance, __pyx_k_lcs_seq_distance, sizeof(__pyx_k_lcs_seq_distance), 0, 0, 1, 1},
    {&__pyx_n_s_lcs_seq_editops, __pyx_k_lcs_seq_editops, sizeof(__pyx_k_lcs_seq_editops), 0, 0, 1, 1},
    {&__pyx_n_s_lcs_seq_normalized_distance, __pyx_k_lcs_seq_normalized_distance, sizeof(__pyx_k_lcs_seq_normalized_distance), 0, 0, 1, 1},
    {&__pyx_n_s_lcs_seq_normalized_similarity, __pyx_k_lcs_seq_normalized_similarity, sizeof(__pyx_k_lcs_seq_normalized_similarity), 0, 0, 1, 1},
    {&__pyx_n_s_lcs_seq_opcodes, __pyx_k_lcs_seq_opcodes, sizeof(__pyx_k_lcs_seq_opcodes), 0, 0, 1, 1},
    {&__pyx_n_s_lcs_seq_similarity, __pyx_k_lcs_seq_similarity, sizeof(__pyx_k_lcs_seq_similarity), 0, 0, 1, 1},
    {&__pyx_n_s_levenshtein_distance, __pyx_k_levenshtein_distance, sizeof(__pyx_k_levenshtein_distance), 0, 0, 1, 1},
    {&__pyx_n_s_levenshtein_editops, __pyx_k_levenshtein_editops, sizeof(__pyx_k_levenshtein_editops), 0, 0, 1, 1},
    {&__pyx_n_s_levenshtein_normalized_distance, __pyx_k_levenshtein_normalized_distance, sizeof(__pyx_k_levenshtein_normalized_distance), 0, 0, 1, 1},
    {&__pyx_n_s_levenshtein_normalized_similarit, __pyx_k_levenshtein_normalized_similarit, sizeof(__pyx_k_levenshtein_normalized_similarit), 0, 0, 1, 1},
    {&__pyx_n_s_levenshtein_opcodes, __pyx_k_levenshtein_opcodes, sizeof(__pyx_k_levenshtein_opcodes), 0, 0, 1, 1},
    {&__pyx_n_s_levenshtein_similarity, __pyx_k_levenshtein_similarity, sizeof(__pyx_k_levenshtein_similarity), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_metrics_py, __pyx_k_metrics_py, sizeof(__pyx_k_metrics_py), 0, 0, 1, 1},
    {&__pyx_n_s_modules, __pyx_k_modules, sizeof(__pyx_k_modules), 0, 0, 1, 1},
    {&__pyx_n_s_msg, __pyx_k_msg, sizeof(__pyx_k_msg), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_ops, __pyx_k_ops, sizeof(__pyx_k_ops), 0, 0, 1, 1},
    {&__pyx_n_s_osa_distance, __pyx_k_osa_distance, sizeof(__pyx_k_osa_distance), 0, 0, 1, 1},
    {&__pyx_n_s_osa_normalized_distance, __pyx_k_osa_normalized_distance, sizeof(__pyx_k_osa_normalized_distance), 0, 0, 1, 1},
    {&__pyx_n_s_osa_normalized_similarity, __pyx_k_osa_normalized_similarity, sizeof(__pyx_k_osa_normalized_similarity), 0, 0, 1, 1},
    {&__pyx_n_s_osa_similarity, __pyx_k_osa_similarity, sizeof(__pyx_k_osa_similarity), 0, 0, 1, 1},
    {&__pyx_n_s_pad, __pyx_k_pad, sizeof(__pyx_k_pad), 0, 0, 1, 1},
    {&__pyx_n_u_pad, __pyx_k_pad, sizeof(__pyx_k_pad), 0, 1, 0, 1},
    {&__pyx_n_u_pandas, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 1, 0, 1},
    {&__pyx_n_s_pandas_NA, __pyx_k_pandas_NA, sizeof(__pyx_k_pandas_NA), 0, 0, 1, 1},
    {&__pyx_n_s_postfix_distance, __pyx_k_postfix_distance, sizeof(__pyx_k_postfix_distance), 0, 0, 1, 1},
    {&__pyx_n_s_postfix_normalized_distance, __pyx_k_postfix_normalized_distance, sizeof(__pyx_k_postfix_normalized_distance), 0, 0, 1, 1},
    {&__pyx_n_s_postfix_normalized_similarity, __pyx_k_postfix_normalized_similarity, sizeof(__pyx_k_postfix_normalized_similarity), 0, 0, 1, 1},
    {&__pyx_n_s_postfix_similarity, __pyx_k_postfix_similarity, sizeof(__pyx_k_postfix_similarity), 0, 0, 1, 1},
    {&__pyx_n_s_prefix_distance, __pyx_k_prefix_distance, sizeof(__pyx_k_prefix_distance), 0, 0, 1, 1},
    {&__pyx_n_s_prefix_normalized_distance, __pyx_k_prefix_normalized_distance, sizeof(__pyx_k_prefix_normalized_distance), 0, 0, 1, 1},
    {&__pyx_n_s_prefix_normalized_similarity, __pyx_k_prefix_normalized_similarity, sizeof(__pyx_k_prefix_normalized_similarity), 0, 0, 1, 1},
    {&__pyx_n_s_prefix_similarity, __pyx_k_prefix_similarity, sizeof(__pyx_k_prefix_similarity), 0, 0, 1, 1},
    {&__pyx_n_s_prefix_weight, __pyx_k_prefix_weight, sizeof(__pyx_k_prefix_weight), 0, 0, 1, 1},
    {&__pyx_n_u_prefix_weight, __pyx_k_prefix_weight, sizeof(__pyx_k_prefix_weight), 0, 1, 0, 1},
    {&__pyx_kp_u_prefix_weight_has_to_be_in_the_r, __pyx_k_prefix_weight_has_to_be_in_the_r, sizeof(__pyx_k_prefix_weight_has_to_be_in_the_r), 0, 1, 0, 0},
    {&__pyx_n_s_processor, __pyx_k_processor, sizeof(__pyx_k_processor), 0, 0, 1, 1},
    {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_k_rapidfuzz_distance_metrics_cpp, sizeof(__pyx_k_rapidfuzz_distance_metrics_cpp), 0, 0, 1, 1},
    {&__pyx_n_s_s1, __pyx_k_s1, sizeof(__pyx_k_s1), 0, 0, 1, 1},
    {&__pyx_n_s_s1_proc, __pyx_k_s1_proc, sizeof(__pyx_k_s1_proc), 0, 0, 1, 1},
    {&__pyx_n_s_s2, __pyx_k_s2, sizeof(__pyx_k_s2), 0, 0, 1, 1},
    {&__pyx_n_s_s2_proc, __pyx_k_s2_proc, sizeof(__pyx_k_s2_proc), 0, 0, 1, 1},
    {&__pyx_n_s_score_cutoff, __pyx_k_score_cutoff, sizeof(__pyx_k_score_cutoff), 0, 0, 1, 1},
    {&__pyx_kp_u_score_cutoff_has_to_be_in_the_ra, __pyx_k_score_cutoff_has_to_be_in_the_ra, sizeof(__pyx_k_score_cutoff_has_to_be_in_the_ra), 0, 1, 0, 0},
    {&__pyx_n_s_score_hint, __pyx_k_score_hint, sizeof(__pyx_k_score_hint), 0, 0, 1, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_k_src_rapidfuzz_distance_metrics_c, sizeof(__pyx_k_src_rapidfuzz_distance_metrics_c), 0, 0, 1, 0},
    {&__pyx_n_s_substitution, __pyx_k_substitution, sizeof(__pyx_k_substitution), 0, 0, 1, 1},
    {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_typecode, __pyx_k_typecode, sizeof(__pyx_k_typecode), 0, 0, 1, 1},
    {&__pyx_n_s_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 0, 1, 1},
    {&__pyx_n_u_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 1, 0, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 323, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 952, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 269, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 375, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "rapidfuzz/distance/metrics_cpp.pyx":236
 * 
 * 
 * def levenshtein_distance(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef size_t insertion, deletion, substitution
 */
  __pyx_tuple__3 = PyTuple_Pack(3, __pyx_int_1, __pyx_int_1, __pyx_int_1); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __pyx_tuple__55 = PyTuple_Pack(13, __pyx_n_s_s1, __pyx_n_s_s2, __pyx_n_s_weights, __pyx_n_s_processor, __pyx_n_s_score_cutoff, __pyx_n_s_score_hint, __pyx_n_s_s1_proc, __pyx_n_s_s2_proc, __pyx_n_s_insertion, __pyx_n_s_deletion, __pyx_n_s_substitution, __pyx_n_s_c_score_cutoff, __pyx_n_s_c_score_hint); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_levenshtein_distance, 236, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 236, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":249
 * 
 * 
 * def levenshtein_similarity(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef size_t insertion, deletion, substitution
 */
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_levenshtein_similarity, 249, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(0, 249, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":262
 * 
 * 
 * def levenshtein_normalized_distance(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_levenshtein_normalized_distance, 262, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 262, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":279
 * 
 * 
 * def levenshtein_normalized_similarity(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_levenshtein_normalized_similarit, 279, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 279, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":296
 * 
 * 
 * def levenshtein_editops(s1, s2, *, processor=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */
  __pyx_tuple__56 = PyTuple_Pack(8, __pyx_n_s_s1, __pyx_n_s_s2, __pyx_n_s_processor, __pyx_n_s_score_hint, __pyx_n_s_s1_proc, __pyx_n_s_s2_proc, __pyx_n_s_ops, __pyx_n_s_c_score_hint); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_levenshtein_editops, 296, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 296, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":306
 * 
 * 
 * def levenshtein_opcodes(s1, s2, *, processor=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_levenshtein_opcodes, 306, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 306, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":396
 * SetFuncAttrs(levenshtein_opcodes, metrics_py.levenshtein_opcodes)
 * 
 * def damerau_levenshtein_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __pyx_tuple__57 = PyTuple_Pack(7, __pyx_n_s_s1, __pyx_n_s_s2, __pyx_n_s_processor, __pyx_n_s_score_cutoff, __pyx_n_s_c_score_cutoff, __pyx_n_s_s1_proc, __pyx_n_s_s2_proc); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_damerau_levenshtein_distance, 396, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(0, 396, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":403
 * 
 * 
 * def damerau_levenshtein_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_damerau_levenshtein_similarity, 403, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 403, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":410
 * 
 * 
 * def damerau_levenshtein_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_tuple__58 = PyTuple_Pack(7, __pyx_n_s_s1, __pyx_n_s_s2, __pyx_n_s_processor, __pyx_n_s_score_cutoff, __pyx_n_s_s1_proc, __pyx_n_s_s2_proc, __pyx_n_s_c_score_cutoff); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_damerau_levenshtein_normalized_d, 410, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 410, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":421
 * 
 * 
 * def damerau_levenshtein_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_damerau_levenshtein_normalized_s, 421, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 421, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":468
 * 
 * 
 * def lcs_seq_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_lcs_seq_distance, 468, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 468, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":475
 * 
 * 
 * def lcs_seq_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_lcs_seq_similarity, 475, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 475, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":482
 * 
 * 
 * def lcs_seq_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_lcs_seq_normalized_distance, 482, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 482, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":493
 * 
 * 
 * def lcs_seq_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_lcs_seq_normalized_similarity, 493, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 493, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":504
 * 
 * 
 * def lcs_seq_editops(s1, s2, *, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */
  __pyx_tuple__59 = PyTuple_Pack(6, __pyx_n_s_s1, __pyx_n_s_s2, __pyx_n_s_processor, __pyx_n_s_s1_proc, __pyx_n_s_s2_proc, __pyx_n_s_ops); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(2, 0, 1, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_lcs_seq_editops, 504, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 504, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":513
 * 
 * 
 * def lcs_seq_opcodes(s1, s2, *, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(2, 0, 1, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_lcs_seq_opcodes, 513, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 513, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":573
 * SetFuncAttrs(lcs_seq_opcodes, metrics_py.lcs_seq_opcodes)
 * 
 * def indel_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_indel_distance, 573, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 573, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":580
 * 
 * 
 * def indel_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_indel_similarity, 580, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 580, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":587
 * 
 * 
 * def indel_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_indel_normalized_distance, 587, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 587, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":598
 * 
 * 
 * def indel_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_indel_normalized_similarity, 598, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 598, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":609
 * 
 * 
 * def indel_editops(s1, s2, *, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(2, 0, 1, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_indel_editops, 609, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 609, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":618
 * 
 * 
 * def indel_opcodes(s1, s2, *, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(2, 0, 1, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_indel_opcodes, 618, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 618, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":681
 * SetFuncAttrs(indel_opcodes, metrics_py.indel_opcodes)
 * 
 * def hamming_distance(s1, s2, *, pad=True, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __pyx_tuple__60 = PyTuple_Pack(8, __pyx_n_s_s1, __pyx_n_s_s2, __pyx_n_s_pad, __pyx_n_s_processor, __pyx_n_s_score_cutoff, __pyx_n_s_c_score_cutoff, __pyx_n_s_s1_proc, __pyx_n_s_s2_proc); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_hamming_distance, 681, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 681, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":688
 *     return hamming_distance_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)
 * 
 * def hamming_similarity(s1, s2, *, pad=True, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_hamming_similarity, 688, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 688, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":695
 *     return hamming_similarity_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)
 * 
 * def hamming_normalized_distance(s1, s2, *, pad=True, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_tuple__61 = PyTuple_Pack(8, __pyx_n_s_s1, __pyx_n_s_s2, __pyx_n_s_pad, __pyx_n_s_processor, __pyx_n_s_score_cutoff, __pyx_n_s_s1_proc, __pyx_n_s_s2_proc, __pyx_n_s_c_score_cutoff); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_hamming_normalized_distance, 695, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 695, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":706
 * 
 * 
 * def hamming_normalized_similarity(s1, s2, *, pad=True, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_hamming_normalized_similarity, 706, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 706, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":717
 * 
 * 
 * def hamming_editops(s1, s2, *, pad=True, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */
  __pyx_tuple__62 = PyTuple_Pack(7, __pyx_n_s_s1, __pyx_n_s_s2, __pyx_n_s_pad, __pyx_n_s_processor, __pyx_n_s_s1_proc, __pyx_n_s_s2_proc, __pyx_n_s_ops); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_hamming_editops, 717, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 717, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":726
 * 
 * 
 * def hamming_opcodes(s1, s2, *, pad=True, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_hamming_opcodes, 726, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 726, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":784
 * SetFuncAttrs(hamming_opcodes, metrics_py.hamming_opcodes)
 * 
 * def osa_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_osa_distance, 784, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 784, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":791
 *     return osa_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def osa_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_osa_similarity, 791, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 791, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":798
 *     return osa_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def osa_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_osa_normalized_distance, 798, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 798, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":809
 * 
 * 
 * def osa_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_osa_normalized_similarity, 809, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 809, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":872
 * ###############################################
 * 
 * def jaro_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_jaro_distance, 872, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 872, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":882
 *     return jaro_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def jaro_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_jaro_similarity, 882, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 882, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":892
 *     return jaro_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def jaro_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_jaro_normalized_distance, 892, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 892, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":903
 * 
 * 
 * def jaro_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_jaro_normalized_similarity, 903, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 903, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":944
 * ###############################################
 * 
 * def jaro_winkler_distance(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_tuple__63 = PyTuple_Pack(9, __pyx_n_s_s1, __pyx_n_s_s2, __pyx_n_s_prefix_weight, __pyx_n_s_processor, __pyx_n_s_score_cutoff, __pyx_n_s_s1_proc, __pyx_n_s_s2_proc, __pyx_n_s_msg, __pyx_n_s_c_score_cutoff); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_jaro_winkler_distance, 944, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 944, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":958
 *     return jaro_winkler_distance_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 * def jaro_winkler_similarity(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_jaro_winkler_similarity, 958, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 958, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":972
 *     return jaro_winkler_similarity_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 * def jaro_winkler_normalized_distance(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_jaro_winkler_normalized_distance, 972, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 972, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":986
 *     return jaro_winkler_normalized_distance_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 * def jaro_winkler_normalized_similarity(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_jaro_winkler_normalized_similari, 986, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 986, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":1046
 * ###############################################
 * 
 * def postfix_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_postfix_distance, 1046, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 1046, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":1053
 *     return postfix_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def postfix_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_postfix_similarity, 1053, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 1053, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":1060
 *     return postfix_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def postfix_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_postfix_normalized_distance, 1060, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 1060, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":1071
 * 
 * 
 * def postfix_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_postfix_normalized_similarity, 1071, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 1071, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":1122
 * ###############################################
 * 
 * def prefix_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_prefix_distance, 1122, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 1122, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":1129
 *     return prefix_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def prefix_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_prefix_similarity, 1129, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 1129, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":1136
 *     return prefix_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def prefix_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_prefix_normalized_distance, 1136, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 1136, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":1147
 * 
 * 
 * def prefix_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_rapidfuzz_distance_metrics_c, __pyx_n_s_prefix_normalized_similarity, 1147, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_get.method_name = &__pyx_n_s_get;
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_keys.method_name = &__pyx_n_s_keys;
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_1 = PyFloat_FromDouble(0.1); if (unlikely(!__pyx_float_0_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_0_11(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("rapidfuzz.distance._initialize_cpp"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops = __Pyx_ImportType_3_0_11(__pyx_t_1, "rapidfuzz.distance._initialize_cpp", "Editops", sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Editops),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Editops) __PYX_ERR(3, 9, __pyx_L1_error)
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes = __Pyx_ImportType_3_0_11(__pyx_t_1, "rapidfuzz.distance._initialize_cpp", "Opcodes", sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_Opcodes),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_Opcodes) __PYX_ERR(3, 12, __pyx_L1_error)
  __pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment = __Pyx_ImportType_3_0_11(__pyx_t_1, "rapidfuzz.distance._initialize_cpp", "ScoreAlignment", sizeof(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_9rapidfuzz_8distance_15_initialize_cpp_ScoreAlignment) __PYX_ERR(3, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_metrics_cpp(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_metrics_cpp},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "metrics_cpp",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initmetrics_cpp(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initmetrics_cpp(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_metrics_cpp(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_metrics_cpp(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_metrics_cpp(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'metrics_cpp' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("metrics_cpp", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "metrics_cpp" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_metrics_cpp(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_rapidfuzz__distance__metrics_cpp) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "rapidfuzz.distance.metrics_cpp")) {
      if (unlikely((PyDict_SetItemString(modules, "rapidfuzz.distance.metrics_cpp", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_metrics_cpp(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "cpp_common.pxd":255
 *     void validate_string(object py_str, const char* err) except +
 * 
 * cdef inline bool hash_array(arr, RF_String* s_proc) except False:             # <<<<<<<<<<<<<<
 *     # TODO on Cpython this does not require any copies
 *     cdef Py_UCS4 typecode = <Py_UCS4>arr.typecode
 */
  __Pyx_TraceLine(255,0,__PYX_ERR(1, 255, __pyx_L1_error))


  /* "cpp_common.pxd":304
 * 
 * 
 * cdef inline bool hash_sequence(seq, RF_String* s_proc) except False:             # <<<<<<<<<<<<<<
 *     s_proc.length = <int64_t>len(seq)
 * 
 */
  __Pyx_TraceLine(304,0,__PYX_ERR(1, 304, __pyx_L1_error))


  /* "cpp_common.pxd":331
 *     return True
 * 
 * cdef inline bool is_none(s) noexcept:             # <<<<<<<<<<<<<<
 *     if s is None or s is pandas_NA:
 *         return True
 */
  __Pyx_TraceLine(331,0,__PYX_ERR(1, 331, __pyx_L1_error))


  /* "cpp_common.pxd":343
 * # converting strings. This has to be done carefully, since especially with preprocessor functions
 * # the none check is often required before calling the preprocessing functions to keep the current behaviour
 * cdef inline bool conv_sequence_with_none(seq, RF_String* c_seq) except False:             # <<<<<<<<<<<<<<
 *     if is_valid_string(seq):
 *         c_seq[0] = move(convert_string(seq))
 */
  __Pyx_TraceLine(343,0,__PYX_ERR(1, 343, __pyx_L1_error))


  /* "cpp_common.pxd":356
 *     return True
 * 
 * cdef inline RF_String conv_sequence(seq) except *:             # <<<<<<<<<<<<<<
 *     cdef RF_String c_seq
 *     if is_valid_string(seq):
 */
  __Pyx_TraceLine(356,0,__PYX_ERR(1, 356, __pyx_L1_error))


  /* "cpp_common.pxd":367
 *     return move(c_seq)
 * 
 * cdef inline double get_score_cutoff_f64(score_cutoff, float worst_score, float optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef float c_score_cutoff = worst_score
 * 
 */
  __Pyx_TraceLine(367,0,__PYX_ERR(1, 367, __pyx_L1_error))


  /* "cpp_common.pxd":383
 *     return c_score_cutoff
 * 
 * cdef inline int64_t get_score_cutoff_i64(score_cutoff, int64_t worst_score, int64_t optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef int64_t c_score_cutoff = worst_score
 * 
 */
  __Pyx_TraceLine(383,0,__PYX_ERR(1, 383, __pyx_L1_error))


  /* "cpp_common.pxd":398
 *     return c_score_cutoff
 * 
 * cdef inline size_t get_score_cutoff_size_t(score_cutoff, size_t worst_score, size_t optimal_score) except *:             # <<<<<<<<<<<<<<
 *     cdef uint64_t c_score_cutoff = worst_score
 * 
 */
  __Pyx_TraceLine(398,0,__PYX_ERR(1, 398, __pyx_L1_error))


  /* "cpp_common.pxd":417
 *     return <size_t>c_score_cutoff
 * 
 * cdef inline bool preprocess_strings(s1, s2, processor, RF_StringWrapper* s1_proc, RF_StringWrapper* s2_proc) except False:             # <<<<<<<<<<<<<<
 *     cdef RF_Preprocessor* preprocess_context = NULL
 * 
 */
  __Pyx_TraceLine(417,0,__PYX_ERR(1, 417, __pyx_L1_error))


  /* "cpp_common.pxd":439
 *     return True
 * 
 * cdef inline bool NoKwargsInit(RF_Kwargs* self, dict kwargs) except False:             # <<<<<<<<<<<<<<
 *     if len(kwargs):
 *         raise TypeError("Got unexpected keyword arguments: ", ", ".join(kwargs.keys()))
 */
  __Pyx_TraceLine(439,0,__PYX_ERR(1, 439, __pyx_L1_error))


  /* "cpp_common.pxd":447
 *     return True
 * 
 * cdef inline RF_Scorer CreateScorerContext(RF_KwargsInit kwargs_init, RF_GetScorerFlags get_scorer_flags, RF_ScorerFuncInit scorer_func_init, RF_UncachedScorerFunc uncached_scorer_func) noexcept:             # <<<<<<<<<<<<<<
 *     cdef RF_Scorer context
 *     context.version = SCORER_STRUCT_VERSION
 */
  __Pyx_TraceLine(447,0,__PYX_ERR(1, 447, __pyx_L1_error))


  /* "cpp_common.pxd":456
 *     return context
 * 
 * cdef inline void SetFuncAttrs(cpp_func, py_func) except *:             # <<<<<<<<<<<<<<
 *     cpp_func.__name__ = py_func.__name__
 *     cpp_func.__qualname__ = py_func.__qualname__
 */
  __Pyx_TraceLine(456,0,__PYX_ERR(1, 456, __pyx_L1_error))


  /* "cpp_common.pxd":461
 *     cpp_func.__doc__ = py_func.__doc__
 * 
 * cdef inline void SetScorerAttrs(cpp_func, py_func, RF_Scorer* context) except *:             # <<<<<<<<<<<<<<
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Scorer = PyCapsule_New(context, NULL, NULL)
 */
  __Pyx_TraceLine(461,0,__PYX_ERR(1, 461, __pyx_L1_error))


  /* "cpp_common.pxd":469
 *     cpp_func._RF_OriginalScorer = cpp_func
 * 
 * cdef inline RF_Preprocessor CreateProcessorContext(RF_Preprocess preprocess) except *:             # <<<<<<<<<<<<<<
 *     cdef RF_Preprocessor context
 *     context.version = PREPROCESSOR_STRUCT_VERSION
 */
  __Pyx_TraceLine(469,0,__PYX_ERR(1, 469, __pyx_L1_error))


  /* "cpp_common.pxd":475
 *     return context
 * 
 * cdef inline void SetProcessorAttrs(cpp_func, py_func, RF_Preprocessor* context) except *:             # <<<<<<<<<<<<<<
 *     SetFuncAttrs(cpp_func, py_func)
 *     cpp_func._RF_Preprocess = PyCapsule_New(context, NULL, NULL)
 */
  __Pyx_TraceLine(475,0,__PYX_ERR(1, 475, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":4
 * # cython: language_level=3, binding=True, linetrace=True
 * 
 * from . import metrics_py             # <<<<<<<<<<<<<<
 * from ._initialize_cpp import Editops
 * import sys
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(0, 4, __pyx_L1_error))
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_metrics_py);
  __Pyx_GIVEREF(__pyx_n_s_metrics_py);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_metrics_py)) __PYX_ERR(0, 4, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s__52, __pyx_t_2, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_metrics_py, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":5
 * 
 * from . import metrics_py
 * from ._initialize_cpp import Editops             # <<<<<<<<<<<<<<
 * import sys
 * 
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(0, 5, __pyx_L1_error))
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Editops);
  __Pyx_GIVEREF(__pyx_n_s_Editops);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Editops)) __PYX_ERR(0, 5, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_initialize_cpp, __pyx_t_3, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":6
 * from . import metrics_py
 * from ._initialize_cpp import Editops
 * import sys             # <<<<<<<<<<<<<<
 * 
 * from rapidfuzz cimport (
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(0, 6, __pyx_L1_error))
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_sys, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_2) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":26
 * from ._initialize_cpp cimport Editops, RfEditops
 * 
 * pandas_NA = None             # <<<<<<<<<<<<<<
 * 
 * cdef inline void setupPandas() noexcept:
 */
  __Pyx_TraceLine(26,0,__PYX_ERR(0, 26, __pyx_L1_error))
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pandas_NA, Py_None) < 0) __PYX_ERR(0, 26, __pyx_L1_error)

  /* "rapidfuzz/distance/metrics_cpp.pyx":28
 * pandas_NA = None
 * 
 * cdef inline void setupPandas() noexcept:             # <<<<<<<<<<<<<<
 *     global pandas_NA
 *     if pandas_NA is None:
 */
  __Pyx_TraceLine(28,0,__PYX_ERR(0, 28, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":35
 *             pandas_NA = pandas.NA
 * 
 * setupPandas()             # <<<<<<<<<<<<<<
 * 
 * # required for preprocess_strings
 */
  __Pyx_TraceLine(35,0,__PYX_ERR(0, 35, __pyx_L1_error))
  __pyx_f_9rapidfuzz_8distance_11metrics_cpp_setupPandas();

  /* "rapidfuzz/distance/metrics_cpp.pyx":38
 * 
 * # required for preprocess_strings
 * from array import array             # <<<<<<<<<<<<<<
 * 
 * from cpp_common cimport (
 */
  __Pyx_TraceLine(38,0,__PYX_ERR(0, 38, __pyx_L1_error))
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_array);
  __Pyx_GIVEREF(__pyx_n_s_array);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_array)) __PYX_ERR(0, 38, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_array, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array, __pyx_t_2) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":236
 * 
 * 
 * def levenshtein_distance(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef size_t insertion, deletion, substitution
 */
  __Pyx_TraceLine(236,0,__PYX_ERR(0, 236, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_weights, ((PyObject*)__pyx_tuple__3)) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_hint, Py_None) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_1levenshtein_distance, 0, __pyx_n_s_levenshtein_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_levenshtein_distance, __pyx_t_2) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":249
 * 
 * 
 * def levenshtein_similarity(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef size_t insertion, deletion, substitution
 */
  __Pyx_TraceLine(249,0,__PYX_ERR(0, 249, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_weights, ((PyObject*)__pyx_tuple__3)) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_score_hint, Py_None) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_3levenshtein_similarity, 0, __pyx_n_s_levenshtein_similarity, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_levenshtein_similarity, __pyx_t_3) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":262
 * 
 * 
 * def levenshtein_normalized_distance(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(262,0,__PYX_ERR(0, 262, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_weights, ((PyObject*)__pyx_tuple__3)) < 0) __PYX_ERR(0, 262, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 262, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 262, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_hint, Py_None) < 0) __PYX_ERR(0, 262, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_5levenshtein_normalized_distance, 0, __pyx_n_s_levenshtein_normalized_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__6)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_levenshtein_normalized_distance, __pyx_t_2) < 0) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":279
 * 
 * 
 * def levenshtein_normalized_similarity(s1, s2, *, weights=(1,1,1), processor=None, score_cutoff=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(279,0,__PYX_ERR(0, 279, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_weights, ((PyObject*)__pyx_tuple__3)) < 0) __PYX_ERR(0, 279, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 279, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 279, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_score_hint, Py_None) < 0) __PYX_ERR(0, 279, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_7levenshtein_normalized_similarity, 0, __pyx_n_s_levenshtein_normalized_similarit, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_levenshtein_normalized_similarit, __pyx_t_3) < 0) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":296
 * 
 * 
 * def levenshtein_editops(s1, s2, *, processor=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */
  __Pyx_TraceLine(296,0,__PYX_ERR(0, 296, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 296, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_hint, Py_None) < 0) __PYX_ERR(0, 296, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_9levenshtein_editops, 0, __pyx_n_s_levenshtein_editops, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__8)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_levenshtein_editops, __pyx_t_2) < 0) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":306
 * 
 * 
 * def levenshtein_opcodes(s1, s2, *, processor=None, score_hint=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */
  __Pyx_TraceLine(306,0,__PYX_ERR(0, 306, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 306, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_score_hint, Py_None) < 0) __PYX_ERR(0, 306, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_11levenshtein_opcodes, 0, __pyx_n_s_levenshtein_opcodes, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_levenshtein_opcodes, __pyx_t_3) < 0) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":315
 *     return ops.as_opcodes()
 * 
 * cdef void KwargsDeinit(RF_Kwargs* self) noexcept:             # <<<<<<<<<<<<<<
 *     free(<void*>self.context)
 * 
 */
  __Pyx_TraceLine(315,0,__PYX_ERR(0, 315, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":318
 *     free(<void*>self.context)
 * 
 * cdef bool LevenshteinKwargsInit(RF_Kwargs* self, dict kwargs) except False:             # <<<<<<<<<<<<<<
 *     cdef size_t insertion, deletion, substitution
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>malloc(sizeof(LevenshteinWeightTable))
 */
  __Pyx_TraceLine(318,0,__PYX_ERR(0, 318, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":333
 *     return True
 * 
 * cdef bool GetScorerFlagsLevenshteinDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T
 */
  __Pyx_TraceLine(333,0,__PYX_ERR(0, 333, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":345
 *     return True
 * 
 * cdef bool GetScorerFlagsLevenshteinSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T
 */
  __Pyx_TraceLine(345,0,__PYX_ERR(0, 345, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":357
 *     return True
 * 
 * cdef bool GetScorerFlagsLevenshteinNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE
 */
  __Pyx_TraceLine(357,0,__PYX_ERR(0, 357, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":369
 *     return True
 * 
 * cdef bool GetScorerFlagsLevenshteinNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     cdef LevenshteinWeightTable* weights = <LevenshteinWeightTable*>self.context
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_NONE_IS_WORST_SCORE
 */
  __Pyx_TraceLine(369,0,__PYX_ERR(0, 369, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":381
 *     return True
 * 
 * cdef RF_Scorer LevenshteinDistanceContext = CreateScorerContext(LevenshteinKwargsInit, GetScorerFlagsLevenshteinDistance, LevenshteinDistanceInit, UncachedLevenshteinDistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(levenshtein_distance, metrics_py.levenshtein_distance, &LevenshteinDistanceContext)
 * 
 */
  __Pyx_TraceLine(381,0,__PYX_ERR(0, 381, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_LevenshteinDistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_9rapidfuzz_8distance_11metrics_cpp_LevenshteinKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLevenshteinDistance, LevenshteinDistanceInit, UncachedLevenshteinDistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":382
 * 
 * cdef RF_Scorer LevenshteinDistanceContext = CreateScorerContext(LevenshteinKwargsInit, GetScorerFlagsLevenshteinDistance, LevenshteinDistanceInit, UncachedLevenshteinDistanceFuncInit())
 * SetScorerAttrs(levenshtein_distance, metrics_py.levenshtein_distance, &LevenshteinDistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer LevenshteinSimilarityContext = CreateScorerContext(LevenshteinKwargsInit, GetScorerFlagsLevenshteinSimilarity, LevenshteinSimilarityInit, UncachedLevenshteinSimilarityFuncInit())
 */
  __Pyx_TraceLine(382,0,__PYX_ERR(0, 382, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_levenshtein_distance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_levenshtein_distance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_3, __pyx_t_4, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_LevenshteinDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":384
 * SetScorerAttrs(levenshtein_distance, metrics_py.levenshtein_distance, &LevenshteinDistanceContext)
 * 
 * cdef RF_Scorer LevenshteinSimilarityContext = CreateScorerContext(LevenshteinKwargsInit, GetScorerFlagsLevenshteinSimilarity, LevenshteinSimilarityInit, UncachedLevenshteinSimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(levenshtein_similarity, metrics_py.levenshtein_similarity, &LevenshteinSimilarityContext)
 * 
 */
  __Pyx_TraceLine(384,0,__PYX_ERR(0, 384, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_LevenshteinSimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_9rapidfuzz_8distance_11metrics_cpp_LevenshteinKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLevenshteinSimilarity, LevenshteinSimilarityInit, UncachedLevenshteinSimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":385
 * 
 * cdef RF_Scorer LevenshteinSimilarityContext = CreateScorerContext(LevenshteinKwargsInit, GetScorerFlagsLevenshteinSimilarity, LevenshteinSimilarityInit, UncachedLevenshteinSimilarityFuncInit())
 * SetScorerAttrs(levenshtein_similarity, metrics_py.levenshtein_similarity, &LevenshteinSimilarityContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer LevenshteinNormalizedDistanceContext = CreateScorerContext(LevenshteinKwargsInit, GetScorerFlagsLevenshteinNormalizedDistance, LevenshteinNormalizedDistanceInit, UncachedLevenshteinNormalizedDistanceFuncInit())
 */
  __Pyx_TraceLine(385,0,__PYX_ERR(0, 385, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_levenshtein_similarity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_levenshtein_similarity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_4, __pyx_t_2, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_LevenshteinSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":387
 * SetScorerAttrs(levenshtein_similarity, metrics_py.levenshtein_similarity, &LevenshteinSimilarityContext)
 * 
 * cdef RF_Scorer LevenshteinNormalizedDistanceContext = CreateScorerContext(LevenshteinKwargsInit, GetScorerFlagsLevenshteinNormalizedDistance, LevenshteinNormalizedDistanceInit, UncachedLevenshteinNormalizedDistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(levenshtein_normalized_distance, metrics_py.levenshtein_normalized_distance, &LevenshteinNormalizedDistanceContext)
 * 
 */
  __Pyx_TraceLine(387,0,__PYX_ERR(0, 387, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_LevenshteinNormalizedDistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_9rapidfuzz_8distance_11metrics_cpp_LevenshteinKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLevenshteinNormalizedDistance, LevenshteinNormalizedDistanceInit, UncachedLevenshteinNormalizedDistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":388
 * 
 * cdef RF_Scorer LevenshteinNormalizedDistanceContext = CreateScorerContext(LevenshteinKwargsInit, GetScorerFlagsLevenshteinNormalizedDistance, LevenshteinNormalizedDistanceInit, UncachedLevenshteinNormalizedDistanceFuncInit())
 * SetScorerAttrs(levenshtein_normalized_distance, metrics_py.levenshtein_normalized_distance, &LevenshteinNormalizedDistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer LevenshteinNormalizedSimilarityContext = CreateScorerContext(LevenshteinKwargsInit, GetScorerFlagsLevenshteinNormalizedSimilarity, LevenshteinNormalizedSimilarityInit, UncachedLevenshteinNormalizedSimilarityFuncInit())
 */
  __Pyx_TraceLine(388,0,__PYX_ERR(0, 388, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_levenshtein_normalized_distance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_levenshtein_normalized_distance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_2, __pyx_t_3, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_LevenshteinNormalizedDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":390
 * SetScorerAttrs(levenshtein_normalized_distance, metrics_py.levenshtein_normalized_distance, &LevenshteinNormalizedDistanceContext)
 * 
 * cdef RF_Scorer LevenshteinNormalizedSimilarityContext = CreateScorerContext(LevenshteinKwargsInit, GetScorerFlagsLevenshteinNormalizedSimilarity, LevenshteinNormalizedSimilarityInit, UncachedLevenshteinNormalizedSimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(levenshtein_normalized_similarity, metrics_py.levenshtein_normalized_similarity, &LevenshteinNormalizedSimilarityContext)
 * 
 */
  __Pyx_TraceLine(390,0,__PYX_ERR(0, 390, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_LevenshteinNormalizedSimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_9rapidfuzz_8distance_11metrics_cpp_LevenshteinKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLevenshteinNormalizedSimilarity, LevenshteinNormalizedSimilarityInit, UncachedLevenshteinNormalizedSimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":391
 * 
 * cdef RF_Scorer LevenshteinNormalizedSimilarityContext = CreateScorerContext(LevenshteinKwargsInit, GetScorerFlagsLevenshteinNormalizedSimilarity, LevenshteinNormalizedSimilarityInit, UncachedLevenshteinNormalizedSimilarityFuncInit())
 * SetScorerAttrs(levenshtein_normalized_similarity, metrics_py.levenshtein_normalized_similarity, &LevenshteinNormalizedSimilarityContext)             # <<<<<<<<<<<<<<
 * 
 * SetFuncAttrs(levenshtein_editops, metrics_py.levenshtein_editops)
 */
  __Pyx_TraceLine(391,0,__PYX_ERR(0, 391, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_levenshtein_normalized_similarit); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_levenshtein_normalized_similarit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_3, __pyx_t_4, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_LevenshteinNormalizedSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":393
 * SetScorerAttrs(levenshtein_normalized_similarity, metrics_py.levenshtein_normalized_similarity, &LevenshteinNormalizedSimilarityContext)
 * 
 * SetFuncAttrs(levenshtein_editops, metrics_py.levenshtein_editops)             # <<<<<<<<<<<<<<
 * SetFuncAttrs(levenshtein_opcodes, metrics_py.levenshtein_opcodes)
 * 
 */
  __Pyx_TraceLine(393,0,__PYX_ERR(0, 393, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_levenshtein_editops); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_levenshtein_editops); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_f_10cpp_common_SetFuncAttrs(__pyx_t_4, __pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":394
 * 
 * SetFuncAttrs(levenshtein_editops, metrics_py.levenshtein_editops)
 * SetFuncAttrs(levenshtein_opcodes, metrics_py.levenshtein_opcodes)             # <<<<<<<<<<<<<<
 * 
 * def damerau_levenshtein_distance(s1, s2, *, processor=None, score_cutoff=None):
 */
  __Pyx_TraceLine(394,0,__PYX_ERR(0, 394, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_levenshtein_opcodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_levenshtein_opcodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_f_10cpp_common_SetFuncAttrs(__pyx_t_2, __pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":396
 * SetFuncAttrs(levenshtein_opcodes, metrics_py.levenshtein_opcodes)
 * 
 * def damerau_levenshtein_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __Pyx_TraceLine(396,0,__PYX_ERR(0, 396, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 396, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 396, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_13damerau_levenshtein_distance, 0, __pyx_n_s_damerau_levenshtein_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__10)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_damerau_levenshtein_distance, __pyx_t_2) < 0) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":403
 * 
 * 
 * def damerau_levenshtein_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __Pyx_TraceLine(403,0,__PYX_ERR(0, 403, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 403, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 403, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_15damerau_levenshtein_similarity, 0, __pyx_n_s_damerau_levenshtein_similarity, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__11)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_damerau_levenshtein_similarity, __pyx_t_3) < 0) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":410
 * 
 * 
 * def damerau_levenshtein_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(410,0,__PYX_ERR(0, 410, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 410, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 410, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_17damerau_levenshtein_normalized_distance, 0, __pyx_n_s_damerau_levenshtein_normalized_d, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_damerau_levenshtein_normalized_d, __pyx_t_2) < 0) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":421
 * 
 * 
 * def damerau_levenshtein_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(421,0,__PYX_ERR(0, 421, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 421, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 421, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_19damerau_levenshtein_normalized_similarity, 0, __pyx_n_s_damerau_levenshtein_normalized_s, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_damerau_levenshtein_normalized_s, __pyx_t_3) < 0) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":431
 *     return damerau_levenshtein_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0
 */
  __Pyx_TraceLine(431,0,__PYX_ERR(0, 431, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":437
 *     return True
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0
 */
  __Pyx_TraceLine(437,0,__PYX_ERR(0, 437, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":443
 *     return True
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 */
  __Pyx_TraceLine(443,0,__PYX_ERR(0, 443, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":449
 *     return True
 * 
 * cdef bool GetScorerFlagsDamerauLevenshteinNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0
 */
  __Pyx_TraceLine(449,0,__PYX_ERR(0, 449, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":455
 *     return True
 * 
 * cdef RF_Scorer DamerauLevenshteinDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsDamerauLevenshteinDistance, DamerauLevenshteinDistanceInit, UncachedDamerauLevenshteinDistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(damerau_levenshtein_distance, metrics_py.damerau_levenshtein_distance, &DamerauLevenshteinDistanceContext)
 * 
 */
  __Pyx_TraceLine(455,0,__PYX_ERR(0, 455, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_DamerauLevenshteinDistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsDamerauLevenshteinDistance, DamerauLevenshteinDistanceInit, UncachedDamerauLevenshteinDistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":456
 * 
 * cdef RF_Scorer DamerauLevenshteinDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsDamerauLevenshteinDistance, DamerauLevenshteinDistanceInit, UncachedDamerauLevenshteinDistanceFuncInit())
 * SetScorerAttrs(damerau_levenshtein_distance, metrics_py.damerau_levenshtein_distance, &DamerauLevenshteinDistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer DamerauLevenshteinNormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsDamerauLevenshteinNormalizedDistance, DamerauLevenshteinNormalizedDistanceInit, UncachedDamerauLevenshteinNormalizedDistanceFuncInit())
 */
  __Pyx_TraceLine(456,0,__PYX_ERR(0, 456, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_damerau_levenshtein_distance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_damerau_levenshtein_distance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_3, __pyx_t_4, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_DamerauLevenshteinDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":458
 * SetScorerAttrs(damerau_levenshtein_distance, metrics_py.damerau_levenshtein_distance, &DamerauLevenshteinDistanceContext)
 * 
 * cdef RF_Scorer DamerauLevenshteinNormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsDamerauLevenshteinNormalizedDistance, DamerauLevenshteinNormalizedDistanceInit, UncachedDamerauLevenshteinNormalizedDistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(damerau_levenshtein_normalized_distance, metrics_py.damerau_levenshtein_normalized_distance, &DamerauLevenshteinNormalizedDistanceContext)
 * 
 */
  __Pyx_TraceLine(458,0,__PYX_ERR(0, 458, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_DamerauLevenshteinNormalizedDistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsDamerauLevenshteinNormalizedDistance, DamerauLevenshteinNormalizedDistanceInit, UncachedDamerauLevenshteinNormalizedDistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":459
 * 
 * cdef RF_Scorer DamerauLevenshteinNormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsDamerauLevenshteinNormalizedDistance, DamerauLevenshteinNormalizedDistanceInit, UncachedDamerauLevenshteinNormalizedDistanceFuncInit())
 * SetScorerAttrs(damerau_levenshtein_normalized_distance, metrics_py.damerau_levenshtein_normalized_distance, &DamerauLevenshteinNormalizedDistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer DamerauLevenshteinSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsDamerauLevenshteinSimilarity, DamerauLevenshteinSimilarityInit, UncachedDamerauLevenshteinSimilarityFuncInit())
 */
  __Pyx_TraceLine(459,0,__PYX_ERR(0, 459, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_damerau_levenshtein_normalized_d); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_damerau_levenshtein_normalized_d); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_4, __pyx_t_2, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_DamerauLevenshteinNormalizedDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":461
 * SetScorerAttrs(damerau_levenshtein_normalized_distance, metrics_py.damerau_levenshtein_normalized_distance, &DamerauLevenshteinNormalizedDistanceContext)
 * 
 * cdef RF_Scorer DamerauLevenshteinSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsDamerauLevenshteinSimilarity, DamerauLevenshteinSimilarityInit, UncachedDamerauLevenshteinSimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(damerau_levenshtein_similarity, metrics_py.damerau_levenshtein_similarity, &DamerauLevenshteinSimilarityContext)
 * 
 */
  __Pyx_TraceLine(461,0,__PYX_ERR(0, 461, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_DamerauLevenshteinSimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsDamerauLevenshteinSimilarity, DamerauLevenshteinSimilarityInit, UncachedDamerauLevenshteinSimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":462
 * 
 * cdef RF_Scorer DamerauLevenshteinSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsDamerauLevenshteinSimilarity, DamerauLevenshteinSimilarityInit, UncachedDamerauLevenshteinSimilarityFuncInit())
 * SetScorerAttrs(damerau_levenshtein_similarity, metrics_py.damerau_levenshtein_similarity, &DamerauLevenshteinSimilarityContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer DamerauLevenshteinNormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsDamerauLevenshteinNormalizedSimilarity, DamerauLevenshteinNormalizedSimilarityInit, UncachedDamerauLevenshteinNormalizedSimilarityFuncInit())
 */
  __Pyx_TraceLine(462,0,__PYX_ERR(0, 462, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_damerau_levenshtein_similarity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_damerau_levenshtein_similarity); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_2, __pyx_t_3, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_DamerauLevenshteinSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":464
 * SetScorerAttrs(damerau_levenshtein_similarity, metrics_py.damerau_levenshtein_similarity, &DamerauLevenshteinSimilarityContext)
 * 
 * cdef RF_Scorer DamerauLevenshteinNormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsDamerauLevenshteinNormalizedSimilarity, DamerauLevenshteinNormalizedSimilarityInit, UncachedDamerauLevenshteinNormalizedSimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(damerau_levenshtein_normalized_similarity, metrics_py.damerau_levenshtein_normalized_similarity, &DamerauLevenshteinNormalizedSimilarityContext)
 * 
 */
  __Pyx_TraceLine(464,0,__PYX_ERR(0, 464, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_DamerauLevenshteinNormalizedSimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsDamerauLevenshteinNormalizedSimilarity, DamerauLevenshteinNormalizedSimilarityInit, UncachedDamerauLevenshteinNormalizedSimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":465
 * 
 * cdef RF_Scorer DamerauLevenshteinNormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsDamerauLevenshteinNormalizedSimilarity, DamerauLevenshteinNormalizedSimilarityInit, UncachedDamerauLevenshteinNormalizedSimilarityFuncInit())
 * SetScorerAttrs(damerau_levenshtein_normalized_similarity, metrics_py.damerau_levenshtein_normalized_similarity, &DamerauLevenshteinNormalizedSimilarityContext)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(465,0,__PYX_ERR(0, 465, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_damerau_levenshtein_normalized_s); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_damerau_levenshtein_normalized_s); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_3, __pyx_t_4, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_DamerauLevenshteinNormalizedSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":468
 * 
 * 
 * def lcs_seq_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __Pyx_TraceLine(468,0,__PYX_ERR(0, 468, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 468, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 468, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_21lcs_seq_distance, 0, __pyx_n_s_lcs_seq_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lcs_seq_distance, __pyx_t_3) < 0) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":475
 * 
 * 
 * def lcs_seq_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __Pyx_TraceLine(475,0,__PYX_ERR(0, 475, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 475, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 475, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_23lcs_seq_similarity, 0, __pyx_n_s_lcs_seq_similarity, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lcs_seq_similarity, __pyx_t_4) < 0) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":482
 * 
 * 
 * def lcs_seq_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(482,0,__PYX_ERR(0, 482, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 482, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 482, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_25lcs_seq_normalized_distance, 0, __pyx_n_s_lcs_seq_normalized_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lcs_seq_normalized_distance, __pyx_t_3) < 0) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":493
 * 
 * 
 * def lcs_seq_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(493,0,__PYX_ERR(0, 493, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 493, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 493, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_27lcs_seq_normalized_similarity, 0, __pyx_n_s_lcs_seq_normalized_similarity, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__17)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lcs_seq_normalized_similarity, __pyx_t_4) < 0) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":504
 * 
 * 
 * def lcs_seq_editops(s1, s2, *, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */
  __Pyx_TraceLine(504,0,__PYX_ERR(0, 504, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 504, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_29lcs_seq_editops, 0, __pyx_n_s_lcs_seq_editops, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lcs_seq_editops, __pyx_t_3) < 0) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":513
 * 
 * 
 * def lcs_seq_opcodes(s1, s2, *, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */
  __Pyx_TraceLine(513,0,__PYX_ERR(0, 513, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 513, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_31lcs_seq_opcodes, 0, __pyx_n_s_lcs_seq_opcodes, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lcs_seq_opcodes, __pyx_t_4) < 0) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":522
 * 
 * 
 * cdef bool GetScorerFlagsLCSseqDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if LCSseqMultiStringSupport(self):
 */
  __Pyx_TraceLine(522,0,__PYX_ERR(0, 522, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":531
 *     return True
 * 
 * cdef bool GetScorerFlagsLCSseqNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if LCSseqMultiStringSupport(self):
 */
  __Pyx_TraceLine(531,0,__PYX_ERR(0, 531, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":540
 *     return True
 * 
 * cdef bool GetScorerFlagsLCSseqSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if LCSseqMultiStringSupport(self):
 */
  __Pyx_TraceLine(540,0,__PYX_ERR(0, 540, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":549
 *     return True
 * 
 * cdef bool GetScorerFlagsLCSseqNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if LCSseqMultiStringSupport(self):
 */
  __Pyx_TraceLine(549,0,__PYX_ERR(0, 549, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":558
 *     return True
 * 
 * cdef RF_Scorer LCSseqDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsLCSseqDistance, LCSseqDistanceInit, UncachedLCSseqDistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(lcs_seq_distance, metrics_py.lcs_seq_distance, &LCSseqDistanceContext)
 * 
 */
  __Pyx_TraceLine(558,0,__PYX_ERR(0, 558, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_LCSseqDistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLCSseqDistance, LCSseqDistanceInit, UncachedLCSseqDistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":559
 * 
 * cdef RF_Scorer LCSseqDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsLCSseqDistance, LCSseqDistanceInit, UncachedLCSseqDistanceFuncInit())
 * SetScorerAttrs(lcs_seq_distance, metrics_py.lcs_seq_distance, &LCSseqDistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer LCSseqNormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsLCSseqNormalizedDistance, LCSseqNormalizedDistanceInit, UncachedLCSseqNormalizedDistanceFuncInit())
 */
  __Pyx_TraceLine(559,0,__PYX_ERR(0, 559, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_lcs_seq_distance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_lcs_seq_distance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_4, __pyx_t_2, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_LCSseqDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":561
 * SetScorerAttrs(lcs_seq_distance, metrics_py.lcs_seq_distance, &LCSseqDistanceContext)
 * 
 * cdef RF_Scorer LCSseqNormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsLCSseqNormalizedDistance, LCSseqNormalizedDistanceInit, UncachedLCSseqNormalizedDistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(lcs_seq_normalized_distance, metrics_py.lcs_seq_normalized_distance, &LCSseqNormalizedDistanceContext)
 * 
 */
  __Pyx_TraceLine(561,0,__PYX_ERR(0, 561, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_LCSseqNormalizedDistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLCSseqNormalizedDistance, LCSseqNormalizedDistanceInit, UncachedLCSseqNormalizedDistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":562
 * 
 * cdef RF_Scorer LCSseqNormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsLCSseqNormalizedDistance, LCSseqNormalizedDistanceInit, UncachedLCSseqNormalizedDistanceFuncInit())
 * SetScorerAttrs(lcs_seq_normalized_distance, metrics_py.lcs_seq_normalized_distance, &LCSseqNormalizedDistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer LCSseqSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsLCSseqSimilarity, LCSseqSimilarityInit, UncachedLCSseqSimilarityFuncInit())
 */
  __Pyx_TraceLine(562,0,__PYX_ERR(0, 562, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_lcs_seq_normalized_distance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_lcs_seq_normalized_distance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_2, __pyx_t_3, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_LCSseqNormalizedDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":564
 * SetScorerAttrs(lcs_seq_normalized_distance, metrics_py.lcs_seq_normalized_distance, &LCSseqNormalizedDistanceContext)
 * 
 * cdef RF_Scorer LCSseqSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsLCSseqSimilarity, LCSseqSimilarityInit, UncachedLCSseqSimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(lcs_seq_similarity, metrics_py.lcs_seq_similarity, &LCSseqSimilarityContext)
 * 
 */
  __Pyx_TraceLine(564,0,__PYX_ERR(0, 564, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_LCSseqSimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLCSseqSimilarity, LCSseqSimilarityInit, UncachedLCSseqSimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":565
 * 
 * cdef RF_Scorer LCSseqSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsLCSseqSimilarity, LCSseqSimilarityInit, UncachedLCSseqSimilarityFuncInit())
 * SetScorerAttrs(lcs_seq_similarity, metrics_py.lcs_seq_similarity, &LCSseqSimilarityContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer LCSseqNormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsLCSseqNormalizedSimilarity, LCSseqNormalizedSimilarityInit, UncachedLCSseqNormalizedSimilarityFuncInit())
 */
  __Pyx_TraceLine(565,0,__PYX_ERR(0, 565, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_lcs_seq_similarity); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_lcs_seq_similarity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_3, __pyx_t_4, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_LCSseqSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":567
 * SetScorerAttrs(lcs_seq_similarity, metrics_py.lcs_seq_similarity, &LCSseqSimilarityContext)
 * 
 * cdef RF_Scorer LCSseqNormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsLCSseqNormalizedSimilarity, LCSseqNormalizedSimilarityInit, UncachedLCSseqNormalizedSimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(lcs_seq_normalized_similarity, metrics_py.lcs_seq_normalized_similarity, &LCSseqNormalizedSimilarityContext)
 * 
 */
  __Pyx_TraceLine(567,0,__PYX_ERR(0, 567, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_LCSseqNormalizedSimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsLCSseqNormalizedSimilarity, LCSseqNormalizedSimilarityInit, UncachedLCSseqNormalizedSimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":568
 * 
 * cdef RF_Scorer LCSseqNormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsLCSseqNormalizedSimilarity, LCSseqNormalizedSimilarityInit, UncachedLCSseqNormalizedSimilarityFuncInit())
 * SetScorerAttrs(lcs_seq_normalized_similarity, metrics_py.lcs_seq_normalized_similarity, &LCSseqNormalizedSimilarityContext)             # <<<<<<<<<<<<<<
 * 
 * SetFuncAttrs(lcs_seq_editops, metrics_py.lcs_seq_editops)
 */
  __Pyx_TraceLine(568,0,__PYX_ERR(0, 568, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_lcs_seq_normalized_similarity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_lcs_seq_normalized_similarity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_4, __pyx_t_2, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_LCSseqNormalizedSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":570
 * SetScorerAttrs(lcs_seq_normalized_similarity, metrics_py.lcs_seq_normalized_similarity, &LCSseqNormalizedSimilarityContext)
 * 
 * SetFuncAttrs(lcs_seq_editops, metrics_py.lcs_seq_editops)             # <<<<<<<<<<<<<<
 * SetFuncAttrs(lcs_seq_opcodes, metrics_py.lcs_seq_opcodes)
 * 
 */
  __Pyx_TraceLine(570,0,__PYX_ERR(0, 570, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_lcs_seq_editops); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_lcs_seq_editops); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_f_10cpp_common_SetFuncAttrs(__pyx_t_2, __pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":571
 * 
 * SetFuncAttrs(lcs_seq_editops, metrics_py.lcs_seq_editops)
 * SetFuncAttrs(lcs_seq_opcodes, metrics_py.lcs_seq_opcodes)             # <<<<<<<<<<<<<<
 * 
 * def indel_distance(s1, s2, *, processor=None, score_cutoff=None):
 */
  __Pyx_TraceLine(571,0,__PYX_ERR(0, 571, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_lcs_seq_opcodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_lcs_seq_opcodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_10cpp_common_SetFuncAttrs(__pyx_t_3, __pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":573
 * SetFuncAttrs(lcs_seq_opcodes, metrics_py.lcs_seq_opcodes)
 * 
 * def indel_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __Pyx_TraceLine(573,0,__PYX_ERR(0, 573, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 573, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 573, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_33indel_distance, 0, __pyx_n_s_indel_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_indel_distance, __pyx_t_3) < 0) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":580
 * 
 * 
 * def indel_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __Pyx_TraceLine(580,0,__PYX_ERR(0, 580, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 580, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 580, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_35indel_similarity, 0, __pyx_n_s_indel_similarity, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_indel_similarity, __pyx_t_4) < 0) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":587
 * 
 * 
 * def indel_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(587,0,__PYX_ERR(0, 587, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 587, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 587, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_37indel_normalized_distance, 0, __pyx_n_s_indel_normalized_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_indel_normalized_distance, __pyx_t_3) < 0) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":598
 * 
 * 
 * def indel_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(598,0,__PYX_ERR(0, 598, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 598, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 598, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_39indel_normalized_similarity, 0, __pyx_n_s_indel_normalized_similarity, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__23)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_indel_normalized_similarity, __pyx_t_4) < 0) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":609
 * 
 * 
 * def indel_editops(s1, s2, *, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */
  __Pyx_TraceLine(609,0,__PYX_ERR(0, 609, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 609, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_41indel_editops, 0, __pyx_n_s_indel_editops, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__24)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_indel_editops, __pyx_t_3) < 0) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":618
 * 
 * 
 * def indel_opcodes(s1, s2, *, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */
  __Pyx_TraceLine(618,0,__PYX_ERR(0, 618, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 618, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_43indel_opcodes, 0, __pyx_n_s_indel_opcodes, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_indel_opcodes, __pyx_t_4) < 0) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":627
 * 
 * 
 * cdef bool GetScorerFlagsIndelDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if IndelMultiStringSupport(self):
 */
  __Pyx_TraceLine(627,0,__PYX_ERR(0, 627, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":637
 * 
 * 
 * cdef bool GetScorerFlagsIndelNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if IndelMultiStringSupport(self):
 */
  __Pyx_TraceLine(637,0,__PYX_ERR(0, 637, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":646
 *     return True
 * 
 * cdef bool GetScorerFlagsIndelSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if IndelMultiStringSupport(self):
 */
  __Pyx_TraceLine(646,0,__PYX_ERR(0, 646, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":656
 * 
 * 
 * cdef bool GetScorerFlagsIndelNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if IndelMultiStringSupport(self):
 */
  __Pyx_TraceLine(656,0,__PYX_ERR(0, 656, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":666
 * 
 * 
 * cdef RF_Scorer IndelDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsIndelDistance, IndelDistanceInit, UncachedIndelDistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(indel_distance, metrics_py.indel_distance, &IndelDistanceContext)
 * 
 */
  __Pyx_TraceLine(666,0,__PYX_ERR(0, 666, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_IndelDistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsIndelDistance, IndelDistanceInit, UncachedIndelDistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":667
 * 
 * cdef RF_Scorer IndelDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsIndelDistance, IndelDistanceInit, UncachedIndelDistanceFuncInit())
 * SetScorerAttrs(indel_distance, metrics_py.indel_distance, &IndelDistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer IndelNormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsIndelNormalizedDistance, IndelNormalizedDistanceInit, UncachedIndelNormalizedDistanceFuncInit())
 */
  __Pyx_TraceLine(667,0,__PYX_ERR(0, 667, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_indel_distance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_indel_distance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_4, __pyx_t_2, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_IndelDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":669
 * SetScorerAttrs(indel_distance, metrics_py.indel_distance, &IndelDistanceContext)
 * 
 * cdef RF_Scorer IndelNormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsIndelNormalizedDistance, IndelNormalizedDistanceInit, UncachedIndelNormalizedDistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(indel_normalized_distance, metrics_py.indel_normalized_distance, &IndelNormalizedDistanceContext)
 * 
 */
  __Pyx_TraceLine(669,0,__PYX_ERR(0, 669, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_IndelNormalizedDistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsIndelNormalizedDistance, IndelNormalizedDistanceInit, UncachedIndelNormalizedDistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":670
 * 
 * cdef RF_Scorer IndelNormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsIndelNormalizedDistance, IndelNormalizedDistanceInit, UncachedIndelNormalizedDistanceFuncInit())
 * SetScorerAttrs(indel_normalized_distance, metrics_py.indel_normalized_distance, &IndelNormalizedDistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer IndelSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsIndelSimilarity, IndelSimilarityInit, UncachedIndelSimilarityFuncInit())
 */
  __Pyx_TraceLine(670,0,__PYX_ERR(0, 670, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_indel_normalized_distance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_indel_normalized_distance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_2, __pyx_t_3, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_IndelNormalizedDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":672
 * SetScorerAttrs(indel_normalized_distance, metrics_py.indel_normalized_distance, &IndelNormalizedDistanceContext)
 * 
 * cdef RF_Scorer IndelSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsIndelSimilarity, IndelSimilarityInit, UncachedIndelSimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(indel_similarity, metrics_py.indel_similarity, &IndelSimilarityContext)
 * 
 */
  __Pyx_TraceLine(672,0,__PYX_ERR(0, 672, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_IndelSimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsIndelSimilarity, IndelSimilarityInit, UncachedIndelSimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":673
 * 
 * cdef RF_Scorer IndelSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsIndelSimilarity, IndelSimilarityInit, UncachedIndelSimilarityFuncInit())
 * SetScorerAttrs(indel_similarity, metrics_py.indel_similarity, &IndelSimilarityContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer IndelNormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsIndelNormalizedSimilarity, IndelNormalizedSimilarityInit, UncachedIndelNormalizedSimilarityFuncInit())
 */
  __Pyx_TraceLine(673,0,__PYX_ERR(0, 673, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_indel_similarity); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_indel_similarity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_3, __pyx_t_4, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_IndelSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":675
 * SetScorerAttrs(indel_similarity, metrics_py.indel_similarity, &IndelSimilarityContext)
 * 
 * cdef RF_Scorer IndelNormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsIndelNormalizedSimilarity, IndelNormalizedSimilarityInit, UncachedIndelNormalizedSimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(indel_normalized_similarity, metrics_py.indel_normalized_similarity, &IndelNormalizedSimilarityContext)
 * 
 */
  __Pyx_TraceLine(675,0,__PYX_ERR(0, 675, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_IndelNormalizedSimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsIndelNormalizedSimilarity, IndelNormalizedSimilarityInit, UncachedIndelNormalizedSimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":676
 * 
 * cdef RF_Scorer IndelNormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsIndelNormalizedSimilarity, IndelNormalizedSimilarityInit, UncachedIndelNormalizedSimilarityFuncInit())
 * SetScorerAttrs(indel_normalized_similarity, metrics_py.indel_normalized_similarity, &IndelNormalizedSimilarityContext)             # <<<<<<<<<<<<<<
 * 
 * SetFuncAttrs(indel_editops, metrics_py.indel_editops)
 */
  __Pyx_TraceLine(676,0,__PYX_ERR(0, 676, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_indel_normalized_similarity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_indel_normalized_similarity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_4, __pyx_t_2, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_IndelNormalizedSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":678
 * SetScorerAttrs(indel_normalized_similarity, metrics_py.indel_normalized_similarity, &IndelNormalizedSimilarityContext)
 * 
 * SetFuncAttrs(indel_editops, metrics_py.indel_editops)             # <<<<<<<<<<<<<<
 * SetFuncAttrs(indel_opcodes, metrics_py.indel_opcodes)
 * 
 */
  __Pyx_TraceLine(678,0,__PYX_ERR(0, 678, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_indel_editops); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_indel_editops); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_f_10cpp_common_SetFuncAttrs(__pyx_t_2, __pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":679
 * 
 * SetFuncAttrs(indel_editops, metrics_py.indel_editops)
 * SetFuncAttrs(indel_opcodes, metrics_py.indel_opcodes)             # <<<<<<<<<<<<<<
 * 
 * def hamming_distance(s1, s2, *, pad=True, processor=None, score_cutoff=None):
 */
  __Pyx_TraceLine(679,0,__PYX_ERR(0, 679, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_indel_opcodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_indel_opcodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_10cpp_common_SetFuncAttrs(__pyx_t_3, __pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":681
 * SetFuncAttrs(indel_opcodes, metrics_py.indel_opcodes)
 * 
 * def hamming_distance(s1, s2, *, pad=True, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __Pyx_TraceLine(681,0,__PYX_ERR(0, 681, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_pad, ((PyObject *)Py_True)) < 0) __PYX_ERR(0, 681, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 681, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 681, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_45hamming_distance, 0, __pyx_n_s_hamming_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_hamming_distance, __pyx_t_3) < 0) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":688
 *     return hamming_distance_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)
 * 
 * def hamming_similarity(s1, s2, *, pad=True, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __Pyx_TraceLine(688,0,__PYX_ERR(0, 688, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_pad, ((PyObject *)Py_True)) < 0) __PYX_ERR(0, 688, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 688, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 688, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_47hamming_similarity, 0, __pyx_n_s_hamming_similarity, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_hamming_similarity, __pyx_t_4) < 0) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":695
 *     return hamming_similarity_func(s1_proc.string, s2_proc.string, pad, c_score_cutoff)
 * 
 * def hamming_normalized_distance(s1, s2, *, pad=True, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(695,0,__PYX_ERR(0, 695, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_pad, ((PyObject *)Py_True)) < 0) __PYX_ERR(0, 695, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 695, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 695, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_49hamming_normalized_distance, 0, __pyx_n_s_hamming_normalized_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_hamming_normalized_distance, __pyx_t_3) < 0) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":706
 * 
 * 
 * def hamming_normalized_similarity(s1, s2, *, pad=True, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(706,0,__PYX_ERR(0, 706, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_pad, ((PyObject *)Py_True)) < 0) __PYX_ERR(0, 706, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 706, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 706, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_51hamming_normalized_similarity, 0, __pyx_n_s_hamming_normalized_similarity, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_hamming_normalized_similarity, __pyx_t_4) < 0) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":717
 * 
 * 
 * def hamming_editops(s1, s2, *, pad=True, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */
  __Pyx_TraceLine(717,0,__PYX_ERR(0, 717, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_pad, ((PyObject *)Py_True)) < 0) __PYX_ERR(0, 717, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 717, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_53hamming_editops, 0, __pyx_n_s_hamming_editops, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_hamming_editops, __pyx_t_3) < 0) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":726
 * 
 * 
 * def hamming_opcodes(s1, s2, *, pad=True, processor=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     cdef Editops ops = Editops.__new__(Editops)
 */
  __Pyx_TraceLine(726,0,__PYX_ERR(0, 726, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_pad, ((PyObject *)Py_True)) < 0) __PYX_ERR(0, 726, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 726, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_55hamming_opcodes, 0, __pyx_n_s_hamming_opcodes, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_hamming_opcodes, __pyx_t_4) < 0) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":734
 *     return ops.as_opcodes()
 * 
 * cdef bool HammingKwargsInit(RF_Kwargs* self, dict kwargs) except False:             # <<<<<<<<<<<<<<
 *     cdef bool* pad = <bool*>malloc(sizeof(bool))
 * 
 */
  __Pyx_TraceLine(734,0,__PYX_ERR(0, 734, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":745
 *     return True
 * 
 * cdef bool GetScorerFlagsHammingDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0
 */
  __Pyx_TraceLine(745,0,__PYX_ERR(0, 745, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":751
 *     return True
 * 
 * cdef bool GetScorerFlagsHammingNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0
 */
  __Pyx_TraceLine(751,0,__PYX_ERR(0, 751, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":757
 *     return True
 * 
 * cdef bool GetScorerFlagsHammingSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 */
  __Pyx_TraceLine(757,0,__PYX_ERR(0, 757, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":763
 *     return True
 * 
 * cdef bool GetScorerFlagsHammingNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0
 */
  __Pyx_TraceLine(763,0,__PYX_ERR(0, 763, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":769
 *     return True
 * 
 * cdef RF_Scorer HammingDistanceContext = CreateScorerContext(HammingKwargsInit, GetScorerFlagsHammingDistance, HammingDistanceInit, UncachedHammingDistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(hamming_distance, metrics_py.hamming_distance, &HammingDistanceContext)
 * 
 */
  __Pyx_TraceLine(769,0,__PYX_ERR(0, 769, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_HammingDistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_9rapidfuzz_8distance_11metrics_cpp_HammingKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsHammingDistance, HammingDistanceInit, UncachedHammingDistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":770
 * 
 * cdef RF_Scorer HammingDistanceContext = CreateScorerContext(HammingKwargsInit, GetScorerFlagsHammingDistance, HammingDistanceInit, UncachedHammingDistanceFuncInit())
 * SetScorerAttrs(hamming_distance, metrics_py.hamming_distance, &HammingDistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer HammingNormalizedDistanceContext = CreateScorerContext(HammingKwargsInit, GetScorerFlagsHammingNormalizedDistance, HammingNormalizedDistanceInit, UncachedHammingNormalizedDistanceFuncInit())
 */
  __Pyx_TraceLine(770,0,__PYX_ERR(0, 770, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_hamming_distance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hamming_distance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_4, __pyx_t_2, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_HammingDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":772
 * SetScorerAttrs(hamming_distance, metrics_py.hamming_distance, &HammingDistanceContext)
 * 
 * cdef RF_Scorer HammingNormalizedDistanceContext = CreateScorerContext(HammingKwargsInit, GetScorerFlagsHammingNormalizedDistance, HammingNormalizedDistanceInit, UncachedHammingNormalizedDistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(hamming_normalized_distance, metrics_py.hamming_normalized_distance, &HammingNormalizedDistanceContext)
 * 
 */
  __Pyx_TraceLine(772,0,__PYX_ERR(0, 772, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_HammingNormalizedDistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_9rapidfuzz_8distance_11metrics_cpp_HammingKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsHammingNormalizedDistance, HammingNormalizedDistanceInit, UncachedHammingNormalizedDistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":773
 * 
 * cdef RF_Scorer HammingNormalizedDistanceContext = CreateScorerContext(HammingKwargsInit, GetScorerFlagsHammingNormalizedDistance, HammingNormalizedDistanceInit, UncachedHammingNormalizedDistanceFuncInit())
 * SetScorerAttrs(hamming_normalized_distance, metrics_py.hamming_normalized_distance, &HammingNormalizedDistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer HammingSimilarityContext = CreateScorerContext(HammingKwargsInit, GetScorerFlagsHammingSimilarity, HammingSimilarityInit, UncachedHammingSimilarityFuncInit())
 */
  __Pyx_TraceLine(773,0,__PYX_ERR(0, 773, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_hamming_normalized_distance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_hamming_normalized_distance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_2, __pyx_t_3, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_HammingNormalizedDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":775
 * SetScorerAttrs(hamming_normalized_distance, metrics_py.hamming_normalized_distance, &HammingNormalizedDistanceContext)
 * 
 * cdef RF_Scorer HammingSimilarityContext = CreateScorerContext(HammingKwargsInit, GetScorerFlagsHammingSimilarity, HammingSimilarityInit, UncachedHammingSimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(hamming_similarity, metrics_py.hamming_similarity, &HammingSimilarityContext)
 * 
 */
  __Pyx_TraceLine(775,0,__PYX_ERR(0, 775, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_HammingSimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_9rapidfuzz_8distance_11metrics_cpp_HammingKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsHammingSimilarity, HammingSimilarityInit, UncachedHammingSimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":776
 * 
 * cdef RF_Scorer HammingSimilarityContext = CreateScorerContext(HammingKwargsInit, GetScorerFlagsHammingSimilarity, HammingSimilarityInit, UncachedHammingSimilarityFuncInit())
 * SetScorerAttrs(hamming_similarity, metrics_py.hamming_similarity, &HammingSimilarityContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer HammingNormalizedSimilarityContext = CreateScorerContext(HammingKwargsInit, GetScorerFlagsHammingNormalizedSimilarity, HammingNormalizedSimilarityInit, UncachedHammingNormalizedSimilarityFuncInit())
 */
  __Pyx_TraceLine(776,0,__PYX_ERR(0, 776, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_hamming_similarity); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_hamming_similarity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_3, __pyx_t_4, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_HammingSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":778
 * SetScorerAttrs(hamming_similarity, metrics_py.hamming_similarity, &HammingSimilarityContext)
 * 
 * cdef RF_Scorer HammingNormalizedSimilarityContext = CreateScorerContext(HammingKwargsInit, GetScorerFlagsHammingNormalizedSimilarity, HammingNormalizedSimilarityInit, UncachedHammingNormalizedSimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(hamming_normalized_similarity, metrics_py.hamming_normalized_similarity, &HammingNormalizedSimilarityContext)
 * 
 */
  __Pyx_TraceLine(778,0,__PYX_ERR(0, 778, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_HammingNormalizedSimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_9rapidfuzz_8distance_11metrics_cpp_HammingKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsHammingNormalizedSimilarity, HammingNormalizedSimilarityInit, UncachedHammingNormalizedSimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":779
 * 
 * cdef RF_Scorer HammingNormalizedSimilarityContext = CreateScorerContext(HammingKwargsInit, GetScorerFlagsHammingNormalizedSimilarity, HammingNormalizedSimilarityInit, UncachedHammingNormalizedSimilarityFuncInit())
 * SetScorerAttrs(hamming_normalized_similarity, metrics_py.hamming_normalized_similarity, &HammingNormalizedSimilarityContext)             # <<<<<<<<<<<<<<
 * 
 * SetFuncAttrs(hamming_editops, metrics_py.hamming_editops)
 */
  __Pyx_TraceLine(779,0,__PYX_ERR(0, 779, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_hamming_normalized_similarity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hamming_normalized_similarity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_4, __pyx_t_2, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_HammingNormalizedSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":781
 * SetScorerAttrs(hamming_normalized_similarity, metrics_py.hamming_normalized_similarity, &HammingNormalizedSimilarityContext)
 * 
 * SetFuncAttrs(hamming_editops, metrics_py.hamming_editops)             # <<<<<<<<<<<<<<
 * SetFuncAttrs(hamming_opcodes, metrics_py.hamming_opcodes)
 * 
 */
  __Pyx_TraceLine(781,0,__PYX_ERR(0, 781, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_hamming_editops); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_hamming_editops); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_f_10cpp_common_SetFuncAttrs(__pyx_t_2, __pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":782
 * 
 * SetFuncAttrs(hamming_editops, metrics_py.hamming_editops)
 * SetFuncAttrs(hamming_opcodes, metrics_py.hamming_opcodes)             # <<<<<<<<<<<<<<
 * 
 * def osa_distance(s1, s2, *, processor=None, score_cutoff=None):
 */
  __Pyx_TraceLine(782,0,__PYX_ERR(0, 782, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_hamming_opcodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_hamming_opcodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_10cpp_common_SetFuncAttrs(__pyx_t_3, __pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":784
 * SetFuncAttrs(hamming_opcodes, metrics_py.hamming_opcodes)
 * 
 * def osa_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __Pyx_TraceLine(784,0,__PYX_ERR(0, 784, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 784, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 784, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_57osa_distance, 0, __pyx_n_s_osa_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_osa_distance, __pyx_t_3) < 0) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":791
 *     return osa_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def osa_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __Pyx_TraceLine(791,0,__PYX_ERR(0, 791, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 791, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 791, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_59osa_similarity, 0, __pyx_n_s_osa_similarity, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_osa_similarity, __pyx_t_4) < 0) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":798
 *     return osa_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def osa_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(798,0,__PYX_ERR(0, 798, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 798, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 798, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_61osa_normalized_distance, 0, __pyx_n_s_osa_normalized_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_osa_normalized_distance, __pyx_t_3) < 0) __PYX_ERR(0, 798, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":809
 * 
 * 
 * def osa_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(809,0,__PYX_ERR(0, 809, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 809, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 809, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_63osa_normalized_similarity, 0, __pyx_n_s_osa_normalized_similarity, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_osa_normalized_similarity, __pyx_t_4) < 0) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":820
 * 
 * 
 * cdef bool GetScorerFlagsOSADistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if OSAMultiStringSupport(self):
 */
  __Pyx_TraceLine(820,0,__PYX_ERR(0, 820, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":829
 *     return True
 * 
 * cdef bool GetScorerFlagsOSANormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if OSAMultiStringSupport(self):
 */
  __Pyx_TraceLine(829,0,__PYX_ERR(0, 829, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":838
 *     return True
 * 
 * cdef bool GetScorerFlagsOSASimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     if OSAMultiStringSupport(self):
 */
  __Pyx_TraceLine(838,0,__PYX_ERR(0, 838, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":847
 *     return True
 * 
 * cdef bool GetScorerFlagsOSANormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if OSAMultiStringSupport(self):
 */
  __Pyx_TraceLine(847,0,__PYX_ERR(0, 847, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":856
 *     return True
 * 
 * cdef RF_Scorer OSADistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsOSADistance, OSADistanceInit, UncachedOSADistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(osa_distance, metrics_py.osa_distance, &OSADistanceContext)
 * 
 */
  __Pyx_TraceLine(856,0,__PYX_ERR(0, 856, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_OSADistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsOSADistance, OSADistanceInit, UncachedOSADistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":857
 * 
 * cdef RF_Scorer OSADistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsOSADistance, OSADistanceInit, UncachedOSADistanceFuncInit())
 * SetScorerAttrs(osa_distance, metrics_py.osa_distance, &OSADistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer OSANormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsOSANormalizedDistance, OSANormalizedDistanceInit, UncachedOSANormalizedDistanceFuncInit())
 */
  __Pyx_TraceLine(857,0,__PYX_ERR(0, 857, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_osa_distance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_osa_distance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_4, __pyx_t_2, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_OSADistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":859
 * SetScorerAttrs(osa_distance, metrics_py.osa_distance, &OSADistanceContext)
 * 
 * cdef RF_Scorer OSANormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsOSANormalizedDistance, OSANormalizedDistanceInit, UncachedOSANormalizedDistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(osa_normalized_distance, metrics_py.osa_normalized_distance, &OSANormalizedDistanceContext)
 * 
 */
  __Pyx_TraceLine(859,0,__PYX_ERR(0, 859, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_OSANormalizedDistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsOSANormalizedDistance, OSANormalizedDistanceInit, UncachedOSANormalizedDistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":860
 * 
 * cdef RF_Scorer OSANormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsOSANormalizedDistance, OSANormalizedDistanceInit, UncachedOSANormalizedDistanceFuncInit())
 * SetScorerAttrs(osa_normalized_distance, metrics_py.osa_normalized_distance, &OSANormalizedDistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer OSASimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsOSASimilarity, OSASimilarityInit, UncachedOSASimilarityFuncInit())
 */
  __Pyx_TraceLine(860,0,__PYX_ERR(0, 860, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_osa_normalized_distance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_osa_normalized_distance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_2, __pyx_t_3, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_OSANormalizedDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":862
 * SetScorerAttrs(osa_normalized_distance, metrics_py.osa_normalized_distance, &OSANormalizedDistanceContext)
 * 
 * cdef RF_Scorer OSASimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsOSASimilarity, OSASimilarityInit, UncachedOSASimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(osa_similarity, metrics_py.osa_similarity, &OSASimilarityContext)
 * 
 */
  __Pyx_TraceLine(862,0,__PYX_ERR(0, 862, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_OSASimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsOSASimilarity, OSASimilarityInit, UncachedOSASimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":863
 * 
 * cdef RF_Scorer OSASimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsOSASimilarity, OSASimilarityInit, UncachedOSASimilarityFuncInit())
 * SetScorerAttrs(osa_similarity, metrics_py.osa_similarity, &OSASimilarityContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer OSANormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsOSANormalizedSimilarity, OSANormalizedSimilarityInit, UncachedOSANormalizedSimilarityFuncInit())
 */
  __Pyx_TraceLine(863,0,__PYX_ERR(0, 863, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_osa_similarity); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_osa_similarity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_3, __pyx_t_4, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_OSASimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":865
 * SetScorerAttrs(osa_similarity, metrics_py.osa_similarity, &OSASimilarityContext)
 * 
 * cdef RF_Scorer OSANormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsOSANormalizedSimilarity, OSANormalizedSimilarityInit, UncachedOSANormalizedSimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(osa_normalized_similarity, metrics_py.osa_normalized_similarity, &OSANormalizedSimilarityContext)
 * 
 */
  __Pyx_TraceLine(865,0,__PYX_ERR(0, 865, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_OSANormalizedSimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsOSANormalizedSimilarity, OSANormalizedSimilarityInit, UncachedOSANormalizedSimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":866
 * 
 * cdef RF_Scorer OSANormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsOSANormalizedSimilarity, OSANormalizedSimilarityInit, UncachedOSANormalizedSimilarityFuncInit())
 * SetScorerAttrs(osa_normalized_similarity, metrics_py.osa_normalized_similarity, &OSANormalizedSimilarityContext)             # <<<<<<<<<<<<<<
 * 
 * ###############################################
 */
  __Pyx_TraceLine(866,0,__PYX_ERR(0, 866, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_osa_normalized_similarity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_osa_normalized_similarity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_4, __pyx_t_2, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_OSANormalizedSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":872
 * ###############################################
 * 
 * def jaro_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(872,0,__PYX_ERR(0, 872, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 872, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 872, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_65jaro_distance, 0, __pyx_n_s_jaro_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__36)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_jaro_distance, __pyx_t_4) < 0) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":882
 *     return jaro_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def jaro_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(882,0,__PYX_ERR(0, 882, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 882, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 882, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_67jaro_similarity, 0, __pyx_n_s_jaro_similarity, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_jaro_similarity, __pyx_t_2) < 0) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":892
 *     return jaro_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def jaro_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(892,0,__PYX_ERR(0, 892, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 892, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 892, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_69jaro_normalized_distance, 0, __pyx_n_s_jaro_normalized_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_jaro_normalized_distance, __pyx_t_4) < 0) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":903
 * 
 * 
 * def jaro_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(903,0,__PYX_ERR(0, 903, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 903, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 903, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_71jaro_normalized_similarity, 0, __pyx_n_s_jaro_normalized_similarity, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_jaro_normalized_similarity, __pyx_t_2) < 0) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":913
 *     return jaro_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * cdef bool GetScorerFlagsJaroDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroMultiStringSupport(self):
 */
  __Pyx_TraceLine(913,0,__PYX_ERR(0, 913, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":922
 *     return True
 * 
 * cdef bool GetScorerFlagsJaroSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroMultiStringSupport(self):
 */
  __Pyx_TraceLine(922,0,__PYX_ERR(0, 922, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":931
 *     return True
 * 
 * cdef RF_Scorer JaroDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsJaroDistance, JaroDistanceInit, UncachedJaroDistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(jaro_distance, metrics_py.jaro_distance, &JaroDistanceContext)
 * SetScorerAttrs(jaro_normalized_distance, metrics_py.jaro_normalized_distance, &JaroDistanceContext)
 */
  __Pyx_TraceLine(931,0,__PYX_ERR(0, 931, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_JaroDistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsJaroDistance, JaroDistanceInit, UncachedJaroDistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":932
 * 
 * cdef RF_Scorer JaroDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsJaroDistance, JaroDistanceInit, UncachedJaroDistanceFuncInit())
 * SetScorerAttrs(jaro_distance, metrics_py.jaro_distance, &JaroDistanceContext)             # <<<<<<<<<<<<<<
 * SetScorerAttrs(jaro_normalized_distance, metrics_py.jaro_normalized_distance, &JaroDistanceContext)
 * 
 */
  __Pyx_TraceLine(932,0,__PYX_ERR(0, 932, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_jaro_distance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_jaro_distance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_2, __pyx_t_3, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_JaroDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":933
 * cdef RF_Scorer JaroDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsJaroDistance, JaroDistanceInit, UncachedJaroDistanceFuncInit())
 * SetScorerAttrs(jaro_distance, metrics_py.jaro_distance, &JaroDistanceContext)
 * SetScorerAttrs(jaro_normalized_distance, metrics_py.jaro_normalized_distance, &JaroDistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer JaroSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsJaroSimilarity, JaroSimilarityInit, UncachedJaroSimilarityFuncInit())
 */
  __Pyx_TraceLine(933,0,__PYX_ERR(0, 933, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_jaro_normalized_distance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 933, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 933, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_jaro_normalized_distance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 933, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_3, __pyx_t_4, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_JaroDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 933, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":935
 * SetScorerAttrs(jaro_normalized_distance, metrics_py.jaro_normalized_distance, &JaroDistanceContext)
 * 
 * cdef RF_Scorer JaroSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsJaroSimilarity, JaroSimilarityInit, UncachedJaroSimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(jaro_similarity, metrics_py.jaro_similarity, &JaroSimilarityContext)
 * SetScorerAttrs(jaro_normalized_similarity, metrics_py.jaro_normalized_similarity, &JaroSimilarityContext)
 */
  __Pyx_TraceLine(935,0,__PYX_ERR(0, 935, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_JaroSimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsJaroSimilarity, JaroSimilarityInit, UncachedJaroSimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":936
 * 
 * cdef RF_Scorer JaroSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsJaroSimilarity, JaroSimilarityInit, UncachedJaroSimilarityFuncInit())
 * SetScorerAttrs(jaro_similarity, metrics_py.jaro_similarity, &JaroSimilarityContext)             # <<<<<<<<<<<<<<
 * SetScorerAttrs(jaro_normalized_similarity, metrics_py.jaro_normalized_similarity, &JaroSimilarityContext)
 * 
 */
  __Pyx_TraceLine(936,0,__PYX_ERR(0, 936, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_jaro_similarity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_jaro_similarity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_4, __pyx_t_2, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_JaroSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":937
 * cdef RF_Scorer JaroSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsJaroSimilarity, JaroSimilarityInit, UncachedJaroSimilarityFuncInit())
 * SetScorerAttrs(jaro_similarity, metrics_py.jaro_similarity, &JaroSimilarityContext)
 * SetScorerAttrs(jaro_normalized_similarity, metrics_py.jaro_normalized_similarity, &JaroSimilarityContext)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(937,0,__PYX_ERR(0, 937, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_jaro_normalized_similarity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_jaro_normalized_similarity); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_2, __pyx_t_3, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_JaroSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":944
 * ###############################################
 * 
 * def jaro_winkler_distance(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(944,0,__PYX_ERR(0, 944, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble(((double)0.1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_prefix_weight, __pyx_t_2) < 0) __PYX_ERR(0, 944, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 944, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 944, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_73jaro_winkler_distance, 0, __pyx_n_s_jaro_winkler_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_jaro_winkler_distance, __pyx_t_2) < 0) __PYX_ERR(0, 944, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":958
 *     return jaro_winkler_distance_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 * def jaro_winkler_similarity(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(958,0,__PYX_ERR(0, 958, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(((double)0.1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_prefix_weight, __pyx_t_3) < 0) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 958, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 958, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_75jaro_winkler_similarity, 0, __pyx_n_s_jaro_winkler_similarity, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_jaro_winkler_similarity, __pyx_t_3) < 0) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":972
 *     return jaro_winkler_similarity_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 * def jaro_winkler_normalized_distance(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(972,0,__PYX_ERR(0, 972, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble(((double)0.1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_prefix_weight, __pyx_t_2) < 0) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 972, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 972, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_77jaro_winkler_normalized_distance, 0, __pyx_n_s_jaro_winkler_normalized_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__42)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_jaro_winkler_normalized_distance, __pyx_t_2) < 0) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":986
 *     return jaro_winkler_normalized_distance_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 * def jaro_winkler_normalized_similarity(s1, s2, *, double prefix_weight=0.1, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(986,0,__PYX_ERR(0, 986, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(((double)0.1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_prefix_weight, __pyx_t_3) < 0) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 986, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 986, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_79jaro_winkler_normalized_similarity, 0, __pyx_n_s_jaro_winkler_normalized_similari, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_jaro_winkler_normalized_similari, __pyx_t_3) < 0) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1000
 *     return jaro_winkler_normalized_similarity_func(s1_proc.string, s2_proc.string, prefix_weight, c_score_cutoff)
 * 
 * cdef bool JaroWinklerKwargsInit(RF_Kwargs * self, dict kwargs) except False:             # <<<<<<<<<<<<<<
 *     cdef double * prefix_weight = <double *> malloc(sizeof(double))
 * 
 */
  __Pyx_TraceLine(1000,0,__PYX_ERR(0, 1000, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":1016
 *     return True
 * 
 * cdef bool GetScorerFlagsJaroWinklerDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroWinklerMultiStringSupport(self):
 */
  __Pyx_TraceLine(1016,0,__PYX_ERR(0, 1016, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":1025
 *     return True
 * 
 * cdef bool GetScorerFlagsJaroWinklerSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     if JaroWinklerMultiStringSupport(self):
 */
  __Pyx_TraceLine(1025,0,__PYX_ERR(0, 1025, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":1034
 *     return True
 * 
 * cdef RF_Scorer JaroWinklerDistanceContext = CreateScorerContext(JaroWinklerKwargsInit, GetScorerFlagsJaroWinklerDistance, JaroWinklerDistanceInit, UncachedJaroWinklerDistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(jaro_winkler_distance, metrics_py.jaro_winkler_distance, &JaroWinklerDistanceContext)
 * SetScorerAttrs(jaro_winkler_normalized_distance, metrics_py.jaro_winkler_normalized_distance, &JaroWinklerDistanceContext)
 */
  __Pyx_TraceLine(1034,0,__PYX_ERR(0, 1034, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_JaroWinklerDistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_9rapidfuzz_8distance_11metrics_cpp_JaroWinklerKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsJaroWinklerDistance, JaroWinklerDistanceInit, UncachedJaroWinklerDistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":1035
 * 
 * cdef RF_Scorer JaroWinklerDistanceContext = CreateScorerContext(JaroWinklerKwargsInit, GetScorerFlagsJaroWinklerDistance, JaroWinklerDistanceInit, UncachedJaroWinklerDistanceFuncInit())
 * SetScorerAttrs(jaro_winkler_distance, metrics_py.jaro_winkler_distance, &JaroWinklerDistanceContext)             # <<<<<<<<<<<<<<
 * SetScorerAttrs(jaro_winkler_normalized_distance, metrics_py.jaro_winkler_normalized_distance, &JaroWinklerDistanceContext)
 * 
 */
  __Pyx_TraceLine(1035,0,__PYX_ERR(0, 1035, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_jaro_winkler_distance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_jaro_winkler_distance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_3, __pyx_t_4, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_JaroWinklerDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1036
 * cdef RF_Scorer JaroWinklerDistanceContext = CreateScorerContext(JaroWinklerKwargsInit, GetScorerFlagsJaroWinklerDistance, JaroWinklerDistanceInit, UncachedJaroWinklerDistanceFuncInit())
 * SetScorerAttrs(jaro_winkler_distance, metrics_py.jaro_winkler_distance, &JaroWinklerDistanceContext)
 * SetScorerAttrs(jaro_winkler_normalized_distance, metrics_py.jaro_winkler_normalized_distance, &JaroWinklerDistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer JaroWinklerSimilarityContext = CreateScorerContext(JaroWinklerKwargsInit, GetScorerFlagsJaroWinklerSimilarity, JaroWinklerSimilarityInit, UncachedJaroWinklerSimilarityFuncInit())
 */
  __Pyx_TraceLine(1036,0,__PYX_ERR(0, 1036, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_jaro_winkler_normalized_distance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_jaro_winkler_normalized_distance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_4, __pyx_t_2, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_JaroWinklerDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1038
 * SetScorerAttrs(jaro_winkler_normalized_distance, metrics_py.jaro_winkler_normalized_distance, &JaroWinklerDistanceContext)
 * 
 * cdef RF_Scorer JaroWinklerSimilarityContext = CreateScorerContext(JaroWinklerKwargsInit, GetScorerFlagsJaroWinklerSimilarity, JaroWinklerSimilarityInit, UncachedJaroWinklerSimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(jaro_winkler_similarity, metrics_py.jaro_winkler_similarity, &JaroWinklerSimilarityContext)
 * SetScorerAttrs(jaro_winkler_normalized_similarity, metrics_py.jaro_winkler_normalized_similarity, &JaroWinklerSimilarityContext)
 */
  __Pyx_TraceLine(1038,0,__PYX_ERR(0, 1038, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_JaroWinklerSimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_9rapidfuzz_8distance_11metrics_cpp_JaroWinklerKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsJaroWinklerSimilarity, JaroWinklerSimilarityInit, UncachedJaroWinklerSimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":1039
 * 
 * cdef RF_Scorer JaroWinklerSimilarityContext = CreateScorerContext(JaroWinklerKwargsInit, GetScorerFlagsJaroWinklerSimilarity, JaroWinklerSimilarityInit, UncachedJaroWinklerSimilarityFuncInit())
 * SetScorerAttrs(jaro_winkler_similarity, metrics_py.jaro_winkler_similarity, &JaroWinklerSimilarityContext)             # <<<<<<<<<<<<<<
 * SetScorerAttrs(jaro_winkler_normalized_similarity, metrics_py.jaro_winkler_normalized_similarity, &JaroWinklerSimilarityContext)
 * 
 */
  __Pyx_TraceLine(1039,0,__PYX_ERR(0, 1039, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_jaro_winkler_similarity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_jaro_winkler_similarity); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_2, __pyx_t_3, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_JaroWinklerSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1040
 * cdef RF_Scorer JaroWinklerSimilarityContext = CreateScorerContext(JaroWinklerKwargsInit, GetScorerFlagsJaroWinklerSimilarity, JaroWinklerSimilarityInit, UncachedJaroWinklerSimilarityFuncInit())
 * SetScorerAttrs(jaro_winkler_similarity, metrics_py.jaro_winkler_similarity, &JaroWinklerSimilarityContext)
 * SetScorerAttrs(jaro_winkler_normalized_similarity, metrics_py.jaro_winkler_normalized_similarity, &JaroWinklerSimilarityContext)             # <<<<<<<<<<<<<<
 * 
 * ###############################################
 */
  __Pyx_TraceLine(1040,0,__PYX_ERR(0, 1040, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_jaro_winkler_normalized_similari); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_jaro_winkler_normalized_similari); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_3, __pyx_t_4, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_JaroWinklerSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1046
 * ###############################################
 * 
 * def postfix_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __Pyx_TraceLine(1046,0,__PYX_ERR(0, 1046, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 1046, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 1046, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_81postfix_distance, 0, __pyx_n_s_postfix_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_postfix_distance, __pyx_t_3) < 0) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1053
 *     return postfix_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def postfix_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __Pyx_TraceLine(1053,0,__PYX_ERR(0, 1053, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 1053, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 1053, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_83postfix_similarity, 0, __pyx_n_s_postfix_similarity, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_postfix_similarity, __pyx_t_4) < 0) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1060
 *     return postfix_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def postfix_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(1060,0,__PYX_ERR(0, 1060, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 1060, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 1060, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_85postfix_normalized_distance, 0, __pyx_n_s_postfix_normalized_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_postfix_normalized_distance, __pyx_t_3) < 0) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1071
 * 
 * 
 * def postfix_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(1071,0,__PYX_ERR(0, 1071, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 1071, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 1071, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_87postfix_normalized_similarity, 0, __pyx_n_s_postfix_normalized_similarity, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_postfix_normalized_similarity, __pyx_t_4) < 0) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1081
 *     return postfix_normalized_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * cdef bool GetScorerFlagsPostfixDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0
 */
  __Pyx_TraceLine(1081,0,__PYX_ERR(0, 1081, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":1087
 *     return True
 * 
 * cdef bool GetScorerFlagsPostfixNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0
 */
  __Pyx_TraceLine(1087,0,__PYX_ERR(0, 1087, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":1093
 *     return True
 * 
 * cdef bool GetScorerFlagsPostfixSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 */
  __Pyx_TraceLine(1093,0,__PYX_ERR(0, 1093, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":1099
 *     return True
 * 
 * cdef bool GetScorerFlagsPostfixNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0
 */
  __Pyx_TraceLine(1099,0,__PYX_ERR(0, 1099, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":1105
 *     return True
 * 
 * cdef RF_Scorer PostfixDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPostfixDistance, PostfixDistanceInit, UncachedPostfixDistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(postfix_distance, metrics_py.postfix_distance, &PostfixDistanceContext)
 * 
 */
  __Pyx_TraceLine(1105,0,__PYX_ERR(0, 1105, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_PostfixDistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPostfixDistance, PostfixDistanceInit, UncachedPostfixDistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":1106
 * 
 * cdef RF_Scorer PostfixDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPostfixDistance, PostfixDistanceInit, UncachedPostfixDistanceFuncInit())
 * SetScorerAttrs(postfix_distance, metrics_py.postfix_distance, &PostfixDistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer PostfixNormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPostfixNormalizedDistance, PostfixNormalizedDistanceInit, UncachedPostfixNormalizedDistanceFuncInit())
 */
  __Pyx_TraceLine(1106,0,__PYX_ERR(0, 1106, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_postfix_distance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_postfix_distance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_4, __pyx_t_2, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_PostfixDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1108
 * SetScorerAttrs(postfix_distance, metrics_py.postfix_distance, &PostfixDistanceContext)
 * 
 * cdef RF_Scorer PostfixNormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPostfixNormalizedDistance, PostfixNormalizedDistanceInit, UncachedPostfixNormalizedDistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(postfix_normalized_distance, metrics_py.postfix_normalized_distance, &PostfixNormalizedDistanceContext)
 * 
 */
  __Pyx_TraceLine(1108,0,__PYX_ERR(0, 1108, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_PostfixNormalizedDistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPostfixNormalizedDistance, PostfixNormalizedDistanceInit, UncachedPostfixNormalizedDistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":1109
 * 
 * cdef RF_Scorer PostfixNormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPostfixNormalizedDistance, PostfixNormalizedDistanceInit, UncachedPostfixNormalizedDistanceFuncInit())
 * SetScorerAttrs(postfix_normalized_distance, metrics_py.postfix_normalized_distance, &PostfixNormalizedDistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer PostfixSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPostfixSimilarity, PostfixSimilarityInit, UncachedPostfixSimilarityFuncInit())
 */
  __Pyx_TraceLine(1109,0,__PYX_ERR(0, 1109, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_postfix_normalized_distance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_postfix_normalized_distance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_2, __pyx_t_3, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_PostfixNormalizedDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1111
 * SetScorerAttrs(postfix_normalized_distance, metrics_py.postfix_normalized_distance, &PostfixNormalizedDistanceContext)
 * 
 * cdef RF_Scorer PostfixSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPostfixSimilarity, PostfixSimilarityInit, UncachedPostfixSimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(postfix_similarity, metrics_py.postfix_similarity, &PostfixSimilarityContext)
 * 
 */
  __Pyx_TraceLine(1111,0,__PYX_ERR(0, 1111, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_PostfixSimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPostfixSimilarity, PostfixSimilarityInit, UncachedPostfixSimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":1112
 * 
 * cdef RF_Scorer PostfixSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPostfixSimilarity, PostfixSimilarityInit, UncachedPostfixSimilarityFuncInit())
 * SetScorerAttrs(postfix_similarity, metrics_py.postfix_similarity, &PostfixSimilarityContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer PostfixNormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPostfixNormalizedSimilarity, PostfixNormalizedSimilarityInit, UncachedPostfixNormalizedSimilarityFuncInit())
 */
  __Pyx_TraceLine(1112,0,__PYX_ERR(0, 1112, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_postfix_similarity); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_postfix_similarity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_3, __pyx_t_4, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_PostfixSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1114
 * SetScorerAttrs(postfix_similarity, metrics_py.postfix_similarity, &PostfixSimilarityContext)
 * 
 * cdef RF_Scorer PostfixNormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPostfixNormalizedSimilarity, PostfixNormalizedSimilarityInit, UncachedPostfixNormalizedSimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(postfix_normalized_similarity, metrics_py.postfix_normalized_similarity, &PostfixNormalizedSimilarityContext)
 * 
 */
  __Pyx_TraceLine(1114,0,__PYX_ERR(0, 1114, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_PostfixNormalizedSimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPostfixNormalizedSimilarity, PostfixNormalizedSimilarityInit, UncachedPostfixNormalizedSimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":1115
 * 
 * cdef RF_Scorer PostfixNormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPostfixNormalizedSimilarity, PostfixNormalizedSimilarityInit, UncachedPostfixNormalizedSimilarityFuncInit())
 * SetScorerAttrs(postfix_normalized_similarity, metrics_py.postfix_normalized_similarity, &PostfixNormalizedSimilarityContext)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(1115,0,__PYX_ERR(0, 1115, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_postfix_normalized_similarity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_postfix_normalized_similarity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_4, __pyx_t_2, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_PostfixNormalizedSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1122
 * ###############################################
 * 
 * def prefix_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, SIZE_MAX, 0)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __Pyx_TraceLine(1122,0,__PYX_ERR(0, 1122, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 1122, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 1122, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_89prefix_distance, 0, __pyx_n_s_prefix_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_prefix_distance, __pyx_t_4) < 0) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1129
 *     return prefix_distance_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def prefix_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef size_t c_score_cutoff = get_score_cutoff_size_t(score_cutoff, 0, SIZE_MAX)
 *     cdef RF_StringWrapper s1_proc, s2_proc
 */
  __Pyx_TraceLine(1129,0,__PYX_ERR(0, 1129, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 1129, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 1129, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_91prefix_similarity, 0, __pyx_n_s_prefix_similarity, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_prefix_similarity, __pyx_t_2) < 0) __PYX_ERR(0, 1129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1136
 *     return prefix_similarity_func(s1_proc.string, s2_proc.string, c_score_cutoff)
 * 
 * def prefix_normalized_distance(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(1136,0,__PYX_ERR(0, 1136, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 1136, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 1136, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_93prefix_normalized_distance, 0, __pyx_n_s_prefix_normalized_distance, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_prefix_normalized_distance, __pyx_t_4) < 0) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1147
 * 
 * 
 * def prefix_normalized_similarity(s1, s2, *, processor=None, score_cutoff=None):             # <<<<<<<<<<<<<<
 *     cdef RF_StringWrapper s1_proc, s2_proc
 *     setupPandas()
 */
  __Pyx_TraceLine(1147,0,__PYX_ERR(0, 1147, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_processor, Py_None) < 0) __PYX_ERR(0, 1147, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_score_cutoff, Py_None) < 0) __PYX_ERR(0, 1147, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9rapidfuzz_8distance_11metrics_cpp_95prefix_normalized_similarity, 0, __pyx_n_s_prefix_normalized_similarity, NULL, __pyx_n_s_rapidfuzz_distance_metrics_cpp, __pyx_d, ((PyObject *)__pyx_codeobj__51)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_prefix_normalized_similarity, __pyx_t_2) < 0) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1158
 * 
 * 
 * cdef bool GetScorerFlagsPrefixDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = 0
 */
  __Pyx_TraceLine(1158,0,__PYX_ERR(0, 1158, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":1164
 *     return True
 * 
 * cdef bool GetScorerFlagsPrefixNormalizedDistance(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 0.0
 */
  __Pyx_TraceLine(1164,0,__PYX_ERR(0, 1164, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":1170
 *     return True
 * 
 * cdef bool GetScorerFlagsPrefixSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_SIZE_T | RF_SCORER_FLAG_SYMMETRIC
 *     scorer_flags.optimal_score.sizet = SIZE_MAX
 */
  __Pyx_TraceLine(1170,0,__PYX_ERR(0, 1170, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":1176
 *     return True
 * 
 * cdef bool GetScorerFlagsPrefixNormalizedSimilarity(const RF_Kwargs* self, RF_ScorerFlags* scorer_flags) except False nogil:             # <<<<<<<<<<<<<<
 *     scorer_flags.flags = RF_SCORER_FLAG_RESULT_F64 | RF_SCORER_FLAG_SYMMETRIC | RF_SCORER_NONE_IS_WORST_SCORE
 *     scorer_flags.optimal_score.f64 = 1.0
 */
  __Pyx_TraceLine(1176,0,__PYX_ERR(0, 1176, __pyx_L1_error))


  /* "rapidfuzz/distance/metrics_cpp.pyx":1182
 *     return True
 * 
 * cdef RF_Scorer PrefixDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPrefixDistance, PrefixDistanceInit, UncachedPrefixDistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(prefix_distance, metrics_py.prefix_distance, &PrefixDistanceContext)
 * 
 */
  __Pyx_TraceLine(1182,0,__PYX_ERR(0, 1182, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_PrefixDistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPrefixDistance, PrefixDistanceInit, UncachedPrefixDistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":1183
 * 
 * cdef RF_Scorer PrefixDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPrefixDistance, PrefixDistanceInit, UncachedPrefixDistanceFuncInit())
 * SetScorerAttrs(prefix_distance, metrics_py.prefix_distance, &PrefixDistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer PrefixNormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPrefixNormalizedDistance, PrefixNormalizedDistanceInit, UncachedPrefixNormalizedDistanceFuncInit())
 */
  __Pyx_TraceLine(1183,0,__PYX_ERR(0, 1183, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_prefix_distance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_prefix_distance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_2, __pyx_t_3, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_PrefixDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1185
 * SetScorerAttrs(prefix_distance, metrics_py.prefix_distance, &PrefixDistanceContext)
 * 
 * cdef RF_Scorer PrefixNormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPrefixNormalizedDistance, PrefixNormalizedDistanceInit, UncachedPrefixNormalizedDistanceFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(prefix_normalized_distance, metrics_py.prefix_normalized_distance, &PrefixNormalizedDistanceContext)
 * 
 */
  __Pyx_TraceLine(1185,0,__PYX_ERR(0, 1185, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_PrefixNormalizedDistanceContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPrefixNormalizedDistance, PrefixNormalizedDistanceInit, UncachedPrefixNormalizedDistanceFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":1186
 * 
 * cdef RF_Scorer PrefixNormalizedDistanceContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPrefixNormalizedDistance, PrefixNormalizedDistanceInit, UncachedPrefixNormalizedDistanceFuncInit())
 * SetScorerAttrs(prefix_normalized_distance, metrics_py.prefix_normalized_distance, &PrefixNormalizedDistanceContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer PrefixSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPrefixSimilarity, PrefixSimilarityInit, UncachedPrefixSimilarityFuncInit())
 */
  __Pyx_TraceLine(1186,0,__PYX_ERR(0, 1186, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_prefix_normalized_distance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_prefix_normalized_distance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_3, __pyx_t_4, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_PrefixNormalizedDistanceContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1188
 * SetScorerAttrs(prefix_normalized_distance, metrics_py.prefix_normalized_distance, &PrefixNormalizedDistanceContext)
 * 
 * cdef RF_Scorer PrefixSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPrefixSimilarity, PrefixSimilarityInit, UncachedPrefixSimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(prefix_similarity, metrics_py.prefix_similarity, &PrefixSimilarityContext)
 * 
 */
  __Pyx_TraceLine(1188,0,__PYX_ERR(0, 1188, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_PrefixSimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPrefixSimilarity, PrefixSimilarityInit, UncachedPrefixSimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":1189
 * 
 * cdef RF_Scorer PrefixSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPrefixSimilarity, PrefixSimilarityInit, UncachedPrefixSimilarityFuncInit())
 * SetScorerAttrs(prefix_similarity, metrics_py.prefix_similarity, &PrefixSimilarityContext)             # <<<<<<<<<<<<<<
 * 
 * cdef RF_Scorer PrefixNormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPrefixNormalizedSimilarity, PrefixNormalizedSimilarityInit, UncachedPrefixNormalizedSimilarityFuncInit())
 */
  __Pyx_TraceLine(1189,0,__PYX_ERR(0, 1189, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_prefix_similarity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_prefix_similarity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_4, __pyx_t_2, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_PrefixSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1191
 * SetScorerAttrs(prefix_similarity, metrics_py.prefix_similarity, &PrefixSimilarityContext)
 * 
 * cdef RF_Scorer PrefixNormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPrefixNormalizedSimilarity, PrefixNormalizedSimilarityInit, UncachedPrefixNormalizedSimilarityFuncInit())             # <<<<<<<<<<<<<<
 * SetScorerAttrs(prefix_normalized_similarity, metrics_py.prefix_normalized_similarity, &PrefixNormalizedSimilarityContext)
 */
  __Pyx_TraceLine(1191,0,__PYX_ERR(0, 1191, __pyx_L1_error))
  __pyx_v_9rapidfuzz_8distance_11metrics_cpp_PrefixNormalizedSimilarityContext = __pyx_f_10cpp_common_CreateScorerContext(__pyx_f_10cpp_common_NoKwargsInit, __pyx_f_9rapidfuzz_8distance_11metrics_cpp_GetScorerFlagsPrefixNormalizedSimilarity, PrefixNormalizedSimilarityInit, UncachedPrefixNormalizedSimilarityFuncInit());

  /* "rapidfuzz/distance/metrics_cpp.pyx":1192
 * 
 * cdef RF_Scorer PrefixNormalizedSimilarityContext = CreateScorerContext(NoKwargsInit, GetScorerFlagsPrefixNormalizedSimilarity, PrefixNormalizedSimilarityInit, UncachedPrefixNormalizedSimilarityFuncInit())
 * SetScorerAttrs(prefix_normalized_similarity, metrics_py.prefix_normalized_similarity, &PrefixNormalizedSimilarityContext)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(1192,0,__PYX_ERR(0, 1192, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_prefix_normalized_similarity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_metrics_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_prefix_normalized_similarity); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_f_10cpp_common_SetScorerAttrs(__pyx_t_2, __pyx_t_3, (&__pyx_v_9rapidfuzz_8distance_11metrics_cpp_PrefixNormalizedSimilarityContext)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rapidfuzz/distance/metrics_cpp.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * # cython: language_level=3, binding=True, linetrace=True
 * 
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(0, 1, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init rapidfuzz.distance.metrics_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init rapidfuzz.distance.metrics_cpp");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    __Pyx_EnterTracing(tstate);
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    __Pyx_LeaveTracing(tstate);
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return __Pyx_IsTracing(tstate, 0, 0) && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyIntCompare */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 1;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        return (a == b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) == 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 0;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 0;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal == 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        return ((double)a == (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    CYTHON_UNUSED_VAR(clineno);
    CYTHON_UNUSED_VAR(lineno);
    CYTHON_UNUSED_VAR(filename);
    CYTHON_MAYBE_UNUSED_VAR(nogil);
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(0);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result;
    if (unlikely(!s)) return NULL;
    result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if PY_VERSION_HEX >= 0x030d0000
            if (unlikely(PyUnicode_CopyCharacters(result_uval, char_pos, uval, 0, ulength) < 0)) goto bad;
            #elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSsize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_size_t(size_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(size_t)*3+2];
    char *dpos, *end = digits + sizeof(size_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    size_t remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (size_t) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (size_t) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (size_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* GetAttr3 */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
#endif
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    int res = PyObject_GetOptionalAttr(o, n, &r);
    return (res != 0) ? r : __Pyx_NewRef(d);
#else
  #if CYTHON_USE_TYPE_SLOTS
    if (likely(PyString_Check(n))) {
        r = __Pyx_PyObject_GetAttrStrNoError(o, n);
        if (unlikely(!r) && likely(!PyErr_Occurred())) {
            r = __Pyx_NewRef(d);
        }
        return r;
    }
  #endif
    r = PyObject_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
#endif
}

/* UnpackUnboundCMethod */
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *args, PyObject *kwargs) {
    PyObject *result;
    PyObject *selfless_args = PyTuple_GetSlice(args, 1, PyTuple_Size(args));
    if (unlikely(!selfless_args)) return NULL;
    result = PyObject_Call(method, selfless_args, kwargs);
    Py_DECREF(selfless_args);
    return result;
}
static PyMethodDef __Pyx_UnboundCMethod_Def = {
     "CythonUnboundCMethod",
     __PYX_REINTERPRET_FUNCION(PyCFunction, __Pyx_SelflessCall),
     METH_VARARGS | METH_KEYWORDS,
     NULL
};
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #else
    if (likely(!__Pyx_CyOrPyCFunction_Check(method)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    } else
#endif
#if CYTHON_COMPILING_IN_PYPY
#else
    if (PyCFunction_Check(method))
#endif
    {
        PyObject *self;
        int self_found;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        self = PyObject_GetAttrString(method, "__self__");
        if (!self) {
            PyErr_Clear();
        }
#else
        self = PyCFunction_GET_SELF(method);
#endif
        self_found = (self && self != Py_None);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        Py_XDECREF(self);
#endif
        if (self_found) {
            PyObject *unbound_method = PyCFunction_New(&__Pyx_UnboundCMethod_Def, method);
            if (unlikely(!unbound_method)) return -1;
            Py_DECREF(method);
            target->method = unbound_method;
        }
    }
    return 0;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_keys */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (!r) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if ((PY_VERSION_HEX >= 0x030600B1) && flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            #else
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            #endif
        } else if ((PY_VERSION_HEX >= 0x030700A0) && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_11
#define __PYX_HAVE_RT_ImportType_3_0_11
static PyTypeObject *__Pyx_ImportType_3_0_11(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_11 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_11 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_11 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__53);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__54;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if PY_VERSION_HEX >= 0x030d00A4
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* UnicodeAsUCS4 */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject* x) {
   Py_ssize_t length;
   #if CYTHON_PEP393_ENABLED
   length = PyUnicode_GET_LENGTH(x);
   if (likely(length == 1)) {
       return PyUnicode_READ_CHAR(x, 0);
   }
   #else
   length = PyUnicode_GET_SIZE(x);
   if (likely(length == 1)) {
       return PyUnicode_AS_UNICODE(x)[0];
   }
   #if Py_UNICODE_SIZE == 2
   else if (PyUnicode_GET_SIZE(x) == 2) {
       Py_UCS4 high_val = PyUnicode_AS_UNICODE(x)[0];
       if (high_val >= 0xD800 && high_val <= 0xDBFF) {
           Py_UCS4 low_val = PyUnicode_AS_UNICODE(x)[1];
           if (low_val >= 0xDC00 && low_val <= 0xDFFF) {
               return 0x10000 + (((high_val & ((1<<10)-1)) << 10) | (low_val & ((1<<10)-1)));
           }
       }
   }
   #endif
   #endif
   PyErr_Format(PyExc_ValueError,
                "only single character unicode strings can be converted to Py_UCS4, "
                "got length %" CYTHON_FORMAT_SSIZE_T "d", length);
   return (Py_UCS4)-1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (size_t) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(size_t) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(size_t) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        size_t val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (size_t) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (size_t) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (size_t) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (size_t) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((size_t) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((size_t) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (size_t) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int64_t));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int64_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int64_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 2 * PyLong_SHIFT)) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 3 * PyLong_SHIFT)) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 4 * PyLong_SHIFT)) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int64_t) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int64_t) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int64_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int64_t) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int64_t) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int64_t val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int64_t) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int64_t) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int64_t) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int64_t) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int64_t) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int64_t) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int64_t) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int64_t) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int64_t) 1) << (sizeof(int64_t) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int64_t) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(uint64_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(uint64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT)) {
                            return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(uint64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT)) {
                            return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(uint64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT)) {
                            return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (uint64_t) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(uint64_t) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(uint64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(uint64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(uint64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(uint64_t) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(uint64_t) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        uint64_t val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (uint64_t) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (uint64_t) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (uint64_t) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (uint64_t) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(uint64_t) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((uint64_t) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(uint64_t) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((uint64_t) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((uint64_t) 1) << (sizeof(uint64_t) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (uint64_t) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* ObjectAsUCS4 */
static Py_UCS4 __Pyx__PyObject_AsPy_UCS4_raise_error(long ival) {
   if (ival < 0) {
       if (!PyErr_Occurred())
           PyErr_SetString(PyExc_OverflowError,
                           "cannot convert negative value to Py_UCS4");
   } else {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to Py_UCS4");
   }
   return (Py_UCS4)-1;
}
static Py_UCS4 __Pyx__PyObject_AsPy_UCS4(PyObject* x) {
   long ival;
   ival = __Pyx_PyInt_As_long(x);
   if (unlikely(!__Pyx_is_valid_index(ival, 1114111 + 1))) {
       return __Pyx__PyObject_AsPy_UCS4_raise_error(ival);
   }
   return (Py_UCS4)ival;
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__64);
    }
    return name;
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (long) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(long) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(long) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        long val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (long) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (long) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (long) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (long) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((long) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((long) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
