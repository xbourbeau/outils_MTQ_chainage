# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OutilsMTQ
                                 A QGIS plugin
 Regroupe les outils pratiques
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-09-23
        copyright            : (C) 2021 by Xavier Bourbeau
        email                : xavier.bourbeau@transports.gouv.qc.ca
        git sha              : $Format:%H$
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
 This script initializes the plugin, making it known to QGIS.
"""

from qgis.core import QgsProcessingProvider
from ..processing_algorithm.point_de_chainage_sur_rtss import generateChainagePointOnRTSS
from ..processing_algorithm.geocodage_inverse import GeocodageInverse
from ..processing_algorithm.geocode_point_rtss import GeocodePoint
from ..processing_algorithm.geocode_ligne_rtss import GeocodeLine
from ..processing_algorithm.create_perpendicular_line_along_line import generatePerpendicularLines
from ..processing_algorithm.create_transect_along_rtss import generateTransect


class Provider(QgsProcessingProvider):
    
    def loadAlgorithms(self, *args, **kwargs):
        self.addAlgorithm(generateChainagePointOnRTSS())
        self.addAlgorithm(GeocodageInverse())
        #self.addAlgorithm(GeocodePoint())
        #self.addAlgorithm(GeocodeLine())
        self.addAlgorithm(generatePerpendicularLines())
        self.addAlgorithm(generateTransect())
    
    def id(self, *args, **kwargs):
        """The ID of your plugin, used for identifying the provider.
        This string should be a unique, short, character only string,
        eg "qgis" or "gdal". This string should not be localised.
        """
        return 'MTQ'
    
    def name(self, *args, **kwargs):
        """The human friendly name of your plugin in Processing.
        This string should be as short as possible (e.g. "Lastools", not
        "Lastools version 1.0.1 64-bit") and localised.
        """
        return self.tr('Outils MTQ')
    
    def icon(self):
        """Should return a QIcon which is used for your provider inside
        the Processing toolbox.
        """
        return QgsProcessingProvider.icon(self)
         
        
        
        