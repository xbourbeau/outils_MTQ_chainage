# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OutilsMTQ
                                 A QGIS plugin
 Regroupe les outils pratiques
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-09-23
        copyright            : (C) 2021 by Xavier Bourbeau
        email                : xavier.bourbeau@transports.gouv.qc.ca
        git sha              : $Format:%H$
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
 This script initializes the plugin, making it known to QGIS.
"""
import os
#from qgis.core import QgsSettings
from qgis.PyQt.QtCore import QSettings
from qgis.PyQt.QtGui import QFont, QColor
from qgis.core import QgsSymbol 

class Parametre:
    def __init__(self, categorie, setting_name, default_value):
        # Nom de la catégorie du plugin dans les settings de QGIS 
        self.plugin_setting_name = "PluginChainageMTQ"
        self.categorie = categorie
        self.setting_name = setting_name
        self.default_value = default_value
        # Path to QGIS Setting
        self.setting = "{plugin}/{categorie}/{setting}".format(
            plugin=self.plugin_setting_name,
            categorie=self.categorie,
            setting=self.setting_name)
    
    def setValue(self, val):
        if val != self.getValue: QSettings().setValue(self.setting, val)
    
    def getValue(self):
        return QSettings().value(self.setting, self.default_value)

class ParametreBool(Parametre):
    def __init__(self, categorie, setting_name, default_value):
        Parametre.__init__(self, categorie, setting_name, default_value)
    def getValue(self):
        return QSettings().value(self.setting, self.default_value, type=bool)

class ParametreFloat(Parametre):
    def __init__(self, categorie, setting_name, default_value):
        Parametre.__init__(self, categorie, setting_name, default_value)
    def getValue(self):
        return QSettings().value(self.setting, self.default_value, type=float)

class ParametreInt(Parametre):
    def __init__(self, categorie, setting_name, default_value):
        Parametre.__init__(self, categorie, setting_name, default_value)
    def getValue(self):
        return QSettings().value(self.setting, self.default_value, type=int)
        
class ParametreFont(Parametre):
    def __init__(self, categorie, setting_name, default_value):
        Parametre.__init__(self, categorie, setting_name, default_value)
    def getValue(self):
        return QSettings().value(self.setting, self.default_value, type=QFont)

class ParametreAction(Parametre):
    def __init__(self, nom, icon, setting_name, default_is_visible=True, groupe=None):
        Parametre.__init__(self, "Action", setting_name, default_is_visible)
        self.nom = nom
        self.groupe = groupe
        self.icon = os.path.join(os.path.dirname(__file__), icon)
    
    def getValue(self):
        return QSettings().value(self.setting, self.default_value, type=bool)
    
    def getIcon(self):
        return self.icon
    
    def getGroupe(self):
        if not self.groupe: return ''
        else: return self.groupe

class sourceParametre:
    
    def __init__ (self):
        categorie_layers = "Layers"
        categorie_option = "Option"
        categorie_config = "Config"
        self.plugin_dir = os.path.dirname(__file__)
        path_to_default_style_eccusson = os.path.realpath(os.path.join(self.plugin_dir, 'styles\styles_ecusson.qml'))
        path_to_default_style_chainage = os.path.realpath(os.path.join(self.plugin_dir, 'styles\point_de_chainage.qml'))
        
        text_on_map_font = QFont()
        text_on_map_font.setPointSize(9)
        text_on_map_font.setItalic(True)
        
        # ========================= Définir les paramètres par défault ===============================
        self.dict_parametre = {
            # Paramètre: Nom du layer RTSS
            "layer_rtss": Parametre(categorie_layers, "layer_rtss", default_value="BGR - RTSS"),
            # Paramètre: Nom du champs du numéro de RTSS
            "field_num_rtss": Parametre(categorie_layers, "field_num_rtss", default_value="num_rts"),
            # Paramètre: Nom du champs de chainage de début
            "field_chainage_debut": Parametre(categorie_layers, "field_chainage_debut", default_value="chang_debut"),
            # Paramètre: Nom du champs de chainage de fin
            "field_chainage_fin": Parametre(categorie_layers, "field_chainage_fin", default_value="val_longr_sous_route"),
            # Paramètre: Nom du champs de classification
            "field_classification": Parametre(categorie_layers, "field_classification", default_value="cod_clasf_fonct"),
            # Paramètre: Précision du chainage à utiliser
            "precision_chainage": ParametreInt(categorie_option, "precision_chainage", default_value=0),
            # Paramètre: Utiliser le formatage des RTSS 
            "formater_rtss": ParametreBool(categorie_option, "formater_rtss", default_value=True),
            # Paramètre: Utiliser le formatage des chainage
            "formater_chainage": ParametreBool(categorie_option, "formater_chainage", default_value=True),
            # Paramètre: Utiliser seulement les RTSS visible dans la symbologie de la couche
            "use_only_on_visible": ParametreBool(categorie_option, "use_only_on_visible", default_value=True),
            # Paramètre: Police d'écriture des tooltip
            "font_on_map": ParametreFont(categorie_option, "font_on_map", default_value=text_on_map_font),
            # Paramètre: Couleur du texte des tooltip
            "color_font_on_map": Parametre(categorie_option, "color_font_on_map", default_value="#000000"),
            # Paramètre: Afficher le numéro du RTSS dans le tooltip
            "show_rtss_on_map": ParametreBool(categorie_option, "show_rtss_on_map", default_value=False),
            # Paramètre: Afficher le chainage dans le tooltip
            "show_chainage_on_map": ParametreBool(categorie_option, "show_chainage_on_map", default_value=False),
            # Paramètre: Afficher la distance dans le tooltip
            "show_distance_on_map": ParametreBool(categorie_option, "show_distance_on_map", default_value=False),
            # Paramètre: Dernière position de la fenêtre des paramètres
            "dlg_param_last_pos": ParametreInt(categorie_config, "dlg_param_last_pos", default_value=2),
            # Paramètre: Dernière position de la fenêtre d'ajout d'entité 
            "dlg_add_feat_last_pos": ParametreInt(categorie_config, "dlg_add_feat_last_pos", default_value=2),
            # Paramètre: Utiliser un raccourcis clavier pour le suivi du chainage
            "use_raccourcis_chainage": ParametreBool(categorie_config, "use_raccourcis_chainage", default_value=True),
            # Paramètre: Raccourci clavier du suivi de chainage
            "raccourcis_clavier": Parametre(categorie_config, "raccourcis_clavier", default_value='C'),
            # Paramètre: Utiliser un raccourcis clavier pour le placement d'écusson
            "use_raccourcis_ecusson": ParametreBool(categorie_config, "use_raccourcis_ecusson", default_value=False),
            # Paramètre: Raccourci clavier du placement d'écusson
            "raccourcis_clavier_ecusson": Parametre(categorie_config, "raccourcis_clavier_ecusson", default_value='E'),
            # Paramètre: Nom de la couche des écussons
            "layer_ecusson_name": Parametre(categorie_config, "layer_ecusson_name", default_value='Écussons'),
            # Paramètre: Nom du champs du numéro de route
            "layer_ecusson_field_route": Parametre(categorie_config, "layer_ecusson_field_route", default_value='route'),
            # Paramètre: Nom du champs de la classification fonctionnelle
            "layer_ecusson_field_classe": Parametre(categorie_config, "layer_ecusson_field_classe", default_value='classe'),
            # Paramètre: Chemin vers le fichier qml de style pour la couche des écussons
            "layer_ecusson_style": Parametre(categorie_config, "layer_ecusson_style", default_value=path_to_default_style_eccusson),
            # Paramètre: Chemin vers les écussons vide par défault
            "ecusson_path": Parametre(categorie_config, "ecusson_path", default_value=""),
            # Paramètre: Chemin vers le fichier qml de style pour la couche des points de chainage
            "layer_chainage_style": Parametre(categorie_config, "layer_chainage_style", default_value=path_to_default_style_chainage),
            # Paramètre: Suivre les mise à jour du plugin
            "suivi_plugin_update": ParametreBool(categorie_config, "suivi_plugin_update", default_value=True),
            # Paramètre: Chemin vers le répertoire des fichier ZIP des versions du plugin
            "dossier_plugin_update": Parametre(categorie_config, "dossier_plugin_update", default_value=r"\\sstao00-adm005\TridentAnalyst\Plugin_chainage_mtq\Plugin")}
           
        # Dictionnaire des objets action de la barre d'outils du plugin
        self.dict_actions = {
            "Paramètre": ParametreAction("Paramètre", "icons/Parametres.png", "parametre_is_visible", True),
            "Suivre le chainage": ParametreAction("Suivre le chainage", "icons/chaine.png", "suivre_chainage_is_visible", True),
            "Mesurer un chainage": ParametreAction("Mesurer un chainage", "icons/mesure.png", "mesurer_is_visible", True),
            "Calculer un interval de chainage": ParametreAction("Calculer un interval de chainage", "icons/chainage.png", "interval_chainage_is_visible", True, groupe="intervalle"),
            "Calculer des transects": ParametreAction("Calculer des transects", "icons/transect.png", "transects_is_visible", True, groupe="intervalle"),
            "Calculer des atlas": ParametreAction("Calculer des atlas", "icons/atlas.png", "atlas_is_visible", False, groupe="intervalle"),
            "Placer des écussons": ParametreAction("Placer des écussons", "icons/ecusson.png", "placer_ecusson_is_visible", True),
            "Creation de geometrie": ParametreAction("Creation de geometrie", "icons/create_point.png", "creer_geometrie_is_visible", False),
            "Open SIGO": ParametreAction("Open SIGO", "icons/igo.png", "open_sigo_is_visible", True),
            "Open SVN": ParametreAction("Open SVN", "icons/svn.png", "open_svn_is_visible", False),
            "Aide": ParametreAction("Aide", "icons/help.png", "help_is_visible", True)
            }
            
    def getParam(self, name):
        if name in self.dict_parametre: return self.dict_parametre[name]
        return None
    
    def getAction(self, name):
        if name in self.dict_actions: return self.dict_actions[name]
        return None
    
    def getActionsInGroupe(self, groupe, only_visible=True):
        return [name for name, act in self.dict_actions.items() if act.getGroupe() == groupe and (only_visible and act.getValue())]
                
        

    
